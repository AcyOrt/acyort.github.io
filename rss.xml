<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[AcyOrt]]></title><description><![CDATA[A Node.js blog tool powered by GitHub.]]></description><link>http://acyortjs.github.io</link><generator>RSS for Node</generator><lastBuildDate>Wed, 15 Feb 2017 13:51:37 GMT</lastBuildDate><atom:link href="http:/acyortjs.github.io/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Wed, 15 Feb 2017 13:51:37 GMT</pubDate><item><title><![CDATA[记录一下折腾黑苹果过程]]></title><description><![CDATA[<p>也算是完成了读书时候的心愿，以前读书时候老想着弄个黑苹果，但是一直没有成功。最近折腾安装前后花的时间就两三天那样，参考了一堆前人经验，所以不会很折腾，总体上算是完美的</p>
<h2>黑苹果情况</h2><p><img src="https://cloud.githubusercontent.com/assets/2193211/22615077/d8cde9de-eac7-11e6-98be-6531cc36bc61.png" alt="screen shot 2017-02-04 at 10 30 35 am"></p>
<h3>正常部分</h3><ul>
<li>显卡(HD530)，声卡，网卡驱动正常</li>
<li>USB 3 识别正常</li>
<li>CPU 可以变频</li>
<li>SSD TRIM 正常</li>
</ul>
<h3>问题</h3><ul>
<li>不能休眠/睡眠，因为是台式机，不理会</li>
<li>开机偶尔会出现禁止符号，拔掉/换接口 usb 就可以，应该是 usb 驱动问题吧，经常不关机不理会</li>
<li>开机过程会有一瞬间花屏现象，不影响使用，不理会</li>
</ul>
<h2>机器配置</h2><ul>
<li>CPU: i5-6500 散 </li>
<li>主板: 微星 B150i GAMING PRO </li>
<li>内存: 金士顿 8G*2 </li>
<li>显卡: 内置集显</li>
<li>机箱: 迎广肖邦</li>
<li>电源: 机箱内置 </li>
<li>SSD: Crucial_CT960M500 (之前没有用到的) </li>
</ul>
<h2>安装过程</h2><p>主要参考：<a href="https://www.tonymacx86.com/threads/unibeast-install-macos-sierra-on-any-supported-intel-based-pc.200564/">https://www.tonymacx86.com/threads/unibeast-install-macos-sierra-on-any-supported-intel-based-pc.200564/</a></p>
<p>需要 3 个软件 <code>UniBeast</code>, <code>MultiBeast</code>, <code>Clover Configurator</code></p>
<p>usb 启动盘相关都是在 MacBook air 上操作的，教程上制作软件需要在英文系统下操作</p>
<h3>BIOS 设置</h3><ul>
<li><p>settings\高级\整合周边设备： SATA模式 - AHCI模式</p>
</li>
<li><p>settings\高级\USB设置： XHCI Hand-off - 允许</p>
</li>
<li><p>settings\高级\超级IO配置\串口0配置： 串口0 - 禁止</p>
</li>
<li><p>settings\启动： 启动模式选择 - UEFI</p>
</li>
<li><p>Overclocking\CPU 特征： CFG 锁定 - 禁止</p>
</li>
<li><p>~Overclocking\CPU 特征： Intel 虚拟化技术 - 禁止 ／ Intel VT-D 技术 - 禁止~</p>
</li>
</ul>
<h3>UniBeast 制作安装启动盘</h3><ul>
<li>格式化 U 盘：USB/OS X Extended (Journaled)/GUID Partition Map</li>
<li>写入 macOS Sierra 镜像，过程有点长，慢慢等</li>
</ul>
<p>安装完成将需要的设置软件 <code>MultiBeast</code>, <code>Clover Configurator</code> 拖入 U 盘保存，后续需要</p>
<h3>安装系统</h3><ul>
<li>开机 F11 选择 U 盘启动</li>
<li>磁盘工具格式化硬盘：Sierra/OS X Extended (Journaled)/GUID Partition Map</li>
<li>安装，然后提示重启</li>
<li>重启后选择 U 盘启动，启动刚刚安装的 Sierra，继续完成安装</li>
</ul>
<h3>系统设置</h3><p>完成安装后，这时候系统还没有相关驱动，打开相应软件进行设置</p>
<blockquote>
<p>使用 <code>MutiBeast</code> 进行驱动相关设置</p>
</blockquote>
<ul>
<li>Quick Start: UEFI Boot Mode</li>
<li>Audio: Realtek ALCxxx - ALC887/888b, Optional HD 3000/HD 4000/HD 530 HDMI Audio</li>
<li>Network: Realtek - RealtekRTL8111 v2.2.1</li>
<li>Graphics Configuration: Intel HD 530</li>
<li>SSDT Options: Sandy Bridge Core i5</li>
</ul>
<blockquote>
<p>plist 设置</p>
</blockquote>
<p>使用 <code>Clover Configurator</code> mount EFI 分区，用 sublime 打开 EFI/CLOVER/config.plist，添加对应字段</p>
<pre><code><?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Devices</key>
    <dict>
        <key>AddProperties</key>
        <array>
            <dict>
                <key>Device</key>
                <string>IntelGFX</string>
                <key>Key</key>
                <string>AAPL,Gfx324</string>
                <key>Value</key>
                <data>
                AQAAAA==
                </data>
            </dict>
            <dict>
                <key>Device</key>
                <string>IntelGFX</string>
                <key>Key</key>
                <string>AAPL,GfxYTile</string>
                <key>Value</key>
                <data>
                AQAAAA==
                </data>
            </dict>
            <dict>
                <key>Device</key>
                <string>IntelGFX</string>
                <key>Key</key>
                <string>AAPL00,PanelCycleDelay</string>
                <key>Value</key>
                <data>
                +gAAAA==
                </data>
            </dict>
            <dict>
                <key>Device</key>
                <string>IntelGFX</string>
                <key>Key</key>
                <string>AAPL00,PanelPowerDown</string>
                <key>Value</key>
                <data>
                PAAAAA==
                </data>
            </dict>
            <dict>
                <key>Device</key>
                <string>IntelGFX</string>
                <key>Key</key>
                <string>AAPL00,PanelPowerOff</string>
                <key>Value</key>
                <data>
                EQAAAA==
                </data>
            </dict>
            <dict>
                <key>Device</key>
                <string>IntelGFX</string>
                <key>Key</key>
                <string>AAPL00,PanelPowerOn</string>
                <key>Value</key>
                <data>
                GQEAAA==
                </data>
            </dict>
            <dict>
                <key>Device</key>
                <string>IntelGFX</string>
                <key>Key</key>
                <string>AAPL00,PanelPowerUp</string>
                <key>Value</key>
                <data>
                MAAAAA==
                </data>
            </dict>
            <dict>
                <key>Device</key>
                <string>IntelGFX</string>
                <key>Key</key>
                <string>graphic-options</string>
                <key>Value</key>
                <data>
                DAAAAA==
                </data>
            </dict>
            <dict>
                <key>Device</key>
                <string>IntelGFX</string>
                <key>Key</key>
                <string>hda-gfx</string>
                <key>Value</key>
                <string>onboard-1</string>
            </dict>
        </array>
    </dict>
</dict>
</plist></code></pre><blockquote>
<p>kexts</p>
</blockquote>
<p>复制 <code>FakeSMC.kext</code>, <code>RealtekRTL8111.kext</code>, <code>VoodooHDA.kext</code> 到 EFI/CLOVER／kexts／other</p>
<blockquote>
<p>ssd trim</p>
</blockquote>
<p>输入相关命令重启即可</p>
<pre><code>sudo trimforce enable</code></pre><blockquote>
<p>默认启动 </p>
</blockquote>
<p>config.plist／Boot/DefaultVolume 的 ‘值’ 改成你的启动盘(Sierra)，默认为 macHDD</p>
]]></description><link>http:/acyortjs.github.io/posts/205319771.html</link><guid isPermaLink="true">http:/acyortjs.github.io/posts/205319771.html</guid><dc:creator><![CDATA[LoeiFy]]></dc:creator><pubDate>Sun, 12 Feb 2017 11:58:10 GMT</pubDate></item><item><title><![CDATA[Adobe CEP 扩展相关]]></title><description><![CDATA[<p>Adobe 系列通常情况下宿主应用是不会运行未经签名扩展的，只有打包并签名才可以运行。但是可以打开开发者模式</p>
<h2>启用开发者模式</h2><blockquote>
<p>Windows</p>
</blockquote>
<p>打开到注册表定位到: ( 高版本类推 )</p>
<ul>
<li>CC 2014: <code>HKEY_CURRENT_USER\Software\Adobe\CSXS.5</code></li>
<li>CC 2015: <code>HKEY_CURRENT_USER\Software\Adobe\CSXS.6</code></li>
</ul>
<p>将 <code>PlayerDebugMode</code> 设置为 <code>1</code></p>
<blockquote>
<p>macOS</p>
</blockquote>
<p>终端输入: ( 同样高版本类推 )</p>
<p><code>defaults write com.adobe.CSXS.6 PlayerDebugMode 1</code></p>
<h2>扩展签名打包</h2><p>使用 Adobe 官方提供的 ZXPSignCmd
<a href="https://github.com/Adobe-CEP/CEP-Resources/tree/master/ZXPSignCMD">https://github.com/Adobe-CEP/CEP-Resources/tree/master/ZXPSignCMD</a></p>
<p><img src="https://cloud.githubusercontent.com/assets/2193211/21304385/cae9241a-c5ff-11e6-98fb-1ef0e84ee80e.png" alt="71097-6671c44f605ce86a"></p>
<p>以下为 macOS 下操作，Windows 类似。先进入文件目录</p>
<h3>创建证书</h3><pre><code>./ZXPSignCmd -selfSignedCert <countryCode> <stateOrProvince> <organization> <commonName> <password> <outputPath.p12>
./ZXPSignCmd -selfSignedCert <国家代码> <地区> <组织名> <证书所有者名称> <证书密码> <证书名.p12>

# example
./ZXPSignCmd -selfSignedCert CN guangzhou lorem.in loeify aksdj4 lorem.p12</code></pre><h3>签名并打包</h3><pre><code>./ZXPSignCmd -sign <inputDirectory> <outputZxp> <p12> <p12Password>
./ZXPSignCmd -sign <要打包的项目目录> <输出文件路径> <证书路径> <证书密码>

# example
./ZXPSignCmd -sign xxx xxx.zxp lorem.p12 aksdj4</code></pre><p>打包生成后的 <code>zxp</code> 是 <code>zip</code> 一样的可以解压</p>
<h2>手动安装插件</h2><h3>目录</h3><p>将插件解压，放进目录</p>
<blockquote>
<p>Windows</p>
</blockquote>
<p><code>C:\Program Files\Common Files\Adobe\CEP\extensions\</code></p>
<blockquote>
<p>macOS ( 注意是全局 Library，不是用户的 )</p>
</blockquote>
<p><code>/Library/Application Support/Adobe/CEP/extensions/</code></p>
<p>注意最终插件 xxx 放入目录最终应该存在 <code>/extensions/xxx/index.html</code></p>
<h3>启用</h3><p>重启 photoshop，选择 &quot;Window&quot; → &quot;Extensions&quot; → &quot;xxx&quot; 启用 </p>
<h2>参考文章</h2><ul>
<li><a href="http://nullice.com/archives/1741">Adobe CEP 扩展开发教程 「 4 」签名与打包</a></li>
<li><a href="http://nullice.com/archives/1665">Adobe CEP 扩展开发教程 「 1 」Hello World!</a></li>
</ul>
]]></description><link>http:/acyortjs.github.io/posts/196350551.html</link><guid isPermaLink="true">http:/acyortjs.github.io/posts/196350551.html</guid><dc:creator><![CDATA[LoeiFy]]></dc:creator><pubDate>Sun, 12 Feb 2017 11:58:28 GMT</pubDate></item><item><title><![CDATA[Mirror - 基于 issues 的博客工具]]></title><description><![CDATA[<p>Mirror 是一个简单的博客工具，基于 GitHub API 获取 issues 数据，然后展示在页面上。</p>
<p>该工具的方便之处在于只需要在 issue 上写你的博客文章，你的网站会自动更新博客内容。</p>
<p>借助 GitHub，你可以轻松的用 markdown 书写你的博客内容，永久保存，不用担心数据丢失问题。还可以非常方便上传博客图片，拖入编辑器即可。</p>
<p>该博客工具非常适合以 issue 作为自己博客的用户，无痛生成博客网站，对原来内容毫无影响</p>
<p>Mirror 还支持多用户协作，你可以方便的设置哪些用户写的内容可以显示在博客网站上，避免无关内容</p>
<p>Mirror 生成的博客网站很小，整体大小 <code>60kb</code> 左右（未 gzip 压缩情况），所以访问起来也很快。项目依赖： <code>axios</code>, <code>smoothscroll-polyfill</code>, <code>github-markdown-css</code></p>
<p>Mirror 在移动端同时有很好的浏览体验</p>
<h2>预览地址</h2><p><a href="http://mirror.am0200.com/">http://mirror.am0200.com/</a></p>
<p>你可以点击底部的 <code>SandBox</code> 按钮，然后写入你需要测试的项目 issues，然后就可以直接看到博客内容，例如可以输入 玉伯 的博客地址：</p>
<pre><code>title: blog

user: lifesinger

repo: blog

per page: 10</code></pre><p>点击 <code>Start</code>，你就可以看到 玉伯 的博客了。同样方法你可以测试你的 issue 博客</p>
<h2>项目地址</h2><p><a href="https://github.com/LoeiFy/Mirror">https://github.com/LoeiFy/Mirror</a></p>
<p>更详细的介绍可以看项目说明</p>
<h2>如何安装</h2><p>安装很简单，需要一个 nodejs 环境，一个简单的命令即可，如果没有 nodejs 环境，可以直接下载资源包自己配置，后面会有说明</p>
<pre><code>$ sudo npm install Mirror -g</code></pre><h2>使用</h2><h3>新建</h3><pre><code>$ cd newblog
$ mirror init</code></pre><p>或者</p>
<pre><code>$ mirror init newblog</code></pre><p>完成后你的 blog 就在 newblog 这里</p>
<h3>配置你的 blog</h3><p>修改 <code>config.yml</code></p>
<pre><code># 标题
title: Mirror

# github 用户名
user: LoeiFy

# blog 内容来源 repo
repo: Recordum

# 多用户，设定哪些用户写的 issue 内容可以展示出来，项目的用户名会自动包括进来
# 多个用户用逗号（英文逗号）隔开，例如：user0,user1
authors: 

# 分页
per_page: 10

# 是否显示 sandbox，设置是否允许用户手动写入 issue 地址进行快速预览
# 默认 false
sandbox: false</code></pre><p>获取你的 token，复制进 <code>token.txt</code>。这个 token 只有只读权限，用于提高 api 访问次数，不会有其他问题。</p>
<p><a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p>
<p><img src="https://cloud.githubusercontent.com/assets/2193211/20244206/d4d72a80-a9b2-11e6-9c0d-bb557cab90ec.png" alt="token"></p>
<h3>生成博客</h3><pre><code>$ mirror build</code></pre><h3>发布你的 blog</h3><p>你可以添加域名到 <code>CNAME</code></p>
<p>push 文件到一个 repo 的 <code>gh-pages</code> 分支</p>
<p>参考例子：<a href="https://github.com/LoeiFy/Mirror/tree/gh-pages">https://github.com/LoeiFy/Mirror/tree/gh-pages</a></p>
<p>好了，现在你可以在 github issue  上写博客了，内容会同步更新</p>
<h2>另一种安装方式</h2><p>你可以直接下载资源包，下载最新的 release，然后打开 <code>index.html</code> 进行配置，按照例子进行配置即可</p>
<p><a href="https://github.com/LoeiFy/Mirror/releases">https://github.com/LoeiFy/Mirror/releases</a></p>
<pre><code><!-- index.html -->

<script>

// blog config here
// token should be separated by '#'. example: 5#c31bffc137f44faf7efc4a84da827g7ca2cfeaa
// example:
// window.config = {"title":"rorriM","user":"acyortjs","repo":"acyortjs.github.io","token":"5#c31bffc137f44faf7efc4a84da827g7ca2cfeaa","authors":"LoeiFy,User0","per_page":1,"sandbox":false}
window.config = {"title":"","user":"","repo":"","token":"","authors":"","per_page":"", "sandbox":false}

</script></code></pre><p>配置好后，可以先尝试本地预览，需要一个本地服务器，放上去访问 <code>index.html</code> 即可，测试没问题就可以把全部文件上传到对应地址即可，也可以放到 GitHub pages 上</p>
<h2>名字来源</h2><p><code>Mirror</code> 是 <code>DJ Okawari</code> 所作的专辑</p>
<p><img src="https://cloud.githubusercontent.com/assets/2193211/12321915/c66d8b12-baeb-11e5-9612-b188f5272e3b.jpg" alt="mirror"></p>
]]></description><link>http:/acyortjs.github.io/posts/126817142.html</link><guid isPermaLink="true">http:/acyortjs.github.io/posts/126817142.html</guid><dc:creator><![CDATA[LoeiFy]]></dc:creator><pubDate>Thu, 09 Feb 2017 01:23:46 GMT</pubDate></item></channel></rss>