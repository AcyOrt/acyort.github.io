<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[AcyOrt]]></title><description><![CDATA[A Node.js blog tool powered by GitHub.]]></description><link>http://acyort.github.io</link><generator>RSS for Node</generator><lastBuildDate>Thu, 13 Oct 2016 13:44:15 GMT</lastBuildDate><atom:link href="http://acyort.github.io/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 13 Oct 2016 13:44:15 GMT</pubDate><item><title><![CDATA[善良比聪明重要]]></title><description><![CDATA[<p><img src="https://camo.githubusercontent.com/2c9376998e6bb7f6fe50664ae8bd3e0a63440471/687474703a2f2f6d6d62697a2e717069632e636e2f6d6d62697a2f44464156324b797463625569615543346d4d46477746524c64656f6e38314d4a565477365433726a38333057515a4f724847776c6575674757794b6a3245714a34546d70636458614b316c6a4f736a69635a6e39483278672f3634303f77785f666d743d6a7065672674703d7765627026777866726f6d3d35" alt=""></p>
<p>2010 年，亚马逊 CEO 杰夫·贝佐斯（Jeff Bezos）在母校普林斯顿大学的毕业典礼上，勉励年轻人，善用自己的天赋，做出对的选择。因为，「人生到头来，我们的选择，决定了我们是什么样的人。」</p>
<p>以下是 Bezos 演讲内容：</p>
<p>As a kid, I spent my summers with my grandparents on their ranch in Texas. I helped fix windmills, vaccinate cattle, and do other chores. We also watched soap operas every afternoon, especially &quot;Days of our Lives.&quot; My grandparents belonged to a Caravan Club, a group of Airstream trailer owners who travel together around the U.S. and Canada. And every few summers, we&#39;d join the caravan. We&#39;d hitch up the Airstream trailer to my grandfather&#39;s car, and off we&#39;d go, in a line with 300 other Airstream adventurers. I loved and worshipped my grandparents and I really looked forward to these trips. On one particular trip, I was about 10 years old. I was rolling around in the big bench seat in the back of the car. My grandfather was driving. And my grandmother had the passenger seat. She smoked throughout these trips, and I hated the smell.</p>
<p>孩提时代，我总是在德州祖父母的农场中度过夏天。我帮忙修理风车，为牛接种疫苗，也做其他杂活。每天下午，我们也看肥皂剧，特别是《光辉岁月》。祖父母参加了一个房车俱乐部，一群人驾驶 Airstream 房车，结伴游历美国和加拿大。每隔几个夏天，我们会加入一次旅程。把房车挂在祖父的小汽车后面，融入 300 余名 Airstream 探险者的浩荡队伍中，就这样出发。我爱祖父母，心怀敬仰，很期盼这些旅程。在我大约 10 岁时，有一次很特殊的旅程。那次我胡乱坐在后座上，祖父开着车，祖母坐在他旁边。整个旅程祖母都吸着烟，我讨厌烟味。</p>
<p>At that age, I&#39;d take any excuse to make estimates and do minor arithmetic. I&#39;d calculate our gas mileage -- figure out useless statistics on things like grocery spending. I&#39;d been hearing an ad campaign about smoking. I can&#39;t remember the details, but basically the ad said, every puff of a cigarette takes some number of minutes off of your life: I think it might have been two minutes per puff. At any rate, I decided to do the math for my grandmother. I estimated the number of cigarettes per days, estimated the number of puffs per cigarette and so on. When I was satisfied that I&#39;d come up with a reasonable number, I poked my head into the front of the car, tapped my grandmother on the shoulder, and proudly proclaimed, &quot;At two minutes per puff, you&#39;ve taken nine years off your life!” I have a vivid memory of what happened, and it was not what I expected. I expected to be applauded for my cleverness and arithmetic skills. &quot;Jeff, you&#39;re so smart. You had to have made some tricky estimates, figure out the number of minutes in a year and do some division.&quot; That&#39;s not what happened. Instead, my grandmother burst into tears. I sat in the backseat and did not know what to do. While my grandmother sat crying, my grandfather, who had been driving in silence, pulled over onto the shoulder of the highway. He got out of the car and came around and opened my door and waited for me to follow. Was I in trouble? My grandfather was a highly intelligent, quiet man. He had never said a harsh word to me, and maybe this was to be the first time? Or maybe he would ask that I get back in the car and apologize to my grandmother. I had no experience in this realm with my grandparents and no way to gauge what the consequences might be. We stopped beside the trailer. My grandfather looked at me, and after a bit of silence, he gently and calmly said, &quot;Jeff, one day you&#39;ll understand that it&#39;s harder to be kind than clever.”</p>
<p>当年，我总是想尽办法去做估测或小算术。我会计算油耗还有杂货花销等鸡毛蒜皮的小事。我听过一个与吸烟相关的广告，但记不清细节了。广告大意是，每吸一口香烟会减少几分钟寿命，好像是两分钟。管它几分钟呢，我决定为祖母做个算术。我估测了祖母每天吸几支香烟，每支香烟吸几口等等，然后心满意足地得出了一个合理的数字。接着，我把头探入汽车前排，拍了拍祖母的肩膀，骄傲地宣称：「如果每吸一口烟少活两分钟的话，你的寿命已经少了九年！」我清晰地记得接下来发生的事，是我意料之外的。凭借聪明的大脑和算术技巧，我期待赢来夸赞：「杰夫，你真聪明。你应该做一些更需要技巧的算术，比如一年有多少分钟，以及做些除法。」我的期待并没有发生。相反，祖母突然哭泣起来，我坐在后座茫然无措。祖父一直在默默开车，听到祖母的哭声，把车停在高速路边。祖父走下车来，打开车门，等我跟他下车。我惹麻烦了吗？祖父是一个智慧而安静的人。他从来没有对我说过严厉的话，难道这会是第一次？还是他会让我回到车上给祖母道歉？我以前从未遇到过这种状况，无从知晓会有什么后果发生。我们在房车旁停下来，祖父注视着我，沉默片刻，然后轻轻地、平静地说： <strong>「杰夫，有一天你会明白，善良比聪明更难。」</strong></p>
<p>What I want to talk to you about today is the difference between gifts and choices. Cleverness is a gift, kindness is a choice. Gifts are easy -- they&#39;re given after all. Choices can be hard. You can seduce yourself with your gifts if you&#39;re not careful, and if you do, it&#39;ll probably be to the detriment of your choices. This is a group with many gifts. I&#39;m sure one of your gifts is the gift of a smart and capable brain. I&#39;m confident that&#39;s the case because admission is competitive and if there weren&#39;t some signs that you&#39;re clever, the dean of admission wouldn&#39;t have let you in.</p>
<p>今天我想对你们说的是，天赋和选择的不同。 <strong>聪明是一种天赋，而善良是一种选择。</strong> 天赋得来容易 —— 毕竟与生俱来。而选择颇为不易。一不小心，你可能会被天赋所诱惑，而这可能会损害到你的选择。 在座各位都拥有众多天赋。我确信你们的天赋之一就是拥有精明能干的头脑。之所以如此确信，是因为入学竞争如此激烈，如果你们不聪明，便不会有资格进入这所学校。</p>
<p>Your smarts will come in handy because you will travel in a land of marvels. We humans — plodding as we are -- will astonish ourselves. We&#39;ll invent ways to generate clean energy and a lot of it. Atom by atom, we&#39;ll assemble tiny machines that will enter cell walls and make repairs. This month comes the extraordinary but also inevitable news that we&#39;ve synthesized life. In the coming years, we&#39;ll not only synthesize it, but we&#39;ll engineer it to specifications. I believe you&#39;ll even see us understand the human brain. Jules Verne, Mark Twain, Galileo, Newton -- all the curious from the ages would have wanted to be alive most of all right now. As a civilization, we will have so many gifts, just as you as individuals have so many individual gifts as you sit before me. How will you use these gifts? And will you take pride in your gifts or pride in your choices?</p>
<p>你们将在一片充满奇迹的世界上前行，聪明才智必能派上用场。我们人类，尽管跬步前行，却终将令自己大吃一惊。我们能够想方设法制造清洁能源等等，也能够一个原子一个原子地组装微型机械，使之穿过细胞壁，去修复细胞。这个月，有一个非常激动人心却又不足为奇的消息 —— 人类终于合成了生命。在未来几年，我们不仅会合成生命，还能将之工程规范化。我相信你们甚至会看到人类大脑被彻底理解。儒勒·凡尔纳、马克·吐温、伽利略、牛顿 —— 所有那些充满好奇之心的人都希望能够活在现在。作为文明人，我们拥有如此多的天赋，就像是坐在我面前的你们，每一个生命个体都拥有众多独特的天赋。如何运用这些天赋？为自己的天赋感到骄傲，还是会为自己的选择感到骄傲？</p>
<p>I got the idea to start Amazon 16 years ago. I came across the fact that Web usage was growing at 2,300 percent per year. I&#39;d never seen or heard of anything that grew that fast, and the idea of building an online bookstore with millions of titles -- something that simply couldn&#39;t exist in the physical world -- was very exciting to me. I had just turned 30 years old, and I&#39;d been married for a year. I told my wife MacKenzie that I wanted to quit my job and go do this crazy thing that probably wouldn&#39;t work since most startups don&#39;t, and I wasn&#39;t sure what would happen after that. MacKenzie (also a Princeton grad and sitting here in the second row) told me I should go for it. As a young boy, I&#39;d been a garage inventor. I&#39;d invented an automatic gate closer out of cement-filled tires, a solar cooker that didn&#39;t work very well out of an umbrella and tinfoil, baking-pan alarms to entrap my siblings. I&#39;d always wanted to be an inventor, and she wanted me to follow my passion.</p>
<p>16 年前，我萌生了创办亚马逊的想法。当年，互联网使用量以每年 2300% 的速度增长，我从未看到或听说过任何东西增长如此快速。有个想法令我异常兴奋 —— 创建涵盖几百万种书籍的网上书店，这东西在物理世界根本无法存在。那时我刚满 30 岁，结婚才一年。我告诉妻子 MacKenzie 想辞去工作，然后去做这件疯狂的事，很可能会失败，因为大部分创业公司都如此，而且我不确定之后会发生什么。MacKenzie （也是普林斯顿毕业生，就坐在下面第二排）告诉我，我应该放手一搏。少年时期，我是一名车库发明家。我曾用水泥填充的轮胎制作自动关门器，用雨伞和锡箔制作太阳能炒锅（虽然不太好用），我还用煎锅做了一个警报器来吓唬邻居。我一直想做一个发明家，MacKenzie 支持我追随内心的热情。</p>
<p>I was working at a financial firm in New York City with a bunch of very smart people, and I had a brilliant boss that I much admired. I went to my boss and told him I wanted to start a company selling books on the Internet. He took me on a long walk in Central Park, listened carefully to me, and finally said, &quot;That sounds like a really good idea, but it would be an even better idea for someone who didn&#39;t already have a good job.&quot; That logic made some sense to me, and he convinced me to think about it for 48 hours before making a final decision. Seen in that light, it really was a difficult choice, but ultimately, I decided I had to give it a shot. I didn&#39;t think I&#39;d regret trying and failing. And I suspected I would always be haunted by a decision to not try at all. After much consideration, I took the less safe path to follow my passion, and I&#39;m proud of that choice.</p>
<p>我当时在纽约一家金融公司工作，同事是一群非常聪明的人，老板也很有智慧，我很敬佩他。我告诉老板我想开办一家公司，在网上卖书。老板带我在中央公园漫步良久，认真听我讲完，最后说：「听起来真是一个很好的主意。然而，对那些目前没有谋到一份好工作的人来说，这个主意会更好。」这一逻辑对我而言颇有道理，老板说服我做出最终决定之前再考虑 48 小时。那样想来，这个决定确实很艰难，但是最终，我决定拼一次。 <strong>我认为自己不会为尝试过后的失败而遗憾，倒是有所决定但完全不付诸行动会一直煎熬着我。</strong> 深思熟虑后，我选择了那条不安全的道路，去追随内心的热情。我为自己的决定感到骄傲。</p>
<p>Tomorrow, in a very real sense, your life -- the life you author from scratch on your own -- begins.
How will you use your gifts? What choices will you make?
Will inertia be your guide, or will you follow your passions?
Will you follow dogma, or will you be original?
Will you choose a life of ease, or a life of service and adventure?
Will you wilt under criticism, or will you follow your convictions?
Will you bluff it out when you&#39;re wrong, or will you apologize?
Will you guard your heart against rejection, or will you act when you fall in love?
Will you play it safe, or will you be a little bit swashbuckling? When it&#39;s tough, will you give up, or will you be relentless?
Will you be a cynic, or will you be a builder?
Will you be clever at the expense of others, or will you be kind?</p>
<p>明天，非常现实地说，从零塑造自己人生的时代，即将开启。
你会如何运用自己的天赋？又会做出怎样的抉择？
你会随波逐流，还是追随内心的热情？
你会顺从于教条，还是保持初心？
你会选择安逸的生活，还是奉献与冒险的人生？
你会屈于批评，还是会坚守信念？
你会掩饰错误，还是会坦诚道歉？
你会因害怕拒绝而掩饰真心，还是会在深爱中勇往直前？
你想要波澜不惊，还是想搏击风浪？
你会在严峻的现实之下选择放弃，还是会义无反顾前行？
你要做愤世嫉俗者，还是踏实建设者？
你要不计一切地展示聪明，还是选择善良？</p>
<p>I will hazard a prediction. When you are 80 years old, and in a quiet moment of reflection narrating for only yourself the most personal version of your life story, the telling that will be most compact and meaningful will be the series of choices you have made. In the end, we are our choices. Build yourself a great story.</p>
<p>Thank you and good luck!</p>
<p>我要做一个预测：在大家 80 岁追忆往昔的时刻，一个人静静对内心诉说人生故事时，其中最为充实、最有意义的那段故事，会是大家做出的一系列选择。最后， <strong>是选择塑造了我们，为自己塑造一个伟大的故事吧。</strong></p>
<p>谢谢，祝福好运！</p>
<p>（完）</p>
<p>说明：初始译文来自网络，未找到原作者。细节有瑕疵，还有小部分漏译，我做了大量修正。</p>
<p>Bezos 演讲视频：<a href="http://v.youku.com/v_show/id_XNDEzMTMxNzQ4.html">点此播放</a></p>
<hr>
<p>欢迎关注「探索时间」微信公众号：
<img src="https://os.alipayobjects.com/rmsportal/iGEFtEmkNabgVPH.jpg" alt="">
探索有趣的事，遇见有趣的人。</p>
]]></description><link>http://acyort.github.io/posts/126186859.html</link><guid isPermaLink="true">http://acyort.github.io/posts/126186859.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Mon, 19 Sep 2016 10:21:46 GMT</pubDate></item><item><title><![CDATA[从个体到团队]]></title><description><![CDATA[<p><img src="https://os.alipayobjects.com/rmsportal/PYKvqLgUkejmhgw.jpeg" alt=""></p>
<p>每位年轻的个体，都有一颗不安分的心。</p>
<p>这个博客，就是一种不安分。想 make some noise，想去探索更多有趣的事，想去遇见更多有趣的人。</p>
<p>只是一个人太孤单，一颗不安分的心太渺小。如何去发生更多惊喜，光靠一个人不够，需要的是一群人，需要的是一群不安分的心。</p>
<p>就有了想法，想从一个人的求索，转换成一群人的探索。这一群人，就在我身边，我所在的团队。</p>
<p>我们在蚂蚁金服体验技术部，由一群设计师与工程师组成。设计、技术、产品，以及自由，是我们追逐的梦想。我们想做地球上专业有爱的团队，我们想打造体验一流的产品。我们一点一滴践行，让生活变得更美好。</p>
<p>这是一种在一起的力量，是一种我们的力量。话不多说，请关注我们的后续行动。特别欢迎各位朋友的主动式参与，惊喜就在其中。</p>
<p>关注我们的团队博客：<a href="https://github.com/ant-ued/blog/issues">https://github.com/ant-ued/blog/issues</a></p>
<p>关注我们的微信公众号：
<img src="https://os.alipayobjects.com/rmsportal/iGEFtEmkNabgVPH.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/121408964.html</link><guid isPermaLink="true">http://acyort.github.io/posts/121408964.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Wed, 31 Aug 2016 15:23:20 GMT</pubDate></item><item><title><![CDATA[几缕代码与闲思]]></title><description><![CDATA[<p><img src="https://t.alipayobjects.com/images/rmsweb/T1Hc4iXdFeXXXXXXXX.jpg" alt=""></p>
<p>早上起来，窗外斜风细雨，这是杭城最好的季节。雨味夹杂着桂香，有一丝醉人，也有一丝恼人。雨停，能骑车上班，就是莫大的喜悦。</p>
<p>（一）</p>
<p>喜欢骑车，一路听歌，什么都不想，无拘无束。越来越觉得，活着最难得的，是内心的一份真喜悦。太阳从云层出来，落下一朵朵树荫，小憩的身体微微冒着热气，活力涌动，是那么美好。</p>
<p>公司刚搬到新大楼，一切都是新的，一切又都是过往的延续。这些天最爱的是泡一杯绿茶，静坐一隅，舒舒服服写代码。一个工程师，是否真的喜欢写代码，就看其一个人时、在一个长长的假期里，能否安静又充满饥渴地写下一行行代码。</p>
<p>就如喜欢旅行的人一样，一到假期就坐不住。去往各地，看风景、赏人文，与不同的人或最亲密的人一起走过一段段路。写代码也是一种旅行，GitHub 上景点繁星满天。</p>
<p>最不喜的是旅游，走马观花看过很多代码仓库，读读 README 跑跑 DEMO，只要时间稍长，最后的收获是然并卵。旅行比旅游好点，会 clone 下来，读读源码、仔细用用，甚至踩上几个坑。经常去旅行的人，会上瘾，容易变成文艺青年。然而文学有情、艺术无价，文艺却是经常有毒的。比如这段略带文艺的话就是有毒的，会让文艺青年们微微泛起怒意，失了平和。</p>
<p>我向往并尝试践行的是旅住。文艺青年最常犯的错误，就是把旅行中看到的风景，认为是常态，自以为了解，实则是众多不了解。程序员这个圈子，最佩服的是能选择一个个岛屿去旅住的人。能在某个领域，不是花一周两周，而是花上五年十年，居住下来，沉寂下来，若不是工程界的大牛，就是学术界的大拿。</p>
<p>我这么一个人，很奇怪的一个人，就这么简单的，想回到代码的王国里，一直旅住下去。</p>
<p>（二）</p>
<p>公司新大楼与老大楼，只隔了几百米。中午外出觅食，与未搬迁之前比，可选择的地方，突然之间就好像完全变了。环境对人的影响，比想象中大很多。</p>
<p>两年前开始带团队。收获了很多，也丢失了很多。管理，最重要的，并非是管人，也不是理事。管理是搭台子，是造环境，是让在环境中的每一个人，都能发挥出最大的价值。企业文化、组织结构、产品策略、项目管理等，如果不能让一线伙伴从内心里真心认可，就很难长久。高执行力的军队能拿下江山，但经常守不住江山。</p>
<p>技术团队最大的危机，经常来自 Leader 的老去。当一个 Tech Leader 质疑 SVN 与 Git 哪个好时，这个 Leader 就在老去。理性并非总是必要，打败理性的往往是感性。感性的选择源自于真实的旅住。当你去新岛屿住过一段时间，如果新岛屿好出一个量级，往往就不会再想回旧岛屿住了。Node、React 等，都是一个个新岛屿。Leader 的老去，就是渐渐丧失了旅住的能力，这样也就再也难以带领团队去往远方的远方。</p>
<p>技术人员的发展，最难的是突破自己的迷障。突破口不在他人，就在自己。自己能否把关口趟过去，能否始终保有旅住的能力，能否静心，这些，是真正需要花大力气去关注与投入的。而不是人际交往，不是管理技巧。</p>
<p>当内心感觉有些不对的时候，往往就真的不对。面对这种不对，内心里往往清晰应该怎么做。一个人最需要说服的是自己，而不是他人。内心笃定，就会有能量场，就会让身边的人相信，并开始一起行动起来。</p>
<p>各有各的人生，去欣赏。同时走自己的路，不犹疑。</p>
<p>（三）</p>
<p>金秋飘香，天黑得很快。</p>
<p>这个年代，说大话容易，高大上的言谈并不难，难的反而是敢于说小话。很佩服能说大话、也敢说小话的人，说小话时，还能让大家感觉不是小家子气，而是人性，是接地气。这份心力，着实不易。</p>
<p>我怕成为不是我，越有欲念去把这篇文章写出来，就越多杂念浮现。想写，却又不想写，一切那么简单直白，写下来却很可能引起不少人对我的误解，写还是不写？我又是谁？一个朋友说，希望自己不惑、立且定，如果不惑的本体就是惑本身，那么一切都是空，又该如何？</p>
<p>很怕用幸福这个词，更想着喜悦。如果能让自己的心，让所处的环境，让我爱的、和爱我的，能无时不刻处于宁静与喜悦之中，此生足矣。</p>
<p>玉伯
2015.9.30  杭州西溪</p>
<hr>
<p>欢迎关注「探索时间」，探索有趣的事，遇见有趣的人。
<img src="https://t.alipayobjects.com/images/rmsweb/T1CIhiXgJkXXXXXXXX.jpg" alt="">
（可以扫描二维码，也可以微信上搜索 tansuo-time 关注）</p>
]]></description><link>http://acyort.github.io/posts/109045121.html</link><guid isPermaLink="true">http://acyort.github.io/posts/109045121.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Mon, 29 Feb 2016 06:55:46 GMT</pubDate></item><item><title><![CDATA[去相信什么]]></title><description><![CDATA[<p><img src="https://t.alipayobjects.com/images/rmsweb/T13StfXnlrXXXXXXXX.png" alt=""></p>
<p>最近知乎上阿里的讨论比较多，HR 事件、新人破冰、马云谈离职等，甚至有个贴在讨论「在阿里实习了一段时间，光看内网的负能量，要不要考虑毁三方」。对于老一辈阿里黑们，价值观与人生观等都已定型，没啥可去讨论。但学校的小鲜肉们，居然会因网络上的一些言论，来决定自己的职业去向，实在让我忍不住写下这篇文章。</p>
<p>这次的 HR 事件，远没有网络中传言的那么跌宕起伏。我知道的故事很简单：员工 A 在团队里的工作表现不好，A 的主管 B 清楚这一点，但平时跟 A 关系很好，碍于面子一直不敢说破。终于在一个风轻云淡之日，B 鼓足勇气准备挑破，结果 A 说准备离职去创业，B 立刻轻松了下来，顺水推舟祝福 A 创业成功最终也没有挑破就结束了谈话。接下来的故事大家比较清楚，HR 将与主管谈话得到的信息录入了离职系统，结果系统有 bug， 员工 A 看到 HR 的离职评价后非常不爽，于是在内网发贴吐槽。槽贴很快变成了神贴，各种讨论，非常活跃，特别是当离职系统的研发人员因为 bug 被记过处分时，一大堆程序员义愤填膺不满同行背黑锅。接着，内网的讨论，流传到了知乎等外网上，马云和 Lucy 也就此事件在阿里组织部大会上发表了看法。</p>
<p>人事无小事。正因为这一点，很多年前，Lucy 就确定了阿里内网的两个铁律：</p>
<p>1、内网发帖必须实名，敢说就要敢当。
2、内网发帖会永久保存，不允许删帖。</p>
<p>我不知道有几个公司的内网能做到如此坦荡透明，有几个公司的内部文化可以让员工想说啥就能说啥（薪资等高压线不能碰）。Lucy 坚持的是，有阳光就会有阴影，但即便是毒瘤，也需要放在阳光中来看。</p>
<p>因此内网的神贴，我一直感觉是一个公司非常健康的象征。我在阿里内网也发过神贴，至今活得好好的，甚至得到了马云的亲自回复与电话道歉。如果阿里内网，没有神贴了，或者在知乎等网络上，看不到阿里的负面消息了，那才是一件非常可怕的事情。</p>
<p>回过头来看这次 HR 事件，罪魁祸首在源头，是管理失职。主管 B 不敢直接跟 A 说你不行，你在团队中是最差的，如果不走，很可能下一次被淘汰。主管 B 太孬了，缺乏担当。公司的处理很公正，给主管 B 记过处分。HR 也有错，也被处罚了。至于离职系统的研发人员，很简单，线上故障特别是涉及数据泄密，本来就是要担责的呀。一事归一事，很佩服这次事件的处理方式，坦荡而清晰。</p>
<p>关于阿里新人破冰的传言，更是夸大的不是一点点。在阿里七年了，待过的团队也不少，包括被外界传言最「黄」的 UED 团队。但是，从来没遇到过侵犯隐私的行为。有时的确会问「三初」问题，但只要你选择不回答，没人会逼你。破冰在公司里，一直强调不可低俗化。我也好奇外网上传说的哪些低俗破冰，究竟是什么团队。技术团队，破冰现在差不多就是个人介绍与才艺表演（没才艺的，偶尔会被真心话大冒险，但完全可以拒绝回答）。</p>
<p>对于网络言论，一定要有自己的判断。这个世界，每个人都很聪明。真相很少存在于网络言论中，真相活在现实中，在沉默的大多数人的心中。</p>
<p>题图来自网络。通过网络可以获取到很多知识，但网络上的不少言论，更像是题图中的那只手，会遮挡你的视线，让你看不清事实。</p>
<p>我说的都是对的。</p>
<p>玉伯
2015.5.16  杭州三墩</p>
<hr>
<p>欢迎关注「探索时间」，探索有趣的事，遇见有趣的人。
<img src="https://t.alipayobjects.com/tfscom/T1YlRfXndXXXXXXXXX.jpg" alt="">
（可以扫描二维码，也可以微信上搜索 tansuo-time 关注）</p>
]]></description><link>http://acyort.github.io/posts/77171580.html</link><guid isPermaLink="true">http://acyort.github.io/posts/77171580.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sat, 30 Jan 2016 10:19:43 GMT</pubDate></item><item><title><![CDATA[探索初心]]></title><description><![CDATA[<p><img src="http://mmbiz.qpic.cn/mmbiz/DFAV2KytcbUq1NrqYJUncEcbguuYMrHkaKtCDV7zsJk76buTic0wXN1pYwMQlLFzKe6pscATHyacwN33e2jvaUg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5" alt=""></p>
<p>这个账号注册一个月了，很抱歉还没发过一篇文章。原以为不太会有人关注，今晚进后台一看，已有一千多人，略感惶恐。</p>
<p>越来越觉得文字是个很私人的东西，有如窦唯的音乐，是写给自己的。将音乐做成专辑，将文字写成文章，并非是用来寻求知音，而是通过一种仪式，沉淀为一种形式，献给的是过往的自己。</p>
<p>这个公众号的线上载体主要会是文字。不会有励志、布道等目的性很强的内容，也不太会有技术代码、设计细节等非常具体的干货。这里有的，会是一些真实的记载。可能是一本书的读后感，也可能是大起大落后的感悟。所有文字会留下坦诚与朴实。不会有草在结籽风在摇叶，也不会有春风十里不如睡你。但可能会是钥匙精美锁好看，也可能会有穿着蓝天白云的姑娘。文字与现实之间偶尔会加层包裹，这是一种无奈，文字是很私人的东西。</p>
<p>除了线上文字，这个公众号会尝试一些线下活动。「探索读书会」是一个起点，具体形式，请关注后续消息。</p>
<p>取名「探索时间」，是期待自己，也期待关注着这个公众号的你，能每周留给自己一点时间，去探索一些有趣的事情，去遇见一些有趣的人。</p>
<p>作为读者的你，我期待着你个性鲜明，敢于订阅，也勇于取消关注。很多人力赞冯唐，但我觉得那是一坨屎。很多人喜欢鬼脚七，但我读着读着感觉节操碎一地。于是就通通取消订阅。期望你也拥有像我这样的偏见，若不喜欢，就果断退订，若是喜欢，也不要到处传播，给你觉得有可能会喜欢的人推荐推荐就好。</p>
<p>期待若干年后，依旧初心不忘。</p>
<p>玉伯
2015.4.29  杭州</p>
<hr>
<p>欢迎关注「探索时间」，探索有趣的事，遇见有趣的人。
<img src="https://t.alipayobjects.com/tfscom/T1YlRfXndXXXXXXXXX.jpg" alt="">
（可以扫描二维码，也可以微信上搜索 tansuo-time 关注）</p>
]]></description><link>http://acyort.github.io/posts/73196330.html</link><guid isPermaLink="true">http://acyort.github.io/posts/73196330.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 25 Mar 2016 15:18:44 GMT</pubDate></item><item><title><![CDATA[一棵树的自由]]></title><description><![CDATA[<p><img src="https://t.alipayobjects.com/tfscom/T1rQ4fXcVuXXXXXXXX.jpeg" alt=""></p>
<p>很感谢大家一直以来的关注。WTP 停止更新一年多，依旧还有上万的订阅用户，非常感恩，感谢大家。</p>
<p>WTP 的初衷是技术、产品、自由梦。这是我工作以来的三个梦想，期待自己在技术上有所钻研，期待自己能给大家带来一两款有趣的产品，同时期待自己能获得财富自由，以及精神自由。</p>
<p>这三个梦想不容易达成。我原以为，这是串联关系，可以达成一个后，再去达成下一个。近十年的工作，意外的发现，这根本不是串联关系，而是乱七八糟的关系。当你在某一两个技术领域持续深入（至少没日没夜写上十万行原创代码），初步实现技术梦想后，财富自由的梦可能就达成了。我理解的财富自由，不是拥有多少钱，而是拥有了持续賺钱的能力。不担心丢工作，不用看老板眼色行事，可以不想做什么就大胆不做，勤快一点就有賺钱的机会，这就是财富自由。</p>
<p>产品梦也挺有意思。最初自己理解的产品，是类似 Google、Facebook 这种大众产品。心里痒痒的，这几年，通过公司的赛马，以及私下里的折腾，尝试过几款产品，虽未完全投入，但也算看过猪跑。把产品理解成 C 类产品，是一个心结，经常并非是对产品有多疯狂，而是对成功充满期待。回归自己的初心，产品梦想，更多是一种产品化的思维，可以用在技术上，去做技术产品，也可以用在生活上，比如做一些手工艺品。经过自己亲手的努力，一点一滴创造出来的东西，就是产品。这篇文章，也是一件产品，需要打磨、雕琢。产品是做事情的一种心态，需要远见，需要坚持，也需要细节上的匠气。有如烹饪，食材、刀功、火候等等，这些都是技术，最后炒出来的那盘菜，就是产品。要做好技术，必然需要一颗产品的心。技术梦和产品梦，是不分家的。</p>
<p>自由梦里的精神自由，是最难最难的。最近半年，我以为我已近天命，最后却发现，我离知天命还好远好远。好多快乐都成了回忆，好多痛楚也渐渐的记不得。抬头往前，是如海一般的未知。最近有个朋友说，自由是抬头有未知低头是思念，自由是面向未来能保有各种可能性。多么文艺青年的一句话，像诗一样的句子，可是经不起咀嚼。</p>
<p>早上骑行，路边的小树大树，各种花繁叶茂，绿的翠绿，像是会滴水，红的灿烂着红，像是新造的血，还有那白，白得让人脑海里邪念全无，像是书中的小龙女。可是就在几个月前，在那冬日里，这些树都是一叶无存。大自然对生命的坦荡、大气，每一个冬去春来，放眼历史长河，这才是地球生命的主旋律，人类那点活动，好渺小，不足言。</p>
<p>大自然的植物，不能动，抬头没什么未知，低头更无什么思念。就那么杵在泥土里，每个冬去春来之际，开一树的繁华精彩。就这么简简单单的轮回着，看着我想哭，不是哭它，是哭自己。</p>
<p>真想变成一棵树呀，跟着季节轮回。闻到春天的味道，就开心地开一树繁华。冬天来了，就无忧无愁地将叶散去。</p>
<p>想拥有，一棵树的自由。</p>
<p>玉伯
2015.3.29  杭州</p>
<hr>
<p>最后，附一个二维码，那是一个全新的起点，欢迎订阅。
<img src="https://t.alipayobjects.com/tfscom/T1YlRfXndXXXXXXXXX.jpg" alt="">
（也可以直接在微信上搜索 tansuo-time 关注）</p>
]]></description><link>http://acyort.github.io/posts/73187537.html</link><guid isPermaLink="true">http://acyort.github.io/posts/73187537.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 08 Jul 2016 01:18:32 GMT</pubDate></item><item><title><![CDATA[微不足道的坚持]]></title><description><![CDATA[<p>在你最擅长的专业领域内，可曾有过一件让你骄傲，持续坚持下来的事情？每当别人谈论它时，你总是偷偷窃喜？</p>
<p>我曾经这样勉励我的弟兄们，在满负荷的工作压力面前，总要找到一件有意义、自己感兴趣且擅长的事情，坚持做，是一种解压，更是为了让自己的专业所长，找到有意义的落脚点。分享三件事情，大家共勉</p>
<h3 id="第一件事：">第一件事：</h3><p>两前年，流火曾经找我聊想搭建一个行业内前端社区，他有清爽的界面，有优雅的交互体验，我当时并不看好，担心接下来的工作压力会让人抗不住，两年过去了，在百度搜索f2e可以在显要位置看到这个极简的域名&quot;<a href="http://f2e.im">f2e.im</a>&quot;。社区雏形完整，代码完全开源，我也很幸运成为F2E社区<a href="http://f2e.im/u/jayli">第三号成员</a>。</p>
<p>我当然听到过太多质疑的声音，诸如&quot;这东东和某东东很类似？&quot;，或者&quot;这里菜鸟太多了，没有我想要的高手？&quot;云云。</p>
<p>Whatever!~</p>
<p>评论终将归于浮云，留下的是两年的坚持，以及它换来的微不足道的满足感！同样，当流火在解决了成百上千个无关紧要又繁琐冗碎的bugfix时，换来了对python的精通，对代码版本迭代的专业性把握，对网络协议和内容渲染模式的深刻理解，收获了直面一线用户的宝贵经验，更重要的是，懂得坚持的意义。这些硬技能直接促成了今天流火在业务上的钻研与精通。</p>
<h3 id="第二件事：">第二件事：</h3><p>前年年底，我们团队发起了针对校招同学的&quot;<a href="http://wiki.ued.taobao.net/doku.php?id=ued.bj:f2e:%E9%AD%94%E9%AC%BC%E8%AE%AD%E7%BB%83%E8%90%A5">魔鬼训练营</a>&quot;，宗旨是艰苦一年，主动成长，我们无条件的侵占了大家的加班、午餐、晚餐、甚至周末时间。工作的紧张压力下，还要准备给大家反讲，质量良心保证，精力严重透支，要不是靠着年轻的身子板，扛下来简直是个奇迹。</p>
<p>迟伤、影逸、夕剑 全程坚持了下来。</p>
<p>当年反讲的JavaScript设计模式、熟读W3C标准、NodeJS、Git、字符编码、HTTP协议这些基础知识，让充电加速。现在当面对业务压力和未知bug时，他们显然更勇于去透过表面看本质。并在 WebRocket（@影逸）、机票YUI体系的KISSY化（@迟伤）等项目中淋漓紧致的体现出自身专业水平。毕业一年，无压力的开始挑大梁了。</p>
<p>回想起来，魔鬼训练营中辛苦的坚持，是如此微不足道。</p>
<h3 id="第三件事：">第三件事：</h3><p>两年前，我作为PM落地了一件看似不可能完成的任务，<a href="http://ued.taobao.com/javascript/">JavaScript权威指南（第六版）</a>的翻译。认领这个任务的初衷仅仅是想挑战下自己的能力极限，看清楚自己几斤几两，没想到一做就是一年。</p>
<p>这段时间在工作和业余时间谨慎的保持平衡，压力面前各种放弃的冲动仍历历在目，但仍抵不过这本书上市之时的那股满足感。</p>
<p>过程中听到太多质疑的声音，WhatEver，你所掌握关于JavaScript的一切，始终是我的子集。纯技能上的收获更是大大的丰厚。</p>
<h3 id="结语">结语</h3><p>任何一件事情，有多大投入，就有多大收获。当你还是局内人时，不清楚傻傻的坚持的意义，这时内心的纠结最容易让人动摇和放弃。但事成之日，才会真正拨云见月，一树百获。这时，压力是浮云，纠结是浮云，抱怨是浮云，斤斤计较更是浮云。“坚持到胜利”，是如此言轻，又是如此言重。</p>
<p>在你最擅长的领域内，可曾有过让你骄傲，持续坚持下来的事情？每当别人谈论它时，你总是偷偷窃喜？那么。。。</p>
]]></description><link>http://acyort.github.io/posts/31227766.html</link><guid isPermaLink="true">http://acyort.github.io/posts/31227766.html</guid><dc:creator><![CDATA[jayli]]></dc:creator><pubDate>Thu, 30 Jul 2015 12:38:54 GMT</pubDate></item><item><title><![CDATA[写给一名求职者的信]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/2386452/43544fb8-a92c-11e3-94f2-5c62ddffdfc0.png" alt="screen shot 2014-03-11 at 10 48 03 pm"></p>
<p>很高兴你能来面试，先告诉一个好消息：面试已经通过。在你选择来之前，还有些信息需要给到你：</p>
<p>1、大公司的环境可能远不如小公司自由。大公司的大，意味着有很多很多部门，彼此协作才能把事情做好。阿里也避免不了大公司庞大的组织架构，但一定程度上这也是生态进化的当下最优结果。阿里更像一个江湖，崇尚侠义、公正、透明，但也避免不了地盘、纷争、残酷。如果你选择进来，要有一定心理准备。大环境不会是你想象中的那么好，当然，也不会那么糟。</p>
<p>2、我相信你的编码能力，但更看重的是你的视野、沟通、心态等综合能力。虽然我现在将整个部门改名为体验技术部，也有长期打算组建产品创新、孵化等实体小组，但现阶段，整个部门的主要职责依旧是负责公司各项产品的前端研发。在前端部门，我不愁你找不到志同道合的人，但我担心你们是否有足够的勇气去创造变化，有足够的耐心去孵化时机。老实说，我们团队里，曾有过不少像你这样才华横溢的同事，但在工作一年两年后，不少人依旧选择了离开，选择去更自由的小公司发挥所长。大公司的变化总是会比较慢，因为大公司承载了太多人的梦想。互联网金融，甚至还承载了全国人民的梦想。我们都希望快点，但怎么才能快起来，怎么才能在公司范围内营造真正创新、自由的氛围，至今整个阿里并未找到满意的答案。</p>
<p>3、具体到全栈工程师，可以看我博客（ <a href="http://lifesinger.github.io/?185">http://lifesinger.github.io/?185</a> ）里的理解。目前更多是团队的一个方向。这个发展方向的目的，也不是为了全栈，而是为了效率、为了创新、为了能解决目前支付宝研发体系下的诸多问题。这条路很长，支付宝才刚起步，前端的作用是撕开一个口子，后续要跟测试去谈、去跟 PE 协同、要 SQA 的同意，要聚集一群人，同时要说服一堆一堆人，没有容易的事情，非常难。全栈方向，我 10 年就想尝试，但直到今年，三年之后的今天，才能聚集一些兄弟，才能说服技术部老大让我们去尝试。要把支付宝整站改成 Node 架构，让前端直接能基于 Java 服务搞定所有开发，路还很长很长。</p>
<p>4、很久以前在博客中，我说我的梦想是技术梦、产品梦、自由梦。现在越来越觉得技术梦和产品梦是可以合二为一的。技术要往深里钻，本身就需要用做产品的心态去做。Linus 在我看来，最强大的不是他的代码能力，而是他的技术社区管理能力，以及对技术产品的眼光和设计能力。在我们团队，一直鼓励的是技术人的产品心态，无论是 Sea.js，还是 Arale、Alice 等技术产品，我们都期望大家有产品心态和持久坚持的能力。最近的一个例子是  <a href="http://totorojs.org/">http://totorojs.org/</a> ，从有想法到做成现在这个小工具，我们花了一年多时间。下一步想做 UI 自动化兼容测试，更加艰难。</p>
<p>5、技术和产品梦可以结合的第二点，是因为大公司里的产品创新，需要技术的良好土壤。前端说的全栈、前后端分离等等，所有这一切，都是为了能让我们的产品想法能落地，能快速试错。团队里曾有一个小伙子，他想把支付宝重做一遍，但在现有技术体系下，这只能是一个很难很难实现的「梦」。但我希望通过技术革新，后续我们真有机会去「重做支付宝」。我们很希望能有一个互联网的金融技术平台，基于这个平台，各种理财、金融类创新产品，我们自己就能发起、主导并推动实现和落地。公司鼓励从下自上的创新，但如何让这种创新能脚踏实地，如何让技术能承载创新，这一切都还需要努力。</p>
<p>如果你有足够的勇气、耐心，敢于舍得，同时有长久的追求，我希望你能加盟我们。我们并不是精英团队，精英团队也不是我们的目标。我们的梦想是自由，自由的做技术，自由的做产品，自由的生活。无论是精英，还是大众，都能发挥所长，实现自由的梦想。</p>
<p>期待你的加入，相信你在做心的选择。</p>
<p>（完）</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，每周推送至少一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/29184537.html</link><guid isPermaLink="true">http://acyort.github.io/posts/29184537.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 05 Aug 2016 06:45:05 GMT</pubDate></item><item><title><![CDATA[MOOC 介绍]]></title><description><![CDATA[<p><img src="http://ww3.sinaimg.cn/mw1024/68361562gw1eddgmdu1b6j20iw0dqaaz.jpg" alt=""></p>
<h2 id="概念介绍">概念介绍</h2><p>MOOC（Massive Open Online Courses）是大规模在线开放课程，简单来说就是把各学校的课程放到互联网上，对所有人开放共享。</p>
<p>MOOC 是一个理念，就如 Open Source 一样，与之对应的是传统学校授课方式。MOOC 的理念雏形，历史可追溯到 1890 年代。MOOC 正式提出是在 2008 年，之后特别是 2012 年发展迅猛。</p>
<p>目前提供 MOOC 课程的优秀网站有：</p>
<ol>
<li><a href="https://www.coursera.org/">https://www.coursera.org/</a>  --  拥有大量合作机构、课程最多</li>
<li><a href="https://www.udacity.com/">https://www.udacity.com/</a>  --  有不少计算机类课程</li>
<li><a href="https://www.edx.org/">https://www.edx.org/</a>  --  哈佛、麻省理工、伯克利等大学在这里，拥有著名的 CS50 等课程</li>
<li><a href="https://www.khanacademy.org/">https://www.khanacademy.org/</a>  --  可汗学院，拥有很多理工科课程</li>
</ol>
<p>Coursera、Udacity、edX、Khan 与哈佛、斯坦福、普林斯顿等著名高校合作，推出了一系列高质量课程。以 Coursera 为例，目前合作机构超过 100 个，包括北京大学、 台湾国立大学、东京大学等，总课程有 500 多个，内含不少中文课程。</p>
<p>国内也有跟进者：</p>
<ol>
<li><a href="http://xuetangx.com/">http://xuetangx.com/</a>  --  清华大学基于 OpenEdX 搭建的平台</li>
<li><a href="http://mooc.guokr.com/">http://mooc.guokr.com/</a>  --  果壳出品的 MOOC 学院，以信息聚集为主</li>
<li><a href="http://open.163.com/">http://open.163.com/</a>  --  网易公开课</li>
</ol>
<p>英国、德国、澳大利亚等国也涌现了不少优秀 MOOC 网站，可参考： <a href="http://www.36kr.com/p/208630.html">http://www.36kr.com/p/208630.html</a></p>
<h2 id="课程特点">课程特点</h2><p>在国内，很多人可能通过网易公开课欣赏过哈佛等名校的课程。到目前为止，网易公开课的形式依旧是视频，缺少其他辅助。Coursera 等网站在课程设计上非常花心思，已经逐步形成了真正的在线课程：</p>
<ol>
<li><strong>课程规划</strong>。有开课周期，就像在大学选修一样，有些课程错过了，就只能等下一期。</li>
<li><strong>资料齐全</strong>。提供授课视频、字幕、授课资料、参考书籍等，大部分可下载离线反复学习，非常方便。</li>
<li><strong>学习过程</strong>。资料是逐步放出来的，看完视频后有小考，每周有作业，就像在大学一样。</li>
<li><strong>学习社区</strong>。拥有真正的社区，热门的课程经常有几千人参与。教授，牛人、全球各路大虾云集。</li>
<li><strong>证书激励</strong>。有期末考试，通过的还会颁发证书。据说这个证书，Google 等企业会认。</li>
</ol>
<p>MOOC 越来越像真实的课堂，汲取了大学课程设计的很多优点，同时利用互联网，向全世界开放。</p>
<h2 id="盈利模式">盈利模式</h2><p>截至 2013 年底，Coursera B 轮融资已达 6300 万美元。站在使用者的角度来看，MOOC 网站的盈利模式至少有以下几项：</p>
<ol>
<li><strong>收费课程</strong>。目前已有不少收费课程，几十美刀一门课。与线下大学相比，这是白菜价。只要能学有所得，用户就很愿意付这笔钱。</li>
<li><strong>猎头服务</strong>。与 Google、Facebook 等合作，直接将课程学习优异者推送给企业。现在已经有学生在简历上自主写上在线课程的学习分数。</li>
<li><strong>职业培训</strong>。比如 Udacity 将重心放在了科技行业的职前培训。在国内，做好的话或许能抢下北大青鸟不少份额。去做职业培训的讲师，或许这也是技术人员的一条不错的创业之路。</li>
</ol>
<p>整个 MOOC 行业，2012 年全球出现了 60 多家公司。Learn Capital 合伙人 Rob Hutter 预测，<strong>全球教育市场的规模是 4.6 万亿美元，目前已有公司吃掉的差不多只有 500 亿美元，只是冰山一角，一切才刚刚开始。</strong></p>
<h2 id="最后">最后</h2><p>古人说「活到老、学到老」，MOOC 让学习变得更便捷、美好。在知乎上看到过一句话：</p>
<blockquote>
<p><strong>「在这个互联网时代，能限制住学习的只有你的求知欲。」</strong></p>
</blockquote>
<p>作为前端，还想起一件事，jQuery 作者 John Resig 从 Mozilla 辞职后，投身去了教育领域。他在的地方，就是大名鼎鼎的可汗学院（Khan Academy）。</p>
<h2 id="参考资料">参考资料</h2><ul>
<li><a href="http://en.wikipedia.org/wiki/Massive_open_online_course">http://en.wikipedia.org/wiki/Massive_open_online_course</a>  --  MOOC 的前世今生</li>
<li><a href="http://www.36kr.com/search?q=Coursera">http://www.36kr.com/search?q=Coursera</a>  --  Coursera 那点事</li>
<li><a href="http://www.zhihu.com/topic/19793302/top-answers">http://www.zhihu.com/topic/19793302/top-answers</a>  --   这里能找到大量优秀课程推荐</li>
</ul>
<p>PS：这个春节才关注 MOOC，跟着 Philip Zelikow 教授学 <a href="https://class.coursera.org/modernworld-002">The Modern World: Global History since 1760</a>，跟进了两周感觉很不错。<strong>欢迎大家一起来挖掘优秀的 MOOC 课程资源，分享让世界更美丽动人。</strong></p>
<p>（完）</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，每周推送至少一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/27222804.html</link><guid isPermaLink="true">http://acyort.github.io/posts/27222804.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Tue, 31 Mar 2015 09:41:45 GMT</pubDate></item><item><title><![CDATA[QCon 出品人采访稿]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/1939366/f2570546-7f60-11e3-8d8d-e1b461dd93c9.jpg" alt="plank bridge cascille northern ireland"></p>
<p>今年与三七一起，承担 QCon 北京 2014 专题出品人，关注移动时代的前端，下面是 <a href="http://www.infoq.com/cn/news/2014/01/qconbeijing2014-yubo-interview">InfoQ 的采访内容</a>。</p>
<hr>
<p>InfoQ：大家都知道您是您作为支付宝前端开发团队负责人，淘宝前端类库KISSY、前端模块化开发框架SeaJS、前端基础类库Arale的创始人，不过还是请您重新介绍一下自己，及这三个项目现在的情况吧。</p>
<p>玉伯：</p>
<blockquote>
<p>我的情况比较简单，03年毕业，在北京漂了5年，08年到杭州加入淘宝，12年转岗到支付宝，现在负责支付宝共享平台的前端技术团队。</p>
<p>在淘宝期间，业务需求需要做一个富文本编辑器，于是有了KISSY Editor，后来做着做着就变成了一个前端基础类库KISSY，editor是其中一个组件。11年开始，KISSY的主要开发工作已移交给同事承玉。现在已经有一个专门的虚拟团队维护，负责人是拔赤。</p>
<p>2010年期间，有关注Node.js和CommonJS社区，了解到当时的风云变幻。强烈觉得模块化开发理念不仅需要规范化、更需要扎扎实实的实现，当时有FlyScript、BravorJS、RequireJS等种种实现。个人不是很喜欢RequireJS的一些理念和实现，喜欢的FlyScript则自我阉割了，因此萌生了自己写一个的想法，这就是Sea.js。Sea.js已经发展到2.x版本，在国内使用比较广泛，阿里、腾讯、中航信等公司都有采用。Sea.js的核心理念是保持简单，只做该做的。目前Sea.js 3.0的规划已经有了雏形，会进一步简单，包括构建。</p>
<p>2012年到支付宝后，支付宝已经有了一套前端基础类库Arale 1.1，因此我并不是Arale的创始人。Arale 1.1的思路与KISSY、YUI等类库差不多，都是从底层组件做起，很辛苦很累，但效果并不太好，在可维护性、易用性等方面，自己做的dom、event等组件，经常不如业界已经成熟的jQuery等类库好用。为了解决这些痛点，当时和同事商量后，就有了Arale 2的想法。Arale 2的核心是开放。开放的第一层是拿来主义，业界已经有的成熟方案，经过我们考察后，直接引入进来用。拿来主义直接让我们站在了巨人的肩膀上，并能以此做为基础，迅速构建适合支付宝的一套UI组件库。从狭义上讲，Arale是为支付宝量身定做的，并不适合直接拿去给其他公司用。从广义上讲，Arale是构建前端基础类库的一种开放式方案，这种方案可以被其他公司借鉴。目前已有不少团队基于Arale方案构建出了适合自己公司业务的特定类库。Arale目前的规划有两个方向：1）进一步拥抱社区，废弃CMD，拥抱CommonJS，Arale组件的模块将直接与一个Node模块无异。2）基础组件的Mobile First化，为移动基础类库的构建提供体系化方案和最佳实践。</p>
<p>对前端开发来说，前端基础类库很重要，但从整个前端领域来看，类库依旧是比较小的一块。还有很多领域非常值得投入，下面有时间再说说。</p>
</blockquote>
<p>InfoQ：（谈到负责支付宝的前端团队后）阿里内部团队众多，能否讲讲支付宝前端团队的开发流程和特别之处？</p>
<p>玉伯：</p>
<blockquote>
<p>从前端开发来看，阿里内部分三种类型：淘系、支付宝系、B2B系。B2B系没亲身体验过，略过不说。淘系和支系的区别比较明显，简单说下。</p>
<p>淘系的核心业务是「导购」，业务的定位使得淘系大量前端业务以前台展现为主。这类业务，快是第一用户体验。快不仅是页面速度快，也包括研发交付速度要快。也会有功能交互很复杂的业务，但相对来说不是很多。</p>
<p>支系的核心业务是「支付」，有段时间也有「导支」业务，但很快成为非主流。「支付」是功能型的，与用户资金相关，「稳定」、「安全」是第一用户体验。当然也求快，但在稳定、安全面前，快经常要让道。支系还有两个重点是金融与数据，与支付一样偏功能性。</p>
<p>业务类型的不同，使得淘系、支系的技术体系、研发交付有比较大的差异性。淘宝求快，支付宝求稳。目前支付宝也在探索更适合互联网的快速轻量级研发模式，淘宝在稳定、安全上的要求也越来越高。像是两个极端，在互相借鉴互相靠拢，差异性应该会长期存在，但会逐步减少。</p>
</blockquote>
<p>InfoQ：目前您最关注的重点是什么？</p>
<p>玉伯：</p>
<blockquote>
<p>目前最关注的是团队管理。从带几个人，到突然带几十人，压力很大。除了自己的个人生活，最在乎的就是这帮兄弟姐妹的未来。目前团队缺口还很大，近期大量招聘中，职位不限于前端开发，也希望有 Node、Java、iOS、Android、交互、视觉等经验的人员加入。</p>
<p>你瞧，又广告了。最近晚上做梦都在关注招聘，有个同事说我近期三句不离招聘，欢迎投递简历。</p>
</blockquote>
<p>InfoQ：您感觉在过去一年中，前端领域是否发生了令人值得注意的变化？</p>
<p>玉伯：</p>
<blockquote>
<p>变化太快了，好多变化。百度的berg总结过一篇2013前端技术盘点，说得很全面。对支付宝来说，最大的变化有：</p>
<p>1、<strong>全端化</strong>。前端不再是折腾各种浏览器了，而是需要面对PC、Pad、Phone甚至TV等各种端。支付宝的做法很干脆实在，直接让一批前端开发转岗到无线部门做iOS开发。前端部门自身也需要逐步具备跨终端开发的技能。这是移动互联网带给前端最大的冲击，却也是最好的礼物。</p>
<p>2、<strong>全栈化</strong>。Node的兴起和成熟，让前端在解决研发效率等问题上有了新思路。阿里的整个技术体系是基于Java的，前后端的职责分工一直存在灰色地带，特别是在支付宝，厚重的开发环境已经对前端研发效率带来严重影响。在这种情况下，如果能基于Node实现前后端运行与研发过程中的清晰分离，将会带来研发效率上的大提升。全栈不是为了技术的全面，而是从职责分工上能让更合适的人干更合适的事。</p>
<p>3、<strong>工程化</strong>。前端开发越来越复杂，除了运行时的类库框架，还有非常非常重要的一块是研发交付体系。这一块各个大公司的前端都在探索，各个公司都有大量实践，但感觉都还存在很多优化甚至突破的空间。支付宝的研发交付体系好像是阿里最复杂的，前端一方面「享受」这种复杂性带来的稳定性保障，同时又非常「痛恨」如此让人抓狂的各种平台、流程。前端的工程化开发是一个体系化的问题，相信2014年，支付宝前端在这一块会有飞跃式突破。</p>
</blockquote>
<p>InfoQ：您是此次“移动时代的前端”专题联合出品人，能否谈谈你对此次专题的内容策划？（谈谈为什么你认为这个话题是重要的、值得关注的？听众可以从这个分享中获得什么等等）</p>
<p>玉伯：</p>
<blockquote>
<p>内容策划上，就是上面说的全端化、全栈化、工程化。筛选的话题，会来自大公司，也会来自创业公司。全端化是移动互联网对企业的需求。全栈化、工程化都是对研发效率的关注，这一块的进展，能让互联网公司特别是大公司的传统研发模式发生变革，让分工更合理，研发效率更高。</p>
</blockquote>
<p>InfoQ：（在上面的内容提到全端开发的概念后）您对“全端开发”这个新概念怎么看？</p>
<p>玉伯：</p>
<blockquote>
<p>上面已经提到这些概念了。全端我的理解是跨终端，从浏览器兼容，走向各种终端的兼容。你想谈的应该不是这个，而是 FSD（Full Stack Developer）。</p>
<p>Full Stack 有些地方翻译成全端，我更喜欢翻译成全栈。知乎上有过讨论，感觉大家对全栈的理解有很多差异点。我的理解与大家的有些不一样。</p>
<p>1、全栈不是什么都懂，而是鼓励大家从单一（ | 型）人才变成一专多能（T 型）人才，进而变成多专多能（ π 型）人才。</p>
<p>2、对于前端的全栈之路，在支付宝是鼓励大家通过Node掌握服务端上的UI Layer层开发，是让前后端的分工更合理，并非是让前端去研究后端的专业领域。表面上看是分久必合、合久必分，实际上是分工更合理，让前后端都能朝着更专业的深度发展。</p>
<p>3、全栈开发应该根据不同场景去定义。支付宝的全栈，跟Facebook的，目前就不一样。中间没有谁好谁坏，都是从业务实际需求出发，以及团队目前的人员情况出发，自然而然地一种选择。</p>
</blockquote>
<p>InfoQ：在前端开发以外，您是否还有关注的技术领域？为什么？</p>
<p>玉伯：</p>
<blockquote>
<p>技术领域这几年都放在前端了，对动漫制作、数据挖掘有浓厚兴趣，但尚未投入大量时间。技术领域之外，最关注团队管理，越来越发现很多事情靠一个人无法达成，个人英雄主义时代已经很遥远。在当下，要达成一些心中想做的事，要倚靠团队的力量。自己的定位依旧是技术专家，但同时希望自己能具备leadship，这样才能达成自己心中的梦想。</p>
</blockquote>
<p>（完）</p>
<hr>
<p>特别欢迎中小型创业公司推荐讲师，如果有合适的，请毫不犹豫联系我。希望这个专题不仅有大公司的经验，也能看到大量创业公司的身影。期待你的参与和精彩。</p>
<p>最后，期待你的留言，说说读完这篇采访稿的感受。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，只推送原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/25798517.html</link><guid isPermaLink="true">http://acyort.github.io/posts/25798517.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 13 Mar 2015 09:25:37 GMT</pubDate></item><item><title><![CDATA[补码之美]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/1930987/80308c3e-7eb7-11e3-9880-9de6cbe627c1.png" alt="screen shot 2014-01-16 at 9 59 26 pm"></p>
<p>在计算机中，为什么 -1 要用补码表示为 1111 ?</p>
<p>首先要了解 CPU 的基本单元 ALU 模块。在 ALU 里，加法是最基本的运算。通过程序，乘法可以转换为加分，除法可以转换为减法。补码表示，则可以让减法直接转换为加法。这样，ALU 核心只需要加法器就好，加法器可以通过集成电路中的晶体管来实现。</p>
<p>要将减法转换为加法，在数学公式里，只要加一个括号即可：</p>
<pre><code>X - Y = X + (-Y)
</code></pre>
<p>在 CPU 里，如果想让加法器具备减法功能，核心是负数如何表示。</p>
<h2 id="原码">原码</h2><p>大自然赐予了我们硅，硅是很稳定的半导体，通过 PN 结等精细工艺，可以做成各种晶体管。在晶体管的世界里，基本状态只有 on 和 off 两种，也就是只有 
1 和 0。于是，在计算机里，我们采用二进制来表示整数。</p>
<p>这样，最自然的想法是，对于正整数来说，直接从十进制转换成二进制就好。比如 1 用 0001 来表示，2 用 0010 来表示。</p>
<p>负整数怎么来表示呢？增加一个符号位来表示？比如二进制的最高位为 0 时表示正数，为 1 时则表示负数。</p>
<p>这样，-1 用 1001 表示，-2 用 1010 表示。这就是原码的概念。</p>
<p>在原码的表示里：</p>
<pre><code>1 - 1 = 1 + (-1) = 0001 + 1001 = 1010 = -2
</code></pre>
<p>显然，原码表示法，不能把减法变成加法，悲催。</p>
<h2 id="补码">补码</h2><p>据说，所有科学问题，最后都是数学问题，而所有数学问题，最后都离不开哲学。</p>
<p>哲学太深奥了，我们来看看从数学上，如何把 X + (-Y) 转换成二进制相加。</p>
<p>我们希望有某种表示方法，使得 1 + (-1) = 0000  现在 1 用 0001 来表示，-1 应该怎么表示？</p>
<pre><code>-1 = 0000 - 0001
    = 10000 - 0001  （高位借一）
    = (1111 + 0001) - 0001
    = (1111 - 0001) + 0001（第一步：取反）
    = 1110 + 0001（第二步：加一）
    = 1111
</code></pre>
<p>也就是说，如果 -1 用 1111 来表示，则 1 + (-1) 的二进制表示通过加法就能进行减法操作，达成了我们最初的目的。</p>
<p>进一步，针对所有负整数：</p>
<pre><code>-Y = 0000 - Y
     = (1111 + 1 ) - Y
     = (1111 - Y) + 1   将正整数 Y 的二进制先取反、再加一
</code></pre>
<p>整数转换成二进制后，先取反，再加一，这就是负整数的补码表示。正整数的补码跟原码一样。</p>
<p>到此为止，补码的前世今生就说完了，但还有些有意思的事情。</p>
<h2 id="简单之美">简单之美</h2><p>可以说，补码的出现，是为了能让 ALU 在设计时更简单：只需要加法电路就好，不需要减法电路。追求简单，极致的简单，这能给性能、工业化等带来很大价值。</p>
<p>再从数学上来看，整数遵循一些很容易被我们忽略的重要规律：</p>
<ol>
<li>数轴上，左边的数永远小于右边的数。比如 -8 &lt; -2 &lt; 0 &lt; 3 &lt; 5</li>
<li>数轴上，只有一个零。</li>
<li>相邻整数之间相差一。</li>
</ol>
<p>来看补码表示：</p>
<pre><code>    -8      -7         -6        -5        -4        -3       -2      -1       0          1         2        3         4        5         6         7
1000 | 1001 |  1010 | 1011 | 1100 | 1101 | 1110 | 1111 | 0000 | 0001 | 0010 | 0011 | 0100 | 0101 | 0110 | 0111
</code></pre>
<ol>
<li>只看负数的补码表示，明显 1000 &lt; 1001，补码表示下，左边的负数很自然小于右边的负数。</li>
<li>很明显只有一个零，就是 0000，不存在 -0 跟 0 的表示不一样。</li>
<li>再看相邻整数之间，左边的整数加一，就是右边的整数，包括 1111 + 1 = 0000 。</li>
</ol>
<p>初看补码，有些怪异、不直观，但在二进制的世界里，补码是如此自然。第一个想出用补码来表示整数的人，真是个天才啊。</p>
<p>（完）</p>
<p>题图：世界有 10 种人：一种懂二进制，一种不懂。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，只推送原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/25727036.html</link><guid isPermaLink="true">http://acyort.github.io/posts/25727036.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Mon, 31 Aug 2015 12:46:40 GMT</pubDate></item><item><title><![CDATA[我感受到的阿里]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/1930637/ce77c562-7eb0-11e3-8fb9-92d876658537.jpg" alt="circles"></p>
<p>昨天吐槽了下微博对微信的屏蔽，结果引来不少评论，从评论里感受到好多人对阿里并不了解。最近每天回到家都比较累，就写写 WTP 放松放松吧。</p>
<p>如果用一个词来形容阿里的话，个人觉得最贴切的依旧是「江湖」。江湖很大，有各门各派。阿里内部正式员工满一年后，可以比较自由地转岗。可以在少林寺砍几年柴，然后再去武当山挑几年水。每个事业部、每个团队的风格都会有些不一样。一样的是价值观，是做人做事的基本原则。</p>
<p>外界很多传闻说进入阿里首先要被「洗脑」。所谓的洗脑，是加入阿里后，要参加为期一周左右的培训。培训中有价值观的讲解。阿里的基本价值观是六脉神剑：客户第一、团队合作、拥抱变化、诚信、激情、敬业。这几条价值观，如果不在阿里，去 Amazon、Google、腾讯、百度等，据我了解其实都差不多。客户第一是商业公司本就应该恪守的。团队合作也是基本要求，公司毕竟不是一个人。拥抱变化可能是阿里特有的。唯一不变的就是变化，组织结构的调整、产品定位的变化、市场形式的变幻等等，阿里员工面对种种变化时，要求能积极面对、主动拥抱。诚信、激情、敬业是一个员工的基本素养。还没看到过一个公司，要求员工不诚信、没激情、不敬业的。如果这就是「洗脑」的话，我觉得多洗洗也无妨。就如小学老师教我们要学会孔融让梨一样。如果你不认可孔融让梨的寓意，很可能只代表你是一朵奇葩，或者是你为了标新立异而故意反对，并不代表你的真实内心。</p>
<p>我在微博上发了那条吐槽后，不少评论觉得我是不是不想在阿里活了，或者还想不想拿马总的红包。看到这些评论，真心觉得大家太以小人之心度君子之腹。马云是不是君子我无法判断，但跟马云有限的几次接触里，让我不太担心这种吐槽会带来什么不好的影响。2010 年时，曾在阿里内网上发过一个神贴，神贴内容不多说，总之触动了很多高层。两年后，这神贴不知道怎么又被挖坟出来。然后马总看到了，以为是最近的事，于是回复了我，回复得有些没道理。于是我回复了马总，指出马总不光看错了时间，还缺乏道理。后来让我没想到的是，马总亲自打电话给我道歉，说没看清是挖坟贴，想错了，对不起。</p>
<p>我不知道有多少公司让员工有机会发神贴？阿里内网的神贴每年都有，绵绵不绝。在我看来这是一种开放，真心的开放。爱的反义词不是恨，而是冷漠。很多神贴本身是爱的体现，神贴往往是爱到绝望处的恨。最怕的是冷漠，是和谐。什么都不说、或说好的公司，往往离死亡也就不远了。</p>
<p>我更不知道有多少公司的 CEO 会因为一个论坛回复不妥，而亲自电话向员工道歉，连续说了好多对不起，还要请吃饭。</p>
<p>另外，在一个公司真不代表你就得处处为这个公司说话。对我来说，阿里有很多让我欣赏、留恋的地方，当然也会有让我觉得不好的地方。比如微博屏蔽微信，作为微信用户，我不赞同这种行为，但这不影响我喜欢目前在阿里的工作。</p>
<p>（完）</p>
<p>题图：世界是多姿多彩的，哪有那么多绝对，交织着恨的爱往往才是真爱。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，只推送原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/25724757.html</link><guid isPermaLink="true">http://acyort.github.io/posts/25724757.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Mon, 15 Aug 2016 02:44:56 GMT</pubDate></item><item><title><![CDATA[说说全栈工程师]]></title><description><![CDATA[<p><img src="http://media-cache-ec0.pinimg.com/736x/5e/92/65/5e926593186d4c7475481abc632f76f7.jpg" alt=""></p>
<p>全栈工程师（Full Stack Developer）好像突然就火了，知乎、微博上都有讨论。这个概念在 2012 年时就有提出：<a href="http://www.laurencegellert.com/2012/08/what-is-a-full-stack-developer/">What is a Full Stack Developer?</a>，主要观点是：</p>
<blockquote>
<p>有这么一批人，他们对软件开发的很多层未必精通，但对每一层都很熟悉，他们对软件技术充满热情，这种人就是所谓的全栈工程师。</p>
</blockquote>
<p>对每一层都熟悉，究竟包含哪些层呢？作者的观点是：</p>
<ol>
<li>服务器、网络、运维。</li>
<li>数据模型。</li>
<li>业务逻辑。</li>
<li>API 层、Action 层、MVC。</li>
<li>UI 层。</li>
<li>用户体验。</li>
<li>理解用户与商业需求。</li>
</ol>
<p>如果对以上七层都很熟悉，同时精通一二，就是全栈工程师了。</p>
<p>这样来看其实并不难。比如对 Java 开发来说，第 3 层是工作重点，稍微有点追求的工程师，对 1、2、4、5 层也都会有一定的熟悉。对前端工程师来说，第 5 层是工作重点，然后对 3、4、6、7 层也会有一定熟悉度。其他职位，运维、DBA、测试等，也都有精通点，同时对周边的层会有熟悉度。</p>
<p>也就是说，大部分有点追求的工程师已经是四分之三栈工程师。反而单栈工程师很少很少，甚至不可能存在。</p>
<p>回到全栈工程师的定义，可以分解为三点：</p>
<ol>
<li>精通若干层。</li>
<li>熟悉所有层。</li>
<li>对软件技术充满热情。</li>
</ol>
<p>第 3 点很重要。未必要刻意去让自己熟悉所有层，如果能「对软件技术充满热情」，那么遇到陌生领域时，一个优秀的工程师会有能力去快速学习，从而慢慢地自然而然地就熟悉所有层，就莫名其妙成为全栈工程师了。</p>
<p><strong>全栈工程师是不给自己设限，是永远保持激情和学习欲望的一批人。</strong></p>
<p>另外想说一点，全栈工程师并不违背《国富论》提到的社会分工。在软件开发领域，分工依旧是提高效率的重要手段。但分工后，还有影响效率的一个重要因素：</p>
<p><strong>分工是否合理，是否已达成让合适的人做合适的事。</strong></p>
<p>从分工合理性的角度去考虑，会发现一些传统的分工未必是合适的。比如第 4 层 MVC 中的 View 和 Controller 层，Java 开发工程师真的是最合适的人选吗？这一层或许可以细化为：</p>
<p>4.1、Service、API、Model 层。
4.2、View、Router 等处理。</p>
<p>这样，4.1 依旧是后端开发擅长的领域，4.2 则很可能交给前端工程师来负责更合理。再次分工、分工合理性的判定，经常就需要跨界了解，需要全栈工程师的视角。</p>
<p>如果 4.2 交给前端来负责，Node 很可能就是当下更合适的技术选型。基于 Node 可以达成更合理的分工，有如 NCZ 的想法：</p>
<p><img src="http://img.hb.aicdn.com/40091e671b0bdee26e516ac050c6caec80885b8a12b87-7JgfFh_fw658" alt=""></p>
<p>全栈视角可以让我们重新去审视、去思考各个角色最合适去做什么，从而有可能促进更合理的分工协作。一旦发现了更合理的分工、需要对分工做出调整时，全栈就是一种自然而然的要求。比如基于 Node 的前后端分工协作，就需要前端工程师勇敢地去承担原来只是熟悉却并不精通的领域。如果能承担下来，无论对前端还是后端，效率上都会有提升，甚至带来一系列研发交付方式的变革。</p>
<p><strong>全栈的背后，是自由，是分工的更细化，是分工的更专业。</strong></p>
<p>（完）</p>
<p>题图：全栈烧饼。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，只推送原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/25575917.html</link><guid isPermaLink="true">http://acyort.github.io/posts/25575917.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Thu, 03 Mar 2016 13:50:10 GMT</pubDate></item><item><title><![CDATA[Web 研发模式演变]]></title><description><![CDATA[<p><img src="http://img.hb.aicdn.com/cf2559df0179ff4d1ff03dc4def9a8c4ffa7d54e1ba4f-iSUxCs" alt=""></p>
<p>前不久徐飞写了一篇很好的文章：<a href="http://goo.gl/DKNX6z">Web 应用的组件化开发</a>。本文尝试从历史发展角度，说说各种研发模式的优劣。</p>
<h2 id="一、简单明快的早期时代">一、简单明快的早期时代</h2><p><img src="http://img.hb.aicdn.com/c369aacc8da38af8e422fd295148c57d1b5817fffc56-OcbPdl_fw658" alt="1"></p>
<p>可称之为 Web 1.0 时代，非常适合创业型小项目，不分前后端，经常 3-5 人搞定所有开发。页面由 JSP、PHP 等工程师在服务端生成，浏览器负责展现。基本上是服务端给什么浏览器就展现什么，展现的控制在 Web Server 层。</p>
<p>这种模式的好处是：简单明快，本地起一个 Tomcat 或 Apache 就能开发，调试什么的都还好，只要业务不太复杂。</p>
<p>然而业务总会变复杂，这是好事情，否则很可能就意味着创业失败了。业务的复杂会让 Service 越来越多，参与开发的人员也很可能从几个人快速扩招到几十人。在这种情况下，会遇到一些典型问题：</p>
<p>1、<strong>Service 越来越多，调用关系变复杂，前端搭建本地环境不再是一件简单的事。</strong>考虑团队协作，往往会考虑搭建集中式的开发服务器来解决。这种解决方案对编译型的后端开发来说也许还好，但对前端开发来说并不友好。天哪，我只是想调整下按钮样式，却要本地开发、代码上传、验证生效等好几个步骤。也许习惯了也还好，但开发服务器总是不那么稳定，出问题时往往需要依赖后端开发搞定。看似仅仅是前端开发难以本地化，但这对研发效率的影响其实蛮大。</p>
<p>2、<strong>JSP 等代码的可维护性越来越差。</strong>JSP 非常强大，可以内嵌 Java 代码。这种强大使得前后端的职责不清晰，JSP 变成了一个灰色地带。经常为了赶项目，为了各种紧急需求，会在 JSP 里揉杂大量业务代码。积攒到一定阶段时，往往会带来大量维护成本。</p>
<p>这个时期，为了提高可维护性，可以通过下面的方式实现前端的组件化：</p>
<p><img src="http://img.hb.aicdn.com/8593eb76f9f51ca75393324311093b715b57671e114f4-nagy6D_fw658" alt="2"></p>
<p>理论上，如果大家都能按照最佳实践去书写代码，那么无论是 JSP 还是 PHP，可维护性都不会差。<strong>但可维护性更多是工程含义，有时候需要通过限制带来自由，需要某种约定，使得即便是新手也不会写出太糟糕的代码。</strong></p>
<p><strong>如何让前后端分工更合理高效，如何提高代码的可维护性，在 Web 开发中很重要。</strong>下面我们继续来看，技术架构的演变如何解决这两个问题。</p>
<h2 id="二、后端为主的-mvc-时代">二、后端为主的 MVC 时代</h2><p>为了降低复杂度，以后端为出发点，有了 Web Server 层的架构升级，比如 Structs、Spring MVC 等，这是后端的 MVC 时代。</p>
<p><img src="http://img.hb.aicdn.com/9a6bf527dabbdb9b795c58b0b7af6c7a18de9ce311a61-9uiuxT_fw658" alt="3"></p>
<p>代码可维护性得到明显好转，MVC 是个非常好的协作模式，从架构层面让开发者懂得什么代码应该写在什么地方。为了让 View 层更简单干脆，还可以选择 Velocity、Freemaker 等模板，使得模板里写不了 Java 代码。看起来是功能变弱了，但正是这种限制使得前后端分工更清晰。然而依旧并不是那么清晰，这个阶段的典型问题是：</p>
<p>1、<strong>前端开发重度依赖开发环境。</strong>这种架构下，前后端协作有两种模式：一种是前端写 demo，写好后，让后端去套模板。淘宝早期包括现在依旧有大量业务线是这种模式。好处很明显，demo 可以本地开发，很高效。不足是还需要后端套模板，有可能套错，套完后还需要前端确定，来回沟通调整的成本比较大。另一种协作模式是前端负责浏览器端的所有开发和服务器端的 View 层模板开发，支付宝是这种模式。好处是 UI 相关的代码都是前端去写就好，后端不用太关注，不足就是前端开发重度绑定后端环境，环境成为影响前端开发效率的重要因素。</p>
<p>2、<strong>前后端职责依旧纠缠不清。</strong>Velocity 模板还是蛮强大的，变量、逻辑、宏等特性，依旧可以通过拿到的上下文变量来实现各种业务逻辑。这样，只要前端弱势一点，往往就会被后端要求在模板层写出不少业务代码。还有一个很大的灰色地带是 Controller，页面路由等功能本应该是前端最关注的，但却是由后端来实现。Controller 本身与 Model 往往也会纠缠不清，看了让人咬牙的代码经常会出现在 Controller 层。这些问题不能全归结于程序员的素养，否则 JSP 就够了。</p>
<p>经常会有人吐槽 Java，但 Java 在工程化开发方面真的做了大量思考和架构尝试。Java 蛮符合马云的一句话：让平凡人做非凡事。</p>
<h2 id="三、ajax-带来的-spa-时代">三、Ajax 带来的 SPA 时代</h2><p>历史滚滚往前，2004 年 Gmail 像风一样的女子来到人间，很快 2005 年 Ajax 正式提出，加上 CDN 开始大量用于静态资源存储，于是出现了 JavaScript 王者归来的 SPA （Single Page Application 单页面应用）时代。</p>
<p><img src="http://img.hb.aicdn.com/9297fdc73d83f277d449c92193a3af428ddc0d4411cf9-n1DY6F_fw658" alt="4"></p>
<p>这种模式下，前后端的分工非常清晰，前后端的关键协作点是 Ajax 接口。看起来是如此美妙，但回过头来看看的话，这与 JSP 时代区别不大。复杂度从服务端的 JSP 里移到了浏览器的 JavaScript，浏览器端变得很复杂。类似 Spring MVC，这个时代开始出现浏览器端的分层架构：</p>
<p><img src="http://img.hb.aicdn.com/158892143bc64033d22dd8ed7e7536e71e070c4a13c57-hPg1Pc_fw658" alt="5"></p>
<p>对于 SPA 应用，有几个很重要的挑战：</p>
<p>1、<strong>前后端接口的约定。</strong>如果后端的接口一塌糊涂，如果后端的业务模型不够稳定，那么前端开发会很痛苦。这一块在业界有 API Blueprint 等方案来约定和沉淀接口，在阿里，不少团队也有类似尝试，通过接口规则、接口平台等方式来做。有了和后端一起沉淀的接口规则，还可以用来模拟数据，使得前后端可以在约定接口后实现高效并行开发。相信这一块会越做越好。</p>
<p>2、<strong>前端开发的复杂度控制。</strong>SPA 应用大多以功能交互型为主，JavaScript 代码过十万行很正常。大量 JS 代码的组织，与 View 层的绑定等，都不是容易的事情。典型的解决方案是业界的 Backbone，但 Backbone 做的事还很有限，依旧存在大量空白区域需要挑战。</p>
<p>SPA 让前端看到了一丝绿色，但依旧是在荒漠中行走。</p>
<h2 id="四、前端为主的-mv-时代">四、前端为主的 MV* 时代</h2><p>为了降低前端开发复杂度，除了 Backbone，还有大量框架涌现，比如 EmberJS、KnockoutJS、AngularJS 等等。这些框架总的原则是先按类型分层，比如 Templates、Controllers、Models，然后再在层内做切分，如下图：</p>
<p><img src="http://img.hb.aicdn.com/56f4cee0e6c7af61e24dbf31e4be17f142d5902c1109a-BcxRim_fw658" alt="6"></p>
<p>好处很明显：</p>
<p>1、<strong>前后端职责很清晰。</strong>前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful 等接口。</p>
<p>2、<strong>前端开发的复杂度可控。</strong>前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计，得花一本的厚度去说明。</p>
<p>3、<strong>部署相对独立</strong>，产品体验可以快速改进。</p>
<p>但依旧有不足之处：</p>
<p>1、代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。
2、全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。
3、性能并非最佳，特别是移动互联网环境下。
4、SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌控。</p>
<h2 id="五、node-带来的全栈时代">五、Node 带来的全栈时代</h2><p>前端为主的 MV* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 Node.js 的兴起，JavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式：</p>
<p><img src="http://img.hb.aicdn.com/40091e671b0bdee26e516ac050c6caec80885b8a12b87-7JgfFh_fw658" alt="7"></p>
<p>在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职：</p>
<p>1、Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互功能，HTML 的生成也可以放在这层，具体看应用场景。</p>
<p>2、Back-end UI layer 处理路由、模板、数据获取、cookie 等。通过路由，前端终于可以自主把控 URL Design，这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，转而可以专心于业务逻辑层的开发。</p>
<p>通过 Node，Web Server 层也是 JavaScript 代码，这意味着部分代码可前后复用，需要 SEO 的场景可以在服务端同步渲染，由于异步请求太多导致的性能问题也可以通过服务端来缓解。前一种模式的不足，通过这种模式几乎都能完美解决掉。</p>
<p>与 JSP 模式相比，全栈模式看起来是一种回归，也的确是一种向原始开发模式的回归，不过是一种螺旋上升式的回归。</p>
<p>基于 Node 的全栈模式，依旧面临很多挑战：</p>
<p>1、需要前端对服务端编程有更进一步的认识。比如 network/tcp、PE 等知识的掌握。
2、Node 层与 Java 层的高效通信。Node 模式下，都在服务器端，RESTful HTTP 通信未必高效，通过 SOAP 等方式通信更高效。一切需要在验证中前行。
3、对部署、运维层面的熟练了解，需要更多知识点和实操经验。
4、大量历史遗留问题如何过渡。这可能是最大最大的阻力。</p>
<h2 id="六、小结">六、小结</h2><p>回顾历史总是让人感慨，展望未来则让人兴奋。上面讲到的研发模式，除了最后一种还在探索期，其他各种在各大公司都已有大量实践。几点小结：</p>
<p>1、模式没有好坏高下之分，只有合不合适。
2、Ajax 给前端开发带来了一次质的飞跃，Node 很可能是第二次。
3、SoC（关注度分离） 是一条伟大的原则。上面种种模式，都是让前后端的职责更清晰，分工更合理高效。
4、还有个原则，让合适的人做合适的事。比如 Web Server 层的 UI Layer 开发，前端是更合适的人选。</p>
<p><strong>历史有时候会打转，咋一看以为是回去了，实际上是螺旋转了一圈，站在了一个新的起点。</strong></p>
<p>（完）</p>
<p>题图：演化真不容易呀。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，只推送原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/25499547.html</link><guid isPermaLink="true">http://acyort.github.io/posts/25499547.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Wed, 07 Sep 2016 02:25:27 GMT</pubDate></item><item><title><![CDATA[可爱的孩子们]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/1368213/52e1c7a6-398a-11e3-9710-bf659f0994bc.jpeg" alt="da5c4c650c3c9692247f19bbaf6ff7dc5d8dda0a6750e-upsn1p_fw580"></p>
<p>周末看芒果台新出的《爸爸去哪儿》，一下子就被吸引住了。对这类节目我完全没有抵抗力，特别喜欢几点：</p>
<ol>
<li><p><strong>真实的小孩</strong>。五个活泼可爱的小孩，虽然是明星或大腕的子女，但全然不像《星光大道》等综艺节目里那些被过度开发的「才艺突出」的小明星。李湘女儿胖乎乎的在生活中时常能碰见，那一张嘴比最好吃的甜甜圈还甜。郭涛儿子那顽皮劲，更是很多六七岁小男孩的共性。五个小孩代表着五种类型，很有看头。</p>
</li>
<li><p><strong>真实的大人</strong>。以前对明星大腕内心总免不了有排斥，看完这节目，我居然不讨厌李湘了。李湘女儿的爸爸做午饭时那一脸愁容，绝对不是表演出来的。还有田亮老说要做一个「慈祥的父亲」，嘴角那忍不住的小抽动，可以想象田亮平时绝对是开过吼的。这帮爸爸，在这个节目里什么都不是，只是真实的爸爸。节目能做成这样，牛呀。</p>
</li>
<li><p><strong>真实的场景</strong>。 一切都是透明的，孩子知道这是电视节目，大人也不隐瞒。镜头里还有一大堆旁观者，没事。当表演无所忌讳时，就假作真时假就是真了。第一集的场景设定挺贴近生活的，期待后续能继续贴近生活（看预告第二集是到沙漠里，感觉有点不祥）。</p>
</li>
</ol>
<p>注意，上面不是软文。我真心希望芒果台请我写软文，那样就发大了。</p>
<p>下面的文字，源自我五年以来培育小雕长大过程中的感慨。简言之就一句话：</p>
<p><strong>孩子们身上，有太多值得大人们重新拾回的东西。</strong></p>
<ol>
<li><p><strong>好奇心</strong>。小雕会问我恐龙是怎么灭绝的？会问我为什么风一吹水会有波浪？还会问我第一次听说的一些词汇比如「爱不释手」是什么意思？同时不止一次好奇自己是怎么从妈妈肚子里出来的？…… 这些有趣的问题，我很少很少从大人口中听到了。</p>
</li>
<li><p><strong>无隔夜仇</strong>。小雕干了坏事，老雕忍不住也会打骂。但只要睡一觉，就依旧是最亲的爸爸。这一点，人一长大，貌似能做到的人就很少很少了。</p>
</li>
<li><p><strong>有所害怕</strong>。小雕害怕木乃伊，不是恐怖，是听了解释后，觉得很神奇。小雕还非常害怕被拘束，比如罚站、关小黑屋等。有所害怕让小雕依稀懂得大自然有很多很多目前还无法解释的事情，需要保有敬畏。有所害怕，同时也让小雕更追求独立、自由。虽然这些词汇孩子还不太懂，但他们开始逐步懂得不自由、不独立会带来不舒服。</p>
</li>
<li><p><strong>活在当下</strong>。小雕的笑脸是真高兴，哭泣是真伤心。一玩起来是真正的忘我，那份投入是使上全身的力量在奔跑。活在当下，这可是佛的境界。</p>
</li>
<li><p><strong>无邪</strong>。小雕喜欢哪个女生，就敢上去搭讪，成功就直接牵起手一块玩啦。我仔细观察过，这中间的奔跑、笑容，是真心的一起玩带来的。没有其他奢求、欲念，就是简简单单的喜欢，于是在一起玩。人一旦长大，往往就「有邪」了。</p>
</li>
</ol>
<p>与孩子相比，大人身上的毛病实在是太多了。</p>
<p>今晚闲聊到此。没小孩的赶快要个小孩吧。有人说，如果一个女人不愿意为一个男人生小孩，说明这个女人并不真爱这个男人。我不想得罪丁克们，我想说的是另一件事，在你要小孩前，一定要谨慎。选择了生小孩，往往就选择了你的一生。</p>
<p>最后，如果想直接跟我聊聊孩子们，欢迎加我「来往」帐号：</p>
<p><img src="https://f.cloud.github.com/assets/97227/1368208/f53a7f4e-3989-11e3-8ffa-70c60725b2af.jpg" alt="68361562jw1e9rv1qrn2vj20f00f0mzf"></p>
]]></description><link>http://acyort.github.io/posts/21279947.html</link><guid isPermaLink="true">http://acyort.github.io/posts/21279947.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Thu, 07 Nov 2013 05:20:06 GMT</pubDate></item><item><title><![CDATA[测试工具设计的一个细节]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/1332880/91a21fe4-3585-11e3-913c-2542c5e1b2ea.jpeg" alt="b8e55353aa4f44fb514e7a1400185adbf7e900f137bf1-4tmwnr_fw580"></p>
<p>每次发文，都会有人回复能否来点「干货」。但干货一般真的很干，适合睡前阅读的不多。</p>
<p>幸运的是，今天组内妹子写了一篇博客，从浅入深，很清晰地讲述了前端测试工具开发时遇到的一些问题和解决方案。很精彩，地址如下：</p>
<p><a href="https://github.com/fool2fish/blog/issues/3">测试工具设计的一个细节：iframe 还是 window ？</a></p>
<p>阅读完成后，可以回来听我继续唠叨：</p>
<ol>
<li><p>微信不适合发技术文章，特别是含大量代码的。原本想将上面的文章编辑过来，但上帝饶了我吧，这活比叫我出去跑十圈还难。</p>
</li>
<li><p>最近看到一句话，说 <strong>「浮躁是源自内心的一种不安全感」</strong>。房子、车子、妹子等社会问题导致的浮躁，我这里就不说了。对于我们码农来说，内心的不安全感，往往来自对自身技术的不自信。很多社区的吵架，PHP 好还是 Java 好、ROR 转型 Node.js 等，很多参与口水仗的码农们，内心或多或少都是「浮躁」的。 <strong>摆脱浮躁的妙方，就是「静」字。</strong> 唯有安静下来，内求于心，踏实地去学去用，才能自信起来。比如沉鱼上面这篇文章，心若静不下来，是不大可能有心情写这么多文字的。对女程序来说，心静、自信，还有美容养颜的功效。不信的话，你可以来看看沉鱼哦。</p>
</li>
<li><p>最近在微博上发了条关于 <strong>「全端工程师」</strong> 的微博。我对全端工程师的理解，不是说后端、数据库、甚至设计、产品什么的都一锅端。分工细化是提高效率和推动社会进步的重要因素。 <strong>全端不是全才，全端的依托点依旧在端上。</strong> 只是这个「端」，不再局限于传统的 PC 端，需要包括目前兴起的 Phone 端、Pad 端、TV 端、各种 Screen 端等等。这些端，需要前端扩展自己的技能，对 iOS 开发、Android 开发等都要涉猎。至于 Node.js，扩展的也是端，一是数据库上面的服务端，二是当工具语言用，让前端可以游刃于各种 Shell 端。前端就如木匠，优秀的木匠，不会把自己局限在只会用一种工具上。</p>
</li>
</ol>
<p>（完）</p>
<p>题图：细节之美。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/21008475.html</link><guid isPermaLink="true">http://acyort.github.io/posts/21008475.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Mon, 18 Nov 2013 01:47:19 GMT</pubDate></item><item><title><![CDATA[知识与知道]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/1289798/3fc032a0-3027-11e3-9166-0566bcbc9322.png" alt="image"></p>
<p>（一）</p>
<p>九月份去广州校园招聘，一名学生给我的印象很深。我问及一个浏览器兼容的技术细节，他很老实地回答不知道，然后争辩说这是一次性知识，遇到时再 Google 去寻找答案就好。</p>
<p>我继续追问，如果 Google 找不到答案怎么办呢？很多兼容性问题，很可能还没有人总结分享出来，特别是移动开发这一块。这位学生一点也不犹豫地答道：他有过类似的经历，如果搜索不到答案，知道怎么设计测试方案去逐步找出答案，并给我讲了一个具体的案例。</p>
<p>很欣赏这位学生，虽然不知道我想考他的那个具体「知识」，但是他「知道」如何去获取这个知识。</p>
<p>上面这个故事，大家都懂，是有鱼，不如会渔。然而这并不是我欣赏这位学生的主要原因。</p>
<p>真正让我觉得后生可畏的是，面试后的当天晚上，我收到了他的邮件，很详细地给到我他对那个问题的具体思路与结论。</p>
<p>不能光「知道」打鱼的方法，倘若天天不出海，只在沙滩上晒太阳，还不如家里拥有咸鱼干的人呢。</p>
<p>（二）</p>
<p>最近看了些老电影，《神雕侠侣》、《乱世佳人》等。第一次觉得杨过很残忍，在对郭襄这件事上。对一个人好，未必要表露出来，太过了，反而容易把一个人留在梦里。以前不是很明白斯嘉丽对土地的情感，这次重读《飘》，才真真切切感受到什么是生活。在土地面前，爱情仅仅是一颗豆芽。热爱生活，追求更好地活着，才是一个女人永葆青春的良方。白瑞德的离开，又是多么无奈的必然。</p>
<p>《一一》里说，电影可以让人多活三辈子。</p>
<p>杨绛说，年轻的时候以为不读书不足以了解人生，直到后来才发现如果不了解人生，其实是读不懂书的。电影也如此。</p>
<p>我们读过的，看过的，都是「知识」。在生活中活过的，才是「知道」。</p>
<p>（完）</p>
<p>题图：钓鱼去。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/20683200.html</link><guid isPermaLink="true">http://acyort.github.io/posts/20683200.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Thu, 20 Mar 2014 07:13:35 GMT</pubDate></item><item><title><![CDATA[关于 Sea.js、开源与前端之路]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/1072924/ee0bf804-149c-11e3-9398-7ccfec76fb27.png" alt="image"></p>
<p>前几天配合 CSDN 做了一个采访：<a href="http://www.csdn.net/article/2013-09-03/2816801-front-end-development-seajs-framework/1">玉伯的前端开发之路</a></p>
<p>采访时有些匆忙。今天在原采访稿的基础上，稍作修改，整理如下。</p>
<h2 id="seajs-与-arale">Sea.js 与 Arale</h2><p><strong>CSDN</strong>：先介绍一下自己和目前的工作吧！</p>
<p><strong>玉伯</strong>：我叫王保平，阿里花名玉伯。目前在支付宝前端技术部工作，从事前端基础类库、工具等产品的研发。喜欢编码、热爱思考，努力把每一天过得平淡又精彩。</p>
<p><strong>CSDN</strong>：Sea.js 是什么？致力于解决什么问题？</p>
<p><strong>玉伯</strong>：Sea.js 是一个很纯粹小巧的模块加载器，它只解决一个问题：前端代码的模块化。通过 Sea.js，可以将大量 JavaScript 代码封装成一个个小模块，然后实现模块的加载和依赖管理。</p>
<p>有了 Sea.js，我们就可以书写模块了。Arale 则是一套满足支付宝需求的通用模块集合，是一套基于模块化的前端基础类库，目前具有近百个模块，简单易用。</p>
<p><strong>CSDN</strong>：发起 Sea.js 项目的初衷是什么？它的本质意义是什么？</p>
<p><strong>玉伯</strong>：2008 年，在前端开发过程中，经常会出现一个单文件几千行甚至近万行的情况。这种大文件，对协作开发、后续维护、性能调优等都不利。Sea.js 初衷是帮助前端开发工程师能将大文件拆分成小文件，能保持小颗粒度的模块化开发，同时不需要过多考虑依赖关系，让依赖管理轻松自如，让模块化开发变得更自然，就像浏览器原生提供的一样。</p>
<p>Sea.js 的本质意义是通过模块化开发，来提高代码的可维护性。对工程师而言，是关注度分离，能将更多精力聚焦在代码本身的逻辑上。</p>
<p><strong>CSDN</strong>：Sea.js 的设计思想是什么？是如何具体实现的？</p>
<p><strong>玉伯</strong>：Sea.js 的核心设计思想是「保持简单」。有两层含义：</p>
<ol>
<li><p><strong>对外保持使用接口的简单</strong>。Sea.js的常用API只有7个，使用者一旦了解，基本没什么记忆成本，可以快速上手。</p>
</li>
<li><p><strong>内部实现代码尽可能简单</strong>。追求内部实现的简单有很多好处，比如别人可以比较容易读懂源码，这样就能参与进来协同开发。源码简单，往往也意味着不太会有晦涩的 bug 存在。Sea.js 的内部实现，一直在往「简单得明显没有 bug」的方向努力。</p>
</li>
</ol>
<p>除了保持简单，Sea.js 的设计理念里还有职责清晰、性能优先和适度完备。</p>
<p>职责清晰是让 Sea.js 的范畴明确，随时知道自己应该做什么，不应该做什么。一个框架，最怕的是需求膨胀，最怕的是复杂化。</p>
<p>性能优先是因为 Sea.js 是底层加载器，倘若性能不好，直接会影响页面性能，因此源码中有不少地方会刻意追求性能。</p>
<p>适度完备是从功能的层面看 Sea.js 的 API 是否能满足常用需求，同时又能通过插件机制对外提供适度的可扩展性。Sea.js 不追求能够满足所有需求，而是追求 2/8 原则。</p>
<p>具体代码实现纯文字不太好描述，感兴趣的可以阅读源码：<a href="https://github.com/seajs/seajs">https://github.com/seajs/seajs</a>，所有源码都在上面，欢迎阅读，欢迎给出建议。</p>
<p><strong>CSDN</strong>：Sea.js 开发过程中，最大的困难是什么？是如何解决的？</p>
<p><strong>玉伯</strong>：这个说起来比较有意思，在开发过程中，Sea.js 最大的困难，不是编码，而是模块定义规范的确定。</p>
<p>在业界，目前流行的模块定义规范，有 CommonJS 的 Modues/1.x 规范，还有RequireJS 社区倡导的异步模块定义规范 AMD。这两个规范，在社区里存在比较大的讨论，各有利弊，适用于不同的运行环境。Sea.js 最后采用的是延自 CommonJS Modules/2.0 规范的通用模块定义规范 CMD。这些规范的优劣，至今都有争议。不同的团队，不同的场景下，喜好和选择都有可能不同。</p>
<p>随着 Sea.js 的推广，CMD 规范目前在国内已经有相当多人认可。接下来会进一步国际化，希望能得到更大社区范围内的认可。这条路还很长，不能说已解决了，一切还在解决的路上。</p>
<p>不过，这些都不是关键。即便 Sea.js 以后死掉，只要大家对模块化开发理念有深度认可，那一切也就值了。</p>
<p><strong>CSDN</strong>：Sea.js 和 Arale 目前分别应用在哪些地方？</p>
<p><strong>玉伯</strong>：Sea.js 目前已应用在阿里、腾讯、网易等很多公司，具体可以查看 seajs.org 首页下面的 logo 墙。国内有大量中小网站采用 Sea.js 开发。</p>
<p>Arale 的使用范围是支付宝，还有阿里巴巴 ICBU 部门，在一小部分国内创业型公司中也有使用。</p>
<p><strong>CSDN</strong>：您之前还开发过前端类库 KISSY，而 Arale 也是一个基于 Sea.js 的前端类库，两者有什么不同？这是在「造轮子」吗？它们的开发初衷是什么？目标又是什么？</p>
<p><strong>玉伯</strong>：KISSY 和 Arale 都是前端基础类库，从组件提供的功能来讲，存在很大重合度。但从理念上来讲，这两个类库有比较大的不同。</p>
<p>KISSY 是大教堂式思路，所有组件，从底层基础组件，到上层 UI 组件等等，都是自主研发。这和业界的 YUI3、Sencha 等类库的思路是一样的。</p>
<p>Arale 有所不同。Arale 的首要理念是「开放」。开放不光意味着将自己做好的组件贡献给社区，开放更意味着将社区已有的优秀组件直接拿进来用。在开放的理念下，Arale 类库里，直接引入了 jQuery、Backbone、Moment、Handlebars 等业界组件。在这种思路下，Arale 能与开源社区紧密互动，彼此快速共进。</p>
<p>KISSY 和 Arale 的初衷都很简单，KISSY 是解决淘宝的前端基础类库问题，Arale 则是解决支付宝的前端基础类库问题。两者的目标，都是减少前端开发过程中的重复工作量，尽量提高前端开发的工作效率，同时在通用组件层面保障全站的用户体验。</p>
<p><strong>CSDN</strong>：Sea.js 和 Arale 未来会如何发展？目标是什么？</p>
<p><strong>玉伯</strong>：从 2.0 版本开始，Sea.js 的发展目标是做简单、纯粹的模块加载器。甚至希望从 2.x 的某个版本开始，就不需要更新了，就能满足绝大部分需求，能非常稳定下来，不需要再升级。</p>
<p>Sea.js 稳定后，更多精力会放在 Arale 等前端基础类库的建设上。Sea.js 名称中的 Sea，是「海纳百川、有容乃大」的意思。Sea.js 希望是一片海，可以容纳各种各样的模块，希望能形成一个模块的生态圈，能形成生态链，能促进良性循环，能让整个前端开发界都受益。</p>
<h2 id="开源的点滴感悟">开源的点滴感悟</h2><p><strong>CSDN</strong>：为什么选择将这些项目开源出来？开源对于自己的技能提升是否有帮助？</p>
<p><strong>玉伯</strong>：选择开源有两个初衷：</p>
<ol>
<li>将好的东西贡献给社区；</li>
<li>通过社区让东西更好。</li>
</ol>
<p>Sea.js 是在开源中不断成长流行的，很多需求点、优化点，如果不是开源，Sea.js 很难走到今天。</p>
<p>开源本身对技能提升个人觉得是有限的，但技能之外的软技能提升，比如沟通协作、产品化思路、运营管理等非常有帮助。通过开源的方式，比较容易让一个技术人员有产品观，能让自己的眼界在编码之外看到更多美景。</p>
<p><strong>CSDN</strong>：在开源领域这么久，您有什么感悟？您理解的「开源精神」是什么？</p>
<p><strong>玉伯</strong>：我理解的开源精神，有三点：</p>
<ol>
<li><p><strong>拿来主义</strong>。懂得从现有成熟开源项目中去挑选符合自己需求的项目，直接拿来用。程序员容易犯一个病，就是什么东西都想自己造，或者对别人造的，浅尝辄止就判断别人的不行。真正的拿来主义，需要一颗谦卑的心。在「拿」的过程中，需要去看文档，甚至去读源码，这些过程，对程序员的技能增长都非常有帮助。很多程序员的技能提升，并非是写的代码太少，而是看的代码不够多。懂得去看、去理解、去用，是迈入开源世界的第一步。</p>
</li>
<li><p><strong>参与比主导更重要</strong>。开源世界里永远不会有完美的项目。当你学会了「拿来主义」后，在使用开源项目时，肯定会遇到各种bug、各种特性不满足。这时，你可以自己去新开一个项目，也可以参与到该开源项目中去，帮助作者一起来完善。个人觉得对于绝大部分项目来说，参与进去帮助完善是更明智的选择。参与进去，可以让你更懂得美，懂得感恩之心，懂得回馈之情。这在过程中，你的功力，往往也会大增。不光是技术上的进步，还包括英语读写能力。在人性沟通上，你也会收获很多，这是无价的财富。</p>
</li>
<li><p><strong>重视社区</strong>。除了代码，还有文档、测试用例、Issues 管理、版本发布、升级策略、书籍、视频等等。jQuery、Backbone、AngularJS 等成熟项目，成熟的是社区，而不是源码。好的社区，是在 Google 中一搜索，就能找到不少资料。好的社区，是你踩过的坑，经常已经有人也踩过并整理分享出来了。社区的形成非常不易，如果选择了开源，从项目一开始，就尽量可能的去让社区逐步形成起来。社区形成后，开源才会活起来，否则就是死开源。</p>
</li>
</ol>
<p>最后，知易行难。上面的道理或许大家都懂，真要做到，则是一场修行。Sea.js 和 Arale 也才刚刚上路。好在，选择了，就不怕远。</p>
<p><strong>CSDN</strong>：您认为，KISSY、Seajs 和 Arale 这些开源项目为什么能取得成功？它们是否从社区中获得了贡献？</p>
<p><strong>玉伯</strong>：还谈不上成功。目前社区未成型，以 Sea.js 和 Arale 为例，目前从社区中获得的贡献有：</p>
<ol>
<li><p>bugs 反馈和新功能讨论。这很重要，只满足一个公司的需求时，很多想法都想不到，当有多个公司使用你的产品时，在某些点上可以帮团队打开思路，去看到不少原来看不到的地方，甚至有时会有「为什么我们之前没想到」的感慨。</p>
</li>
<li><p>全网测试。这一块，在Sea.js的开发上尤为明显。Sea.js在每次发布前，都会邀请社区人员一起帮忙运行测试用例。前端开发与后端开发的最大区别之一，就是后端代码的运行环境是固定的，是开发人员自己选择的，而前端代码的运行环境却无法固定，是用户决定的。这使得前端代码的测试，除了自己的内部测试，还需要线上的“众包测试”。开源使得“众包”成为可能。</p>
</li>
<li><p>代码优化。由于是开源的，代码是公开的，偶尔就会有人会去阅读源码，并发现其中可以优化的一些点。这在Sea.js和Arale里都有一些案例，有时挺感动的。社区的力量，会给人惊喜。</p>
</li>
</ol>
<p><strong>CSDN</strong>：您如何看待国内的开源环境？</p>
<p><strong>玉伯</strong>：国内开源环境还不够理想，但越来越好了。很期待更多的公司加入并推动开源活动。对于前端开发领域，一定程度上真没有什么秘密，期待更多公司的开放。</p>
<h2 id="前端泛谈">前端泛谈</h2><p><strong>CSDN</strong>：前、后端开发有没有明确的分界（是否能完全独立）？您心目中理想的前、后端开发模式是什么？</p>
<p><strong>玉伯</strong>：前后端开发很难完全独立，个人觉得也没有必要彼此独立。我的想法是「全端工程师」，都是 Web 开发工程师，从前到后应该都能做才行，这对效率、质量都有好处。</p>
<p>但独立的前后端开发工程师也应该存在。前端一些深钻领域，需要前端领域专家的持续投入，后端也一样。这些专家来自一线开发工程师，同时在某个领域有独到的想法和执行力，能沉淀下来形成工具、技术平台，这些平台反过来提供给「全端工程师」去用，这是往深里钻的技术工具化、平台化思路。</p>
<p><strong>CSDN</strong>：有人认为，过多使用框架会导致开发者忽视对 JavaScript 原生语言特性的学习，变得懒惰，或者基础会很薄弱；也有人认为，只要精通原生 JavaScript 就可以，无需使用框架也能开发出应用，对此您怎么看？</p>
<p><strong>玉伯</strong>：在前端开发工作中，JavaScript 语言的使用只占比较小的一部分。更多的精力，需要花在语言之外。掌握 JavaScript 语言的基本使用，就如我们在学校学习，需要掌握中学数学的内容一样。这一块我觉得不难，只要肯花时间去学就好。</p>
<p>值得提醒的是，如果只精通原生 JavaScript，那么就如只会中学数学一样，虽然已经能解决很多问题，但要优雅地、更简单地解决复杂些的问题就难了。</p>
<p>框架可以让你从重复低级工作中脱离出来，特别是应用复杂到一定程度时，如果没有框架层的抽象，代码往往会复杂得难以维护。在前端开发越来越复杂的今天，框架已经必不可少。学会去用、去拥抱，往往可以事半功倍。</p>
<p>框架不会让你偷懒，更不会让你基础薄弱。即便是 jQuery，如果你对 DOM 的基本原生操作不太会，那么你也很难真正把 jQuery 使用得很好。就如中学数学都不理解的话，要把大学数学用得很好只会是梦。</p>
<p><strong>CSDN</strong>：对于繁多的前端框架，应该如何选择？</p>
<p><strong>玉伯</strong>：这个问题太大了。虚的回答是，根据自己公司的需求去选择合适的就好。实的回答是，如果你还未找到合适的，可以尝试去用用 Sea.js 吧，然后模仿 Arale 去沉淀一套适合公司业务的模块集合，去在业务的基础上构建框架。</p>
<p><strong>CSDN</strong>：阿里的前端开发流程是什么样的？</p>
<p><strong>玉伯</strong>：不同团队不一样。比如淘系团队和支付宝系团队很多流程就不一样。流程很大程度上取决于业务类型。淘系很多业务是导购类型，快速往往是第一要素，支付宝很多业务则是金融类型的，稳定与安全往往是第一位的。这两种要求下，产生的流程有很不一样，甚至可以说是地球的两极。目前也在逐步靠拢，寻求合理权衡下的统一。</p>
<p><strong>CSDN</strong>：能否分享一些您的学习经历、经验？您认为学习前端开发最重要的是什么？</p>
<p><strong>玉伯</strong>：前端开发是距离用户最近的编码工作。个人觉得，一个优秀的前端开发工程师，一定要对产品有爱。如果做的产品自己都不怎么用，那么你对很多交互细节很可能会缺乏深思，你会在潜意识里忽略掉。但是，如果你自己也用这个产品，那么你就不仅仅是在编码了，你同时还是 PD、PM、测试等等角色，甚至你就是这个产品的 CEO。当 CEO 的感觉挺累但挺爽。去找到你认可、让你为之疯狂的产品吧，你的开发能力会在你的疯狂中突飞猛进。</p>
<p><strong>CSDN</strong>：您眼中的技术大牛是什么样的？如何成为技术大牛？</p>
<p><strong>玉伯</strong>：我理解的技术大牛，是把事情做得很专业的人。温伯格在《理解专业程序员》中对专业有很好的定义：</p>
<blockquote>
<p>专业是，具有了不起的技艺或经验。
并为其他人解决问题，无论问题有多麻烦。</p>
</blockquote>
<p>很多人在追求具有了不起的技艺或经验，但只有这一项，永远称不上「专业」。专业还必须不厌其烦地为他人解决问题。无论做业务还是基础技术，都能做得很专业。追求专业、变得专业，价值、成就感往往就会水到渠成。成为技术大牛，也就是自然而然的成长。</p>
<p>（完）</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/18908108.html</link><guid isPermaLink="true">http://acyort.github.io/posts/18908108.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 04 Dec 2015 10:24:03 GMT</pubDate></item><item><title><![CDATA[又是一年校招时]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/1050128/dd35d900-10b4-11e3-8861-6bfcea9385d7.png" alt="image"></p>
<p>最近有两条消息：一条是说阿里对应届生很大方，去年招的技术年薪 20 万起，同比百度约 17 万左右，腾讯硕士 14 万起。华为今年刚调薪，本科月薪 8000 元至 9000 元，硕士 1 万。</p>
<p>还有一条消息是说，阿里今年推出了 A-star 计划，拟招 10 名左右技术牛人，年薪 60 万，并解决北京户口。</p>
<p>微博私信和邮件上，不少人询问我是不是真的。这个不太好回答，我只提供一些分析。</p>
<p>对于优秀应届生，技能基础好、综合素质高、发展潜力足的，年薪 20 万在阿里是完全有可能的。注意年薪里包含了年终奖、期权等。月薪，是不能用 20 / 12 去算的，大家都懂，我不多说。</p>
<p>对于今年的 A-star 计划，可以说完全是真的。但这就如彩票一样，人人都有机会中 500 万，但结果往往是无人中奖，奖金累积到下一期。至于为什么要搞 A-star 计划，大家也都懂，我不多说。</p>
<p>年薪 20 万起也好，A-star 计划也好，所有这些招聘策略，核心目的只有一个：希望更多人选择阿里。如果能吸引到真正的技术大牛，也绝对会给得起高薪。这是一种对人才的态度，如果你牛，你敢来，阿里就敢给。</p>
<p>关键的问题是： <strong>你是否够牛？</strong></p>
<p>如果答案是肯定的，你去哪，高薪对你来说都是迟早的事情。别成为方仲永就好。</p>
<p>如果答案是否定的，那么所有公司吸引眼球的招聘广告，对你来说意义都不大。我更建议你参考我的微博来做出选择：</p>
<blockquote>
<p>如果你对影视、书籍等文艺范的东西感兴趣，别犹豫，尝试去豆瓣等公司。如果你对社交网络感兴趣，去腾讯就好。如果对 iOS 感兴趣，去小米或锤子手机等等公司。如果哪一天，你突然发现自己还是对钱感兴趣时，来支付宝就好。</p>
</blockquote>
<p><strong>真正对什么产品感兴趣，就去哪吧。刚毕业，年轻着呢，别一开始就在乎哪点钱的差距。</strong></p>
<p>（完）</p>
<p>最近超忙，WTP 更新缓慢，非常抱歉。我会尝试写点短小的文章，保证一定的更新频率。也欢迎回复交流，以及提供想讨论的话题。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/18733290.html</link><guid isPermaLink="true">http://acyort.github.io/posts/18733290.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 07 Aug 2015 03:13:21 GMT</pubDate></item><item><title><![CDATA[Sea.js 源码解析（三）]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/876112/4ba141d0-f8ba-11e2-8b6d-4eabd4af4434.jpg" alt="789px-mallard2"></p>
<p>前一篇解析中，关于 undefined 的讨论挺有意思。jQuery 2.x 里，很可能会去掉这种写法。有兴趣的可以去看下<a href="https://github.com/lifesinger/lifesinger.github.com/issues/171">原文评论</a>。</p>
<p>今天继续源码解析，说说 util-lang.js 文件。</p>
<h2 id="语言增强">语言增强</h2><p>util-lang.js 经历丰富，一生大起大落，辉煌时有好几百行，到如今只剩下十几行。</p>
<pre><code>function isType(type) {
  return function(obj) {
    return Object.prototype.toString.call(obj) === "[object " + type + "]"
  }
}

var isObject = isType("Object")
var isString = isType("String")
var isArray = Array.isArray || isType("Array")
var isFunction = isType("Function")

var _cid = 0
function cid() {
  return _cid++
}
</code></pre>
<p>辉煌时的几百行，提供了各种功能，今天暂且不表，以后有机会再说。剩下的功能，明眼人一看就明白，一个是类型判断，另一个 cid 生成器。先聊聊前者。</p>
<h2 id="类型判断">类型判断</h2><p>以 isString 为例，这个故事不太复杂，也不那么简单。各位看官泡杯凉茶，听我道来。</p>
<p>判断一个变量是否字符串类型，最简单直接的写法是</p>
<pre><code>function isString(obj) {
  return typeof obj == "string"
}
</code></pre>
<p>绝大部分情况下，以上代码就够用了。然而</p>
<pre><code>typeof new String("xxx") // => "object"
</code></pre>
<p>当字符串是通过 <code>new String</code> 生成时，typeof 返回的是 <code>&quot;object&quot;</code>，因为 <code>new String</code> 返回的的确是对象。可以参考这篇总结文：<a href="http://blog.alexanderdickson.com/javascript-typeof">JavaScript&#39;s typeof operator</a> 。</p>
<p>但我们才不管是字符串直接量，还是字符串对象呢，我们希望这两种情况下，isString 都能返回 <code>true</code> 。于是</p>
<pre><code>function isString(obj) {
  return typeof obj == "string" || obj instanceof String
}
</code></pre>
<p>上面的写法，曾出现在各种流行类库的早期代码中，一直工作得好好的。直到有人在 iframe 中，写出以下代码</p>
<pre><code>// 在 iframe 中
var foo = new String("bar")

if (top.isString(foo)) {
  // Do some cool things
}
</code></pre>
<p>上面的代码，是调用父页面的 isString 方法，来判断 iframe 中的变量是否字符串。由于 iframe 和 top 中的 String 全局对象并不相等，因此 <code>obj instanceof String</code> 会返回 <code>false</code>，于是 <code>top.isString(foo)</code> 华丽丽地挂了。</p>
<p>做前端真苦逼，但不能因为苦逼就撂挑子不干了。全世界范围内开始为这一「难题」想尽各种办法，后来有神人出山，轻松给出一段代码</p>
<pre><code>function isString(obj) {
  Object.prototype.toString.call(obj) == "[object String]"
}
</code></pre>
<p>此代码一出，天下震惊，引各路类库竞折腰。这代码，可不仅仅解决了 isString 的问题，而是解决了 isXxx 一类问题。</p>
<p>神码原理很简单。简言之，是因为 ECMAScript 就是这么规定的，而各个浏览器都遵守了这一规定，因此就有了这一统天下的写法。有兴趣的，可以看这篇文章：<a href="http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/">instanceof considered harmful (or how to write a robust isArray)</a> 。</p>
<p>下面说说另一端辛酸史。</p>
<h2 id="鸭子判断">鸭子判断</h2><p>在神码出现前，isString 的问题还好说，甚至可以忽略，但 isArray、isFunction、isRegExp 等函数的问题更大，而且很难忽略。我们拿 isArray 来说说。</p>
<pre><code>typeof [] // => "object"
</code></pre>
<p>不要去责怪 typeof，它没错。JavaScript 里，数组就是对象。</p>
<pre><code>[] instanceof Array // => true
</code></pre>
<p>instanceof 还是挺不错的，但和 isString 一样，遇到跨页面操作时，就不行。和 isString 还不一样，对于 isArray 来说，这个问题更严重。（想想为什么？）</p>
<p>于是大家想起了一句谚语</p>
<blockquote>
<p>If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.
如果它看起来像鸭子，会像鸭子一样游泳，也会嘎嘎叫，那么它很可能就是一只鸭子。</p>
</blockquote>
<p>比如题图中的动物，大部分人会猜这是一只鸭子。</p>
<p>人类的大脑，对世界的认识里，往往就是鸭子逻辑。这没什么不对，绝大部分情况下都运作良好。题图中的动物的确是只鸭子，我们的判断是对的。</p>
<p>这样，放到代码里，就有了</p>
<pre><code>function isArray(object) {
  return object != null && typeof object === "object" &&
    'splice' in object && 'join' in object
}
</code></pre>
<p>上面的代码，在 Prototype 类库中真实存在过。直到神码出现后，才改成以下写法</p>
<pre><code>function isArray(obj) {
  return Object.prototype.toString.call(obj) === "[object Array]"
}
</code></pre>
<p>对现代浏览器来说，上面的写法，依旧让各大浏览器引擎的实现者觉得很难受，于是直接有了</p>
<pre><code>Array.isArray([]) // => true
</code></pre>
<p>Array 对象中直接有了 isArray 静态方法。当年的详情：<a href="http://web.mit.edu/jwalden/www/isArray.html">Determining with absolute accuracy whether or not a JavaScript object is an array</a> 。</p>
<p>可惜目前只有 isArray 方法，isFunction、isRegExp 等，依旧得靠我们自己去实现。</p>
<h2 id="放在一起">放在一起</h2><p>看完了前人的辛酸史，我们直接拿来用就好。最简单的拿法是</p>
<pre><code>var toString = Object.prototype.toString

function isObject(obj) {
  return toString.call(obj) === "[object Object]"
}

function isString(obj) {
  return toString.call(obj) === "[object String]"
}

function isArray(obj) {
  return toString.call(obj) === "[object Array]"
}

function isFunction(obj) {
  return toString.call(obj) === "[object Function]"
}
</code></pre>
<p>在绝大部分代码里，上面这样写，已经很完美。但在 jQuery 或 Sea.js 等类库代码里，考虑压缩后的大小，依旧可以改进</p>
<pre><code>function type( obj ) {
  if ( obj == null ) {
    return String( obj );
  }

  return typeof obj === "object" || typeof obj === "function" ?
      class2type[ core_toString.call(obj) ] || "object" :
      typeof obj;
}
</code></pre>
<p>上面是 jQuery 里的写法，有兴趣的可以去研读下。特别是我没提及的 isObject 和 isFunction，这两个历史更曲折悠长，衍生讨论很多。</p>
<p>Sea.js 里，只做了个简单封装</p>
<pre><code>function isType(type) {
  return function(obj) {
    return Object.prototype.toString.call(obj) === "[object " + type + "]"
  }
}
</code></pre>
<p>isType 是个返回函数的函数，这样就可以用来生成 isString 等各种方法。这写法主要是为了减少压缩后的大小，不是为了故意耍酷。耍酷的代码要尽量少，要见一个杀一个。</p>
<p>在 Sea.js 里就这么着了，是因为在 Sea.js 的使用场景下，isXxx 都是内部方法，调用处是可预测的，因此无需像 jQuery 那样考虑各种各样场景。</p>
<h2 id="cid-生成">cid 生成</h2><p>util-lang.js 里，还有一段代码</p>
<pre><code>var _cid = 0
function cid() {
  return _cid++
}
</code></pre>
<p>cid 代表的是 client id，一般还会有</p>
<ol>
<li>uuid - 全宇宙唯一 id 。</li>
<li>uid - 唯一 id 。</li>
<li>cid - 在客户端保持唯一的 id 。</li>
</ol>
<p>在 Sea.js 的场景下，cid 就足够用了。在够用的情况下，尽量保持简单，这是 Sea.js 的源码追求。</p>
<h2 id="最后">最后</h2><p>上面的故事，在 JavaScript 开发中，算是很小很小的插曲。但每每回顾，依旧心生敬畏。 <strong>对正确性和简单性的追求，是优秀程序员心中的「根因」</strong> ，有了这根，才有了繁花似锦的各种代码。</p>
<p>最后，留几个小作业：</p>
<ol>
<li><p>我们知道 <code>typeof new String(&quot;xxx&quot;)</code> 返回 &quot;object&quot;，请问 <code>typeof String(&quot;xxx&quot;)</code> 返回什么？为什么？</p>
</li>
<li><p>为什么我用的是 <code>typeof obj == &quot;string&quot;</code> 而不是 <code>typeof obj === &quot;string&quot;</code> ？</p>
</li>
<li><p>下面这种写法，有什么不妥？</p>
<pre><code>   function isString(obj) {
     return obj.constructor === String
   }
</code></pre>
</li>
<li><p><code>Object.prototype.toString.call(obj)</code> 和 <code>({}).toString.call(obj)</code> 的区别是什么？哪个好？</p>
</li>
<li><p>鸭子判断究竟好不好？那些异常情况，真的需要关注吗？</p>
</li>
</ol>
<p>以上 5 个问题，当回复里都有思考过的回答后，我再更新 Sea.js 源码解析（四）。WTP 的更新频率，取决于大家的参与程度，靠大家了:)</p>
<p>（完）</p>
<p>题图：并不简单的鸭子。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/17375000.html</link><guid isPermaLink="true">http://acyort.github.io/posts/17375000.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Thu, 18 Feb 2016 08:34:03 GMT</pubDate></item><item><title><![CDATA[几部老电影]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/868272/efa5beb4-f789-11e2-9479-71f6317e9deb.jpg" alt="68361562jw1e6zhj6walbj20go0bugmh"></p>
<p>也许是天气太热，也许是因为人老了，最近周末，喜欢宅在在家里找老电影看。</p>
<p><strong>女孩如电影，电影像女孩。</strong> 有些大明星，比如林志玲，对我而言，就如豆瓣电影排行榜的第一名《肖申克的救赎》，虽大名鼎鼎，可无法打动我的心，评价再高，也觉其无趣。</p>
<p>有「趣」很难得。世界的多样性，造物主的顽皮，让地球文明充满生趣。不喜欢的电影，不代表就是烂电影。喜欢的电影，也不代表就是好电影。「好与坏」，是内心的感受，离不开「个体」。世俗的判断，是主流价值观，是大众生活的侧影，但未必与个体的内心感官有很大重合。</p>
<p>以前有位老朋友说， <strong>一个人的成熟，可以看他是否已经从内心去除「对与错」、「好与坏」、「成与败」，要彻底拔除「攀比」之心</strong> ，虽然很难很难。马云成功吗？这句话是一个鱼饵。你尝试去回答它，就意味着你默许了背后的价值观。</p>
<p><strong>「默许」很可怕。</strong> 长在中国的人，大都成为了唯物的无神论者，再去看唯心的一些观点时，往往内心深处已经「默许」了唯心是错的。控制教育，就控制大部分人的思想，政治非常非常禁锢人性、人心。从小的意识灌输，甚至会让长大的你，即便辨识到自己的有些想法可能是错的，但却很难很难再纠正这些从小就形成的想法。</p>
<p>比如科学，绝大部分人的意识里，都「默许」了科学是对的。然而科学只是认识世界的一种方式，科学的背后，依旧是假设、是相信。比如爱因斯坦的狭义相对论，离不开相对性原理和光速不变原理。所谓原理，本质上是我们都相信的假设。 <strong>因为「相信」，世界才发生着改变，在你眼里，更在你心中。</strong></p>
<p>思绪有点飘，回到今天的主题。</p>
<p>首先推荐三部电影：《Before Sunrise》、《Before Sunset》、《Before Midnight》。 <strong>两个人的相遇，最难得的是「谈得来」。 </strong> 男女主人偶遇，很谈得来。从第一部电影，一直谈了 18 年。如果两个人，彼此可以谈童年、谈成长、谈昨天的眼泪、谈明天的梦想、谈油盐酱醋茶、谈性、谈委屈、谈死亡等等，那么不是你爱上 TA 了，就是 TA 爱上你了。什么是情，什么是爱，什么是婚姻，什么是生活，这三部电影，讲述了太多太多。如果你像我一样，已经有点「老」了，去品品这部片吧，去「相信」，就会有改变。</p>
<p>再推荐另三部电影：《推手》、《喜宴》、《饮食男女》。「一家人住在一个屋檐下，照样可以各过各的日子，可是从心里产生的那种顾忌，才是一个家之所以为家的意义。」平淡的生活，让人窒息，甚至想逃离，但因为「顾忌」，而生亲情、爱意。 <strong>生活如烹饪，需要用心投入才能做出好味道。</strong></p>
<p>以上六部电影，以及很多很多电影的背后， <strong>故事之所以成为电影，都是因为「勇气」。</strong> 《爱丽丝漫游仙境》、《疯狂原始人》，在用童话讲述勇气的不易和对生命的价值。「Impossible is possible」 并不是一句空话，之所以成为空话，是大部分人缺少勇气。</p>
<p>偶尔漫步浙大校园，那斑驳的树影，摇曳出一地月光。</p>
<p>（完）</p>
<p> 题图：话在耳边，路在脚下。</p>
<p>最后，做个小调查，类似今天这种「水文」，大家究竟有无兴趣阅读？这些文字，对你的想法、生活，是否有过帮助？如果有过，期待你的回复。感谢。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/17312011.html</link><guid isPermaLink="true">http://acyort.github.io/posts/17312011.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Wed, 24 Aug 2016 10:16:01 GMT</pubDate></item><item><title><![CDATA[说说鸡汤]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/862589/34a656d0-f5f6-11e2-9d05-67e6092f65b6.jpeg" alt="7d1563ab5e27e2d7844cc7d66a211cb358716bff1120f-sf0srz_fw580"></p>
<p>周五总是特别忙，才到家，趁着『中国好声音』开始前还有近一个小时，今天继续侃大山，轻松娱乐为主。</p>
<p>最近本人勤快些，每天发微博也发微信。收到的反馈里不时有以下词汇：</p>
<blockquote>
<p>纯纯的一碗鸡汤呀。
又是心灵鸡汤。
鸡汤……</p>
</blockquote>
<p>首先，从农村长大的我，真的很好奇鸡汤有什么不好的。纯正的农家养大的鸡，做出的汤香甜美味、营养丰富，除了逢年过节，或是大病初愈，抑或坐月子，一般时机都喝不上鸡汤。</p>
<p>微博回复「鸡汤」的人，应该大部分都是城里人，估计只吃过饲料鸡。那鸡熬出来的汤的确难喝，估计也没什么营养。于是借物移情，见到没什么内容的文字，也就喜欢用「鸡汤」来描述。</p>
<p>可是，下面这文字真没什么内容吗？</p>
<blockquote>
<p>上一代人因为很多原因失去了选择的权利，但我们还有很多机会，应该珍视这个时代带来的便利和宽容。虽然有很多束缚，比如家庭、工作等，说白都是价值取向问题，哪些是真正珍视的，哪些是愿意放下的……我愿意像在一条河流中行走那样，经受更多水流的冲击，而不是待在静止的池塘里。<a href="http://t.cn/zQITcQS">http://t.cn/zQITcQS</a></p>
</blockquote>
<p>这是西乔的一段感慨，我稍微缩减了下，好发在微博里。西乔这段文字，是她的亲身阅历和内心感慨。如果这种文字都是「鸡汤」，那央视的节目只能是白开水了。不对，白开水非常非常重要，央视的很多节目只能是汽车尾气。</p>
<p>对于喜欢说「鸡汤」的人，我「恶意」揣度下，也许是因为</p>
<ol>
<li>家里非常有钱，每天吃鲍鱼、老虎肉，对鸡汤的确不屑一顾。</li>
<li>从来没吃过真正的鸡做的汤，自然就不知「鸡汤」真滋味。</li>
</ol>
<p>非常有「钱」的人应该很少很少，像释迦摩尼、乔布斯、马云、王石等人，以他们的阅历，去看西乔的感慨，的确可能会觉得「小儿科」。他们如果给西乔回复个「纯纯的一碗鸡汤」，估计没什么人会反驳。</p>
<p>但芸芸众生，大多凡人。很多说鸡汤的人，估计只是惰性与叛逆使然，是少年期的逆反，是未经思考的懒惰。很多鸡汤，都快变成大家公认的了，比如</p>
<blockquote>
<p>成功离不开勤奋。
好领导要有智慧和爱。
爱就要给她自由、让她幸福。</p>
</blockquote>
<p>这些文字，如果你觉得是「纯纯的鸡汤」，我只想说你要么太年轻还不懂这个世界，要么就是活得太悲剧，很多东西还未有真体味。</p>
<p>你也许会反驳，这些文字是鸡汤，不是因为这些文字没道理，也不是因为自己没体味，而是因为这些文字只讲了道理，但没讲如何才能做到。比如成功离不开勤奋，大家都懂，但关键是，如何做到勤奋？如何做到才是关键问题，不讲关键问题的，都是鸡汤。</p>
<p>如果你持以上观点，我不反驳。但想说，很多很多道理，都是知易行难。很多很多时候，同一个道理的背后，有千万条不同的实现方式。没有人能告诉你怎么做，你在这个宇宙中独一无二，你需要去找到自己的方式。比如爱，每个人对爱的理解都可能不同，无论你想拥有爱，还是付出爱，唯一能给你答案的，只有你自己独一无二的思考，和实实在在的行动。</p>
<p><strong>别轻易说「鸡汤」，特别是对认真的文字。更别养成说「鸡汤」的习惯，那会让你的思维懒惰直至死去。</strong></p>
<p>（完）</p>
<p>题图：每次回到老家，一大碗土鸡炖的鸡汤，都是难忘的美味佳肴。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/17263031.html</link><guid isPermaLink="true">http://acyort.github.io/posts/17263031.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Mon, 14 Mar 2016 19:47:29 GMT</pubDate></item><item><title><![CDATA[工具与效率]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/855359/dcc693c8-f521-11e2-86c9-21658e853b08.jpeg" alt="d9a3182518b78f21659e5e6fa5251801b159c80e178d4-owsuul_fw580"></p>
<p>今天忙，没时间写 Sea.js 源码解析，闲聊点其他话题。</p>
<p>最近冯大辉和陈皓都有发文讨论「加班和效率」，阐述得很明白，我补充说说效率与工具的关系。</p>
<p>很多程序员，包括我自己，都正在迷恋或曾经迷恋过各种工具，最常见的是代码编辑器。经常一有人「亵渎」某个神器，就会引起激烈的口水战，甚至上升到哲学高度……</p>
<p>谈工具与效率之前，想先谈下另一个话题。</p>
<p>最近看到 <a href="http://www.linkedin.com/today/post/article/20130502173937-15454-there-are-only-four-jobs-in-the-whole-world-are-you-in-the-right-one">一篇文章</a>，讲我们这个大千世界上，实际上只存在四种职位。</p>
<ol>
<li><p><strong>生产者（Producers）</strong>。楼下的快餐店员工、公交车司机、去广州的大量打工者、建筑工人、商场服务员等等，这些工作的最大特点就是重复。但这是社会的主流生产者，价值巨大。没有重复工作，现代社会将停止运转。</p>
</li>
<li><p><strong>改进者（Improvers）</strong>。重复工作的特点是流程化、规范化。但所有的流程、规范，都有改进空间。无论是餐饮行业，还是软件开发行业，流程等各方面的改进，都是很多企业的竞争力。改进者经常是资深生产者，经历过大量重复工作的「摧残」后，才往往能做出改进。改进者的价值也很大，不断的改进，可以把一个行业，做到极致。</p>
</li>
<li><p><strong>构建者（Builders）</strong>。构建者不同于改进者，构建者可以将想法变成现实，可以将很多概念设想，变成实体。在互联网行业，很多创业者都是构建者。科技行业也有很多，比如 3D 打印机能从概念变成现实，离不开构建者。这个世界，构建者改变世界，虽然成功者并不多。</p>
</li>
<li><p><strong>思考者（Thinkers）</strong>。思考者富含远见，对未来充满想法，并能给出实际可行的指导。比如爱因斯坦，没有他的思考沉淀，原子能就没这么快走进现实。思考者很少很少。</p>
</li>
</ol>
<p>我们大部分人，都会同时具备多个角色，比如是生产者也是改进者，改进者也是构建者，偶尔我们也会是思考者。</p>
<p>不同的角色，工具对其工作效率的影响有很大不同。</p>
<p>对于生产者来说，好的工具可以极大提高工作效率。比如跨省的快递员，如果有飞机协助，效率直接比电动车高非常非常多。</p>
<p>对于改进者、构建者和思考者来说，工具往往并不会带来工作效率的飞跃。</p>
<p>回到我们程序员，一般刚毕业时，工作前一两年很可能是生产者。这时工具的确很重要，因为这个阶段我们是「码农」，用什么锄头干活，有没有自动打谷机等工具，很影响工作效率。熟练掌握一些顺手的工具，很重要。</p>
<p>工作几年后，工作内容会逐步变成改进者的角色。这时最影响效率的是大脑，学会如何去发现问题，如何总结沉淀经验，如何扩充自己的视野思路等，这些方面，才是影响效率的最重要因素。</p>
<p>如果有幸成为构建者，技术的广度和深度，做事的心态和眼界，环境的认可和人脉等等，是影响事情能否做成的关键。这个阶段，都不再会怎么谈效率。</p>
<p>最后举自己的一个实际例子。Sea.js 的开发，目前介于改进者和构建者之间。这一块的工作效率，核心取决于我对模块化开发的理解，对同类产品实现细节的深入，以及自身编码技能的积累上。目前效率最高的时候，是静下心来，用传统的纸和笔勾勒思路的时候。大概理清楚了思路，用 notepad 也能很快把功能实现出来。</p>
<p>掌握基本的工具是有必要的。比如对于前端开发来说，学会使用至少一个浏览器的开发者工具是必要的。合理的使用，会让整体工作更顺畅。</p>
<p>但不要执迷于工具。工具能将效率提升到某个量级，但很快就会碰触天花板。真正的效率突破，不在工具上。</p>
<p><strong>提高效率的核心，是去找到效率的「梗」。工具只是辅助，加班也只是临时措施。从「梗」上去探寻，才能实现效率的真突破。</strong></p>
<p>（完）</p>
<p>题图：最有效的工具，是大脑。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/17207547.html</link><guid isPermaLink="true">http://acyort.github.io/posts/17207547.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sat, 07 Mar 2015 13:47:15 GMT</pubDate></item><item><title><![CDATA[Sea.js 源码解析（二）]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/847840/00b22ee2-f44a-11e2-8be3-1955a29c4a78.jpeg" alt="8c9a726bf3715831bfabc2d73ed420005f390bfa20c93-f3diwu_fw580"></p>
<p>昨天的文章，原以为没什么人看。毕竟微信公众帐号里，技术类的很少。在微信里阅读技术文章，也会比较累些。不习惯在微信里看技术的，可以点击底部的「原文链接」，所有文章都有同步到我的 GitHub 博客。大家可以选择适合自己的方式阅读。</p>
<h2 id="文件顺序">文件顺序</h2><p>昨天说了整体目录结构，今天来看看 src 目录。</p>
<pre><code>intro.js             -- 全局闭包头部
sea.js               -- 基本命名空间

util-lang.js         -- 语言增强
util-events.js       -- 简易事件机制
util-path.js         -- 路径处理
util-request.js      -- HTTP 请求
util-deps.js         -- 依赖提取

module.js            -- 核心代码
config.js            -- 配置
outro.js             -- 全局闭包尾部
</code></pre>
<p>推荐按顺序依次阅读。这个顺序，在 <a href="https://github.com/seajs/seajs/blob/master/Gruntfile.js">Gruntfile.js</a> 中有指明。 dist 目录下的 sea.js，就是以上文件按顺序合并生成的。</p>
<h2 id="大闭包">大闭包</h2><p>intro.js 和 outro.js 的代码很简单：</p>
<pre><code>(function(global, undefined) {

  if (global.seajs) {
    return
  }
  // 以上代码由 intro.js 提供

  // ...
  // ...
  // ...

  // 以下代码由 outro.js 提供
})(this);
</code></pre>
<p>这个代码组织方式，最初在 jQuery 项目中看见。几个细节：</p>
<ol>
<li><p>global 参数，传入的是全局的 this 值。这样，在浏览器环境中，global 是 window 对象。在 Node.js 环境中，global 则是 node 环境中的 global 对象。这是一个跨平台的兼容式写法。</p>
</li>
<li><p>第二个参数 undefined，由于实参中并没有传入，因此这个参数的值始终会是真正的 undefined。这种写法在类库中很普遍。传说中这样写的好处是，可以防止原生的 undefined 被覆盖掉。比如可以 <code>window.undefined = true</code>，这样所有 undefined 就不再是 undefined 了，很多代码就会出问题。这种说法理论上成立，但在我经历过的所有项目中，还没遇到过哪个前端会闲的蛋疼去覆盖原生的 undefined。Sea.js 中这么写，是为了另一个目的：压缩。如果不用 undefined 参数，undefined 是不会被压缩掉的。变成参数后，就一局部变量了，可以压缩成一个字符，能省不少字节。</p>
</li>
<li><p><code>if (global.seajs) { return }</code> 这句，是为了防止一个页面中有引入多个 sea.js。当有多个引入时，生效的永远是第一个。这种先到者优先的策略，是因为 Sea.js 本身的内部机制。Sea.js 是带状态的，先到者优先策略，可以保证状态的唯一性和一致性，否则会出现竞争，需要额外的逻辑来处理。</p>
</li>
<li><p>大闭包的写法，还有一个「额外的福利」，让单元测试变得简单。大家可以看 <a href="https://github.com/seajs/seajs/blob/master/tests/specs/util/test.html">tests/specs/util/test.html</a> ，在这个文件里，直接用 script 标签依次引入了上面的文件，但没有引入 intro.js 和 outro.js。这样，所有内部方法，自然而然就全部暴露到全局了。单元测试代码中，也就可以直接测试这些私有方法，很便捷。</p>
</li>
</ol>
<h2 id="基本命名空间">基本命名空间</h2><p>理解了大闭包，剩下的文件，就是一个个小模块，提供各种功能。来看 sea.js 文件。</p>
<pre><code>var seajs = global.seajs = {
  version: "@VERSION"
}

var data = seajs.data = {}
</code></pre>
<p>定义了 seajs 变量，并放到全局对象中。其中 <code>@VERSION</code> 是占位符，在构建时，会从 package.json 中读取版本号来替换。</p>
<p>还定义了 data 变量，存放 seajs 相关的各种数据，比如配置信息、事件处理器等。</p>
<p>好了，就这么简单。</p>
<h2 id="最后">最后</h2><p>时间好快，应该又会有人抱怨这第二篇文章太水了。等不及的，可以提前去看看后续的源码。不然就跟着我的节奏来吧，这可是系列文章，我的预期是写上十篇以上。</p>
<p>最后，留两个小练习：</p>
<ol>
<li>为什么 <code>window.undefined = true</code> 能覆盖 <code>undefined</code>，但 <code>window.null = true</code> 却不能覆盖 <code>null</code>？</li>
<li>为什么要把 data 变量放到 <code>seajs.data</code> 上？</li>
</ol>
<p>（完）</p>
<p>题图：面朝大海，春暖花开。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/17149008.html</link><guid isPermaLink="true">http://acyort.github.io/posts/17149008.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sat, 09 Jul 2016 14:21:28 GMT</pubDate></item><item><title><![CDATA[Sea.js 源码解析（一）]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/840467/7fc21882-f373-11e2-85a3-e8885bff283f.png" alt="image"></p>
<h2 id="缘由">缘由</h2><p>重构 Sea.js 2.1 时，有个很重要的目标：让大家都能简单清晰地看明白 Sea.js 的源码。清楚源码，好处很多：</p>
<ol>
<li>遇到使用上的问题，可以快速定位和解决。</li>
<li>可以根据个性需求，定制 Sea.js，比如特定场合下的精简版。</li>
<li>能明白设计和实现细节，可以讨论、改进，为社区做贡献。</li>
</ol>
<p>在深入源码之前，依旧希望各位能「达成以下成就」：</p>
<ol>
<li>有看过「<a href="http://seajs.org/docs/#quick-start">5 分钟上手 Sea.js</a>」</li>
<li>有阅读过至少一遍「<a href="http://seajs.org/docs/#docs">Sea.js 使用文档</a>」</li>
<li>有在实际项目中使用过 Sea.js</li>
</ol>
<p>很多源码细节，都离不开使用场景，只有真实放入场景中，才会清晰明白。下面会从整体结构，到实现细节，逐一阐述 Sea.js 源码中的所有秘密。</p>
<h2 id="目录结构">目录结构</h2><p>Sea.js 的所有代码都通过 GitHub 管理，项目地址：</p>
<blockquote>
<p><a href="https://github.com/seajs/seajs">https://github.com/seajs/seajs</a></p>
</blockquote>
<p>各个目录的内容为：</p>
<pre><code>dist              --  构建好的文件
docs              --  文档
lib               --  Node.js 版源码
src               --  源码
tests             --  测试文件
tools             --  构建工具相关文件
Gruntfile.js      --  grunt 配置
Makefile          --  make 配置
package.json      --  包的配置信息
</code></pre>
<p>还有些文件暂时不用关心，后续有必要时会提及。作为一个有追求的程序员，经常会为各种细节烦恼，目录结构就是其中之一。定目录结构时，经常会纠结：</p>
<ol>
<li><p>源码有必要单独放在 src 目录里吗？还是直接放在根目标就好？很多开源小类库，比如 underscore 等，源码都是直接放在根目录，简单明了。但当源文件非常多时，放根目录会很混乱，因此在 YUI3 等大项目中，源码会分门别类放得比较深。对于 Sea.js 来说，源码文件还是有点多，因此特意建了一层目录来存放。至于 lib 目录，则是 Node.js 模块的标配了，有业界潜规则的，一般直接遵守就好。</p>
</li>
<li><p>docs 目录和 tests 目录也是标配，一个放文档，一个放测试。这两个目录，最常纠结的是，应该用单数（doc、test）还是复数（docs、tests）？这个没有定论，不同社区的习惯不同，即便同一个社区，经常也能看见混用的情形。我个人受 YUI 社区的影响比较大，当初选择了复数形式，现在觉得无论复数、单数，都行。</p>
</li>
<li><p>tools 目前有些特殊，是 Sea.js 历史遗留下来的。Sea.js 一直采用 Google Closure Compiler（简称 GCC） 来压缩。GCC 不光能压缩代码，还能检查代码错误、风格等等。这需要一些配置文件，当初就全放 tools 目录了。最起初，Sea.js 采用 Ant 作为构建工具，Ant 需要用到的一些三方库，也被放在这里。从 2.0 开始，Sea.js 采用 Grunt 来构建，因此这个目录就变成了 Grunt 相关文件的存放地。等讲到 Sea.js 的构建时，会再详细说说。</p>
</li>
<li><p>dist 目录，也是源自 YUI 社区的习惯。在 YUI 的项目里，会有一个 build 目录，用来存放合并压缩好的可部署文件。dist 目录应不应该出现在源码里，一直存在争议。理想主义派觉得，这东东压根儿不应该出现在源码里，源码库应该纯粹简单，只存放源码。实用主义派则觉得，另搞一台服务器存放构建好的文件太麻烦了，无论是对开发者，还是使用者。在硬盘空间如此廉价的时代，牺牲点空间，抹去点洁癖，保留 dist 目录最简单使用。Sea.js 是实用主义派，因此保留了 dist 目录。dist 是 distribution 的缩写，用来存放构建好的可部署文件，也是业界的一个准规范。</p>
</li>
<li><p>其他都是单个文件，其中 package.json 最值得一提，这源自 CommonJS 社区的 Packages 规范。在 CommonJS 的视角，任何项目，都可以看成一个或多个包，每个包都有一些基本信息，这些信息统一放在 package.json 中描述。目前 package.json 已遍布各种开源项目，里面的信息，看一下就明白。</p>
</li>
</ol>
<h2 id="最后">最后</h2><p>本以为目录结构没什么可讲的，一不小心写了这么多，真心有些感慨，看来是我老了。</p>
<p>今天就说这么多，关于目录结构，也希望听听各位的建议，欢迎留言。下一篇会开始讲述 src 目录下的源码。</p>
<p>（完）</p>
<p>题图：那卷起的海浪，是永不逝的花呀。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/17089697.html</link><guid isPermaLink="true">http://acyort.github.io/posts/17089697.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Mon, 07 Sep 2015 10:58:41 GMT</pubDate></item><item><title><![CDATA[什么是开源精神]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/809703/fb7c28d4-ee94-11e2-9cbb-67fb45af1e13.jpeg" alt="1a7a2e64156f21eff0d2b58d2e5caa0272f75d89bb7d-je2cv7_fw580"></p>
<p>在技术嘉年华的「夜聊」中，谈到开源。当时我的表达不够清晰具体，重新梳理如下。</p>
<h3 id="一、开源精神里最重要的，是拿来主义。">一、开源精神里最重要的，是拿来主义。</h3><p>这和大部分人的想法不一样。开源需要贡献、需要付出，但在贡献和付出之前，首要的是去了解、去使用已经存在的。</p>
<p>比如前端工程师，会经常使用模板，天天用着，会有不爽，就会想着自己去写一个模板引擎。直接去写一个没什么不对，但更好的方式是，先去开源社区搜索下同类产品。看自己的想法，是否已经有人实现了，看自己的想法中，哪些是靠谱的，哪些是不太靠谱的。</p>
<p>注意不要去做「纯调研」，除非你已经是这方面的专家，有过体系化的研究和深入。「纯调研」是指，找到类似的产品，浅尝辄止地跑跑 demo，就开始出表格，横向比较优劣。更笨但更有效地做法是，直接去用，比如我们选择了 Handlebars ，在项目真正使用过程中，才能深触地感受到 Handlebars 的优点及其缺点。有过这么一段深入使用经验后，类似的前端模板引擎，比如 Mustache、Hogan 等，也有大概清楚个七七八八了。</p>
<p>拿来主义不光能省去开发成本，还能让你扩充见识和想法，而不会成为井底之蛙还茫然自得。</p>
<h3 id="二、在开源世界里，参与比主导更重要。">二、在开源世界里，参与比主导更重要。</h3><p>遵循拿来主义，可以让你更懂得他人。在这过程中，会有欣赏、感谢，也会有抱怨、想法。</p>
<p>前端 DOM 操作类库中，很多公司包括支付宝都选择了 jQuery。使用过程中，jQuery 的一些 API 的设计非常赞，一些内部实现也非常漂亮。遇到这些让人欣赏的点时，别忘了将自己的感想写下来。那怕是一篇微博，或是跟朋友闲聊时的只言片语，所有这些，都是参与，都是正能量的传播。社区的赞誉，可以给 jQuery 开发团队最大的鼓励。很多坚持，是因为有肯定。</p>
<p>当然，jQuery 只要存在一天，就一定存在不足。比如 data 的 API 变化，比如动画不支持纯 CSS3 方式，还有 Sizzle 也并非那么完美。所有这些「缺点」，你遇到的 bug，你踩过的坑，当你有好的想法或解决方案时，不要忘记反馈给社区。jQuery 有详细的反馈渠道，一般成熟的开源社区都会有。比如托管在 GitHub 上的项目，一般都可以通过 Issues 给社区提交你的想法，甚至可以通过 Pull Request 直接提交你修改过的代码。</p>
<p>参与进去，可以让你更懂得美，懂得感恩之心，懂得回馈之情。这在过程中，你的功力，往往也会大增。不光是技术上的进步，还包括英语读写能力。在人性沟通上，你也会收获很多，这是无价的财富。</p>
<p>拿来主义是开源的第一步，参与则是开源中最漫长的一步。开发自己主导的项目不是必须的，除非你真的有很好的想法，同时刚好有旺盛的精力，否则不要轻易开始，那不代表什么，往往什么也不是。比如 Sea.js，如果 RequireJS 当初能接受我的建议，或者 FlyScript 的作者不退隐江湖，那么就不会有 Sea.js。让一些事情自然地发生，让豆瓣从土壤中发芽。更多地去享受参与，保持简单与自然。</p>
<h3 id="三、开源的是社区，代码仅是很小的一部分。">三、开源的是社区，代码仅是很小的一部分。</h3><p>虽然代码很重要，但在开源项目里，源码只是重要的因素之一。</p>
<p>除了代码，还有文档、测试用例、Issues 管理、版本发布、升级策略、书籍、视频等等。jQuery、Backbone、AngularJS 等成熟项目，成熟的是社区，而不是源码。好的社区，是在 Google 中一搜索，就能找到不少资料。好的社区，是你踩过的坑，经常已经有人也踩过并整理分享出来了。</p>
<p>社区的形成很难，需要核心团队澎湃持久的激情，还需要天时、地利、人和。jQuery 已经形成庞大的社区，但其兄弟 YUI3 的社区，一直不是很成气候。两三年前，我想找 YUI3 的总体设计文档，以及部分组件的设计文档，搜索了很多很多地方，最后给原作者发信，依旧都未能找到我想要的资料。但 jQuery，基本每个细节，都能比较轻松地就找到相关资料和讨论。</p>
<p>没有社区的开源项目，其源码会一直停留在「孤芳自赏」阶段。几年前的 KISSY，还有百度的 Tangram，个人觉得都停留在初始阶段，发展很难。有社区的开源项目，其源码会活起来，会自我不断进化升华。我参与过的一个典型项目是 Backbone，倘若你现在再回过头去看 Backbone 最初提交的代码，与现在的相比，真心会觉得有点挫了。最让人不可思议的是，Backbone 最初很挫的代码，在社区的参与下，在不断的讨论和 Pull Request 中，现在已经演化成非常高质量的代码，甚至每一小段代码里，都能说出一个故事来。我现在依旧非常关注 Backbone 的每一次代码变化，特别是自己修改过的部分。从其他人的修改中，能收获很多很多。</p>
<p>Backbone 的例子，也展示了一个更好的开源方式：有了好的想法，就分享出来，最初的代码展现基本的思路就好，然后通过社区的参与，不断往前演化，让大家都成为开发者，群体的力量远大于个体。个人英雄式的开源方式，已经过时了，就像 sourceforge.net 一样。</p>
<p>最后，知易行难。上面的道理或许大家都懂，真要做到，则是一场修行。Sea.js 和 Arale 也才刚刚上路，旅途中，有西湖惬意的微风，也有沙漠般的烈日当头。好在，选择了，就不怕远。</p>
<p>（完）</p>
<p>题图：可以不解释么？</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/16846559.html</link><guid isPermaLink="true">http://acyort.github.io/posts/16846559.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Mon, 29 Aug 2016 07:41:04 GMT</pubDate></item><item><title><![CDATA[谈谈编码风格与编码规范]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/805593/ec1b4aa2-ee29-11e2-8719-ce1465b7ad15.png" alt="image"></p>
<h2 id="引子">引子</h2><p>上一篇文章提到 <a href="https://github.com/lifesinger/lifesinger.github.com/issues/165">「习惯与变化」</a>，收到了比较有意思的一些反馈：</p>
<blockquote>
<p>我很好奇，如果你的团队中有人以“习惯”的名义打破编码规范会怎样？于我而言，不写四直接写五就是这种感觉，这并不是习惯，而是规范。</p>
</blockquote>
<p>还有一封很长的邮件，截取一二：</p>
<blockquote>
<p>玉伯哥，我经常会为一些事情纠结，比如创建文件夹的时候会想是首字母大写好看呢还是全小写来保持统一呢（Movie，movie，mytest，MyTest），当写程序注释的时候我会想是写 // this function proves that... 好呢还是 // This function proves that...  我不知道我这种对大小写在意的习惯是一种好习惯还是一种坏习惯……</p>
</blockquote>
<p>微博上，一提到编码风格时，往往也会引起腥风血雨，比如</p>
<ol>
<li>JavaScript 语句后面应该加分号吗？</li>
<li>缩进应该用 Tab、四空格还是两空格？</li>
<li>变量应该统一提前声明好还是就近声明？</li>
<li>变量名应该用驼峰风格还是下划线风格？</li>
<li>注释应该采用 JSDoc 风格还是 Markdown 风格？</li>
<li>私有属性约定用下划线开头吗？</li>
<li>函数最好不要超过多少行？</li>
<li>……</li>
</ol>
<p>这类问题不仅在程序员中普遍存在，文字工作者也常常纠结：</p>
<ol>
<li>中英文混排时，中文与英文之间应该加空格吗？</li>
<li>中英文混排时，英文字母后面应该用全角还是半角标点符号？</li>
<li>段落前面真有必要空两格吗？</li>
<li>引号是否应该用 『』和「」？</li>
<li>破折号是一杠还是两杠？</li>
<li>例如、参考等词汇后，究竟需不需要加冒号？</li>
<li>……</li>
</ol>
<h2 id="风格">风格</h2><p>我们日常说的编码规范，经常指的是 Style Guide，正确的翻译是编码风格。</p>
<p>既然是风格，就没有对错。就如现实生活中，我们每个人都有自己的穿着打扮一样。可能有些人打扮土一点，但土就土，并不影响什么。</p>
<p>很有意思的是，风格也没有孰优孰劣。比如郭敬明的打扮，很多人很喜欢，会为其尖叫为其疯狂。但在我看来，郭敬明的相貌让我非常讨厌，这还是男人吗？太锉啦。</p>
<p>别去争辩，喜欢和对错无关，风格亦无高低之别。</p>
<p>编码风格如此，文字排版风格也是一样。</p>
<h2 id="规范">规范</h2><p>风格之外，也有规范。比如穿着打扮，光怪陆离都没问题，但在公众场合不能不穿。规范经常很少很少，但的的确确存在。</p>
<p>对于 JavaScript 语言来说，通用的编码规范基本没有，有的话只有一条：要能运行。除此之外，还会有一些：</p>
<ol>
<li>JavaScript 文件的编码必须是 UTF-8 。</li>
<li>JavaScript 中不能出现 URL 硬编码。</li>
<li>……</li>
</ol>
<p>以上规范都是针对具体公司具体场景下的要求，除了以上这些规范，其他都是编码风格问题。</p>
<p>社会中的规范，是为了维护基本秩序和道德底线。编码规范，则是为了避免错误。</p>
<h2 id="态度">态度</h2><p>程序员经常有个坏习惯：拿到别人的代码，喜欢首先按照自己的风格格式化一下。特别是用 Vim 的程序员，有些 Vim 程序员不光喜欢格式化他人的代码，还会在文件头留下作案凭证。</p>
<p>好的习惯是这样的：</p>
<blockquote>
<p>@agentzh: 给他人的开源项目提交补丁也是一样：尽可能多地做足功课，弄清楚该项目使用的代码风格和测试集的组织，甚至是 git 提交日志的书面格式，尽量让我写的东西酷似项目作者本人写出的东西，这样可以节约对方的时间，是对他的最大尊重。</p>
</blockquote>
<p>这就如我们去朋友家里做客，你可能会很不喜欢朋友家里的装修风格，但你最好不要自带颜料桶去帮朋友重新装修。道理不用多说，对他人的风格我们要懂得尊重，无论是在现实生活中，还是在写代码时。</p>
<p>当然，认可的规范还是得遵守。比如别在公共场合裸奔，别在一个 UTF-8 团队把文件存成 GBK 编码。</p>
<p>对待规范，要严格遵守。对待风格，要懂得尊重。</p>
<h2 id="关键">关键</h2><p>一旦你拥有了开放的心态，一旦你开始懂得去欣赏他人的风格，你会发现世界是五彩缤纷的，你会开始越过一些表象，关注起一些真正值得关注的。</p>
<p>比如一个长得很丑的人，当你不再去看外表时，你会发现某些情况下丑人是会发光的，那种光十分漂亮，比很多帅哥漂亮百倍千倍。你会开始懂得生活，懂得真爱。</p>
<p>编码也如此。不再去纠结四空格还是两空格后，你会看到</p>
<ol>
<li>代码的逻辑抽象是否正确？</li>
<li>代码背后的数据模型是否可以优化？</li>
<li>这段代码是否应该放在这个文件里？</li>
<li>这个模块的职责是否过大？</li>
<li>这个设计模式是否用得太僵硬？</li>
<li>某个功能点是否应该用 CSS 而不是 JS 来实现？</li>
<li>这段代码是否忘了写单元测试？</li>
<li>……</li>
</ol>
<p>一旦你开始能从他人的代码中，去纠结以上各种问题而不是代码风格时，你的功力经常就会大增。牛逼的程序员有个不怎么对外说的秘密：</p>
<blockquote>
<p>去更多地看代码，看优秀的代码。迫不得已才自己去写少量代码。</p>
</blockquote>
<h2 id="最后">最后</h2><p>代码如人，风格的差异很正常，彼此尊重。相爱是灵魂的碰触，别停留在表象。</p>
<p>（完）</p>
<p>题图：Style Guide 无处无在。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/16814905.html</link><guid isPermaLink="true">http://acyort.github.io/posts/16814905.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 12 Jun 2015 04:16:09 GMT</pubDate></item><item><title><![CDATA[习惯与变化]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/782015/716c541c-ea33-11e2-8682-9d5a947cc903.png" alt="image"></p>
<p>（一）</p>
<p>我们都有很多很多习惯。上次去北京，满地铁的人，有七八成在看移动设备。真的需要这么「刻苦努力」吗？我自己也有饭桌上刷微博的习惯，但最近越来越觉得没什么可看的。就如两三年前每天看 Google Reader 一样，当初觉得很好的习惯，现在想想真心有些浪费时间。</p>
<p>年龄越大，往往习惯越多。男朋友会习惯女朋友晴天的伞，丈夫会习惯妻子的饭菜。在形成习惯之前，女朋友打伞的角度，都是一种感动。妻子的一声吃饭了，你会跑过去亲亲老婆。然而很多情感、触动，都会消逝在时间里。习惯是一味可怕的麻醉剂，三年、五年、十年后，你变得只会抱怨妻子的饭菜不好吃，你不再会为妻子的劳碌而感动，你关闭了你的心。</p>
<p>习惯会变味。当心关闭时，甜蜜就会变成漠视与矛盾。</p>
<p>（二）</p>
<p>朋友小胖，几个月前，写 JavaScript 代码是肯定会加分号的。最近几个月，因为协作开发，代码风格逐步变成了默认不加分号。这个习惯的改变，只花了不到两周时间。</p>
<p>更有意思的是，小胖现在看到加分号的代码时，会觉得冗余，甚至有去删除分号的欲念。</p>
<p>习惯就这么悄悄变化着，形成新的习惯。</p>
<p>（三）</p>
<p>WTP 停了好长一段时间。在未停之前，每天晚上都会想着写点什么，甚至有点「上瘾」，不写不舒服。然后有一天，就发现自己能写出的新东西比较有限。有了怀疑，对初衷的怀疑，突然就不想写了，就停了。</p>
<p>白鸦说写作最大的受益者是自己，我觉得有个前提，是不重复。最近很少看微信，「孕峰」、「小道消息」、「骑行西藏」等公众帐号更新挺勤快，可我却没了什么去读的欲念。比如「小道消息」，很多文章，看了标题，大概就能猜出作者会写什么，因为对作者很了解。就像明白一些物理原理之后，再去看很多物理现象时，大多是求证，很难有新东西。</p>
<p>习惯了习惯之后，最难得的是变化，是新东西。</p>
<p>（五）</p>
<p>为什么没有（四）？是你的习惯觉得这样不妥，可是真的没什么不妥。打破习惯会难受，然而人一难受，往往就会发现新东西，就有机会扩大认识。</p>
<p>有一天，我的自行车轮胎破了。修好后，突然间也不想骑。于是我选择了走路去公司，走了快两个小时。天很热很热，汗流浃背。那一路让我想起很多，想起小时候经常走的山路，想起大学期间的勤工俭学，想起在老家庄稼地里的劳作，想起从小的探险梦，甚至想起奥巴马那黑色的皮肤。大热天，太阳照在流汗的脸庞，有一种特真实的感觉。街旁的树，偶尔的树荫，一切平时匆忙而过的，都真切而鲜活。漫漫长路，人顿然渺小。那一刻，人的谦卑是有形状的，梦的坚持也是有颜色的。旅行未必要出去，旅行就在脚下。</p>
<p>习惯需要变化，变化能让你认清自己。</p>
<p>（九）</p>
<p>最近半年，基本养成了六点多起床，十点多前睡觉的「老年人」习惯。这样早晨十点前，有不少安安静静的时间。偶尔也会打破，比如熬到凌晨一两点才睡。但打破的成本很高，会让第二天无精打采，得不偿失。打破是种变化，当变化不能带来新东西时，就不如坚持惯例，培养成习惯。这往往是好习惯。</p>
<p>两三年前，阅读 Google Reader 是我每天坚持的习惯。后来因为墙，也因为家庭、工作忙，就好久好久没去上了。等再去翻阅时，只能望着那 1000+ 而感慨。这个变化挺有意思，更有意思的是，Google 今年还干脆让 Reader 下线了。当很多人还在找替代品时，我却连备份也没去做。过去的习惯就留在过去吧。其实就如微博一样，也如微信一样，哪篇你从来不用，也不会有什么重大损失，只要你的眼和心不停留于安逸满足。</p>
<p>习惯需要变化，也需要坚持。在不断的变化与坚持中，无用的习惯会发霉死去，好的习惯则会烙成性格。性格很难改变你的命，但能影响你的运。</p>
<p>（完）</p>
<p>题图：狗的尾巴是你的手，那条绳子是微信、微博，小心成为习惯的奴隶，再无自由。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，会偶尔推送一些原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/16632814.html</link><guid isPermaLink="true">http://acyort.github.io/posts/16632814.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Thu, 12 Mar 2015 13:35:54 GMT</pubDate></item><item><title><![CDATA[Page Visibility 的 API 设计]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/516911/24a86808-beca-11e2-991e-559d8fe0e4ed.jpg" alt="d1a014252bf0dea30fad26f081ea0643"></p>
<p>昨天的文章发出时，有一处严重错误：</p>
<blockquote>
<p>document.hidden 是布尔值，true 表示页面可见，false 表示不可见。</p>
</blockquote>
<p>有意思的是，这个错误如此严重，但却只有 2 个人发现并回复给我。这个小故事背后，可以看到：</p>
<ol>
<li>人类大脑的纠错本领特别强。如果你到现在还不知道错在哪，说明你的大脑超强。</li>
<li>为什么我会犯这个错呢？是我的问题，还是 document.hidden 设计不人性？</li>
</ol>
<p>人类大脑太复杂高深，在此就不研究了。我们从 API 设计层面来说说一些有意思的事情。</p>
<h2 id="向后兼容">向后兼容</h2><p>为什么要是 document.hidden，而不是 document.visible？如果设计成 document.visible，那么 true 表示可见，false 表示不可见，是多么自然的事情啊。</p>
<p>我们从代码使用上入手来想想。如果设计成 document.visible，很容易写出：</p>
<pre><code>if (document.visible) {
  // 页面可见时的正常逻辑
} else {
  // 页面不可见时，减少点资源占用
}
</code></pre>
<p>上面的代码初看没什么问题，但作为前端，眼尖一点不难发现是有问题的：</p>
<p><strong>在尚不支持 Page Visibility API 的浏览器中，document.visible 的值是 undefined.</strong></p>
<p>为了让代码在老浏览器里也没问题，一种可行的写法是：</p>
<pre><code>// 在老浏览器上，始终判定页面为可见
if ( typeof document.visible === 'undefined' || document.visible === true) {
  // 页面可见时的正常逻辑
} else {
  // 页面不可见时，减少点资源占用
}
</code></pre>
<p>上面这种写法，需要一定经验才能写出来。否则稍不留意，就会掉坑里。</p>
<p>如果设计成 document.hidden，则一切简单多了：</p>
<pre><code>if (document.hidden) {
  // 页面不可见时，减少点资源占用
}
</code></pre>
<p>老浏览器上，document.hidden 取值为 undefined，可以当做布尔值 false 来使用。</p>
<p>这是 API 设计上的一种向后兼容。给任何现有体系增加新接口，都需要仔细考虑场景，做到向前的功能增强，同时向后也能合理兼容。</p>
<h2 id="可扩展性">可扩展性</h2><p>还有一个接口是：</p>
<pre><code>document.visibilityState
</code></pre>
<p>规范中明确可取的值是：visible、hidden、prerender、unloaded</p>
<p>作为枚举值，最大的好处是，可以方便增加新状态。比如页面所在浏览器窗口被其他窗口完全遮挡住时，visibilityState 的取值可以是 obscured. 虽然目前没有这个状态值，但未来如果真的有需求，就可以很方便添加上。</p>
<p>这是 API 可扩展性设计中很小的一个点，优美往往隐藏在细节里。</p>
<h2 id="一致性">一致性</h2><p>最后想说的接口是 visibilityState 属性值发生变化时的事件：visibilitychange 。</p>
<p>为什么不是 visibilityChange? 或 change:visibility 等命名？</p>
<p>命名永远是计算机科学里的两大难题之一。</p>
<p>对于前端来说，下面这些 DOM 事件不应该陌生：</p>
<pre><code>mousedown
mousemove
keypress
keyup
touchstart
dragleave
readystatechange
propertychange
</code></pre>
<p>有了上面这些事件名作为参考，visibilitychange 看着就非常舒服了。</p>
<p>舒服是因为习惯，是因为一致。看似简单的命名，真心不简单。</p>
<h2 id="小结">小结</h2><p>向后兼容、可扩展性、一致性，这是 API 设计时经常要考虑的三个方面。Page Visibility 看似简单，着实不简单。</p>
<p>还有规范化的思维和做事方式，也非常值得我们学习。国内经常只有问题的解决，却缺了规范的沉淀，导致很多问题虽然能解决掉，但却很难传播推广开来。</p>
<p>历史的仓库里，藏着多少泪。</p>
<p>文 / 玉伯</p>
<p>题图：依旧是可爱的龙猫，看不明白高楼大厦里的人类，究竟在忙活什么。</p>
<p>最后，两个小思考留给大家：</p>
<ol>
<li>DOM 事件名，大部分都被设计成小写单词直接拼起来（比如 keypress、readystatechange），这是出于什么考虑？</li>
<li>在 DOM 事件中，Mutation 类事件名，是驼峰风格（比如 DOMNodeInserted），这又是为什么呢？</li>
</ol>
<p>期待大家的思考与回复，成长就在参与中。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/14442226.html</link><guid isPermaLink="true">http://acyort.github.io/posts/14442226.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Mon, 29 Jul 2013 05:54:11 GMT</pubDate></item><item><title><![CDATA[Page Visibility 初探]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/512680/31ae0242-be2f-11e2-8f1f-166a71cc5fa3.png" alt="screen shot 2013-05-16 at 9 47 19 pm"></p>
<p>前天，<a href="http://www.w3.org/TR/2013/REC-page-visibility-20130514/">Page Visibility</a> 正式成为 W3C 推荐规范。为什么需要有这个规范呢？</p>
<h2 id="来由">来由</h2><p>遥想 IE6 时代，就有用户喜欢一次性打开多个页面，然后逐个查看。随着标签页成为浏览器的标配，以及硬件性能的提升，一个用户电脑上同时打开很多标签页，是司空见惯的事情。这带来一些思考：</p>
<ol>
<li><p>处于当前焦点的页面永远只有一个，但用户的屏幕越来越大，处于可见状态的页面往往不止一个。</p>
</li>
<li><p>当页面处于不可见状态时，UI 绘制、更新轮询等代码执行，往往可以停下来或频率变慢，这可以节省 CPU 等硬件损耗。对移动设备来说特别重要，能延长电池续航时间。</p>
</li>
<li><p>但之前各个浏览器并不提供 API 来直接判断页面的可见性。可以通过 <code>window.focus / blur</code> 以及其他一些奇技淫巧来间接判断，但并不靠谱。</p>
</li>
</ol>
<p>有明确的需求，却无法很好地通过代码来实现，这时就诞生了提议、规范。Page Visibility 就是用来规范页面可见性的接口文档，让各个浏览器对外的接口一致。</p>
<h2 id="规范">规范</h2><p>Page Visibility 规范明确了 document 上的两个属性：</p>
<pre><code>document.hidden
document.visibilityState
</code></pre>
<p><code>hidden</code> 是布尔值，<code>true</code> 表示页面不可见，<code>false</code> 表示可见。</p>
<p>要理解 <code>hidden</code> 属性的真正含义，得仔细推敲下『可见』。</p>
<p><strong>根据规范，『可见』是指，页面中至少有部分内容在屏幕上对用户可见。</strong></p>
<p>按照上面的定义，『不可见』理论上应该包含以下各种情况：</p>
<ol>
<li>页面是后台标签页，不是当前标签页。</li>
<li>页面所在浏览器窗口处于最小化状态。</li>
<li>页面所在浏览器的位置不在当前屏幕。</li>
<li>页面所在浏览器被当前屏幕的其他程序完全遮挡住。</li>
<li>用户屏幕处于锁屏或关闭等状态。</li>
</ol>
<p>理想与现实总是存在距离。截至今天为止，各个浏览器对『不可见』的理解还存在差异：</p>
<ol>
<li>在 Chrome 和 Safari 等 WebKit 浏览器下，仅当页面是后台标签页时，页面状态才不可见。</li>
<li>在 Firefox 下，页面是后台标签页，或所在窗口处于最小化状态时，页面状态都为不可见。</li>
<li>Opera 跟 Chrome 一样。</li>
<li>IE10 没测。</li>
</ol>
<p>可以看出，实际使用时，『可见』的含义是指：</p>
<p><strong>『可见』表示，页面是非最小化浏览器窗口的当前标签页。</strong></p>
<p>Firefox 的实现目前最靠近理想情况，Chrome 等浏览器仅考虑了最简单的情况，还有待完善。</p>
<p>一般来说，<code>document.hidden</code> 属性就够用了。但在要求非常高的页面中，需要使用到 <code>document.visibilityState</code> 属性。</p>
<p><code>visibilityState</code> 是字符串，可取以下值：</p>
<ol>
<li><code>hidden</code> 表示页面不可见。</li>
<li><code>visible</code> 表示页面可见。</li>
<li><code>prerender</code> 表示页面正在预处理阶段，还未显示出来。</li>
<li><code>unloaded</code> 表示页面虽然还显示着，但已经要被 unload 了。</li>
</ol>
<p>前两个值不再解释。后两个值很有意思：</p>
<ol>
<li><p>当前标签页处于初始加载，还未渲染出来时，因为是当前标签页，<code>document.hidden</code> 是 <code>false</code>，但这时页面其实并不可见（还未渲染出来），这时 <code>visibilityState</code> 的值就是 <code>prerender</code>，可用来精准判断初始渲染阶段。</p>
</li>
<li><p>类似的，当发生前进、后退、关闭等操作时，虽然当前页面依旧可见，但实际上可以按照不可见来处理了。这时 <code>document.hidden</code> 是 <code>false</code>，<code>document.visibilityState</code> 则是 <code>unloaded</code>。</p>
</li>
</ol>
<p>注意：<code>prerender</code> 和 <code>unloaded</code> 这两个值，目前稳定版 Chrome 和 Firefox 都尚未支持，暂时慎用。以后 <code>visibilityState</code> 应该还可以有更多值，包括当前窗口被其他窗口完全遮挡住的情形，很可能也会用某个值来表示。</p>
<p>除了以上两个属性值，还可以通过 <code>document</code> 的 <code>visibilitychange</code> 事件来监听 <code>visibilityState</code> 的状态变化，这个就不多说了。</p>
<h2 id="实践">实践</h2><p>目前除了 Opera，其他浏览器都需要添加前缀：</p>
<pre><code>document.webkitHidden
document.mozHidden
document.msHidden // IE10
</code></pre>
<p>具体示例代码，可以参考下面两份文档：</p>
<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/User_experience/Using_the_Page_Visibility_API">MDN: Using the Page Visibility API</a></li>
<li><a href="https://developers.google.com/chrome/whitepapers/pagevisibility">Google Developers: Using the Page Visibility API</a></li>
</ol>
<p>（话说 Google 的文档也是大部分抄自 MDN 的，哈哈）</p>
<h2 id="最后">最后</h2><p>别看着看着忘了 Page Visibility 的初衷哦。一般情况下我们用不着，当需要性能优化，特别是要节省资源占用时，通过 Page Visibility 的状态来调整代码执行是非常非常有必要的。</p>
<p>文 / 玉伯</p>
<p>题图：可爱的龙猫，在思考什么是可见的，什么是不可见的。</p>
<p>附语：技术文如我所料，鲜有人回复。某个口头表扬我的同学，也别吝啬文字哦，否则……</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/14406696.html</link><guid isPermaLink="true">http://acyort.github.io/posts/14406696.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Mon, 30 Jun 2014 02:14:47 GMT</pubDate></item><item><title><![CDATA[正则表达式中的向后匹配]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/507193/16053648-bd6a-11e2-9d1f-a291aeb01b23.png" alt="screen shot 2013-05-15 at 10 16 17 pm"></p>
<p>正则表达式可以写出复杂的匹配规则，但涉及到反选等需求时，往往不那么得心应手。</p>
<p>比如下面这段文本：</p>
<pre><code>var s = 
    '　　第一集\n' +
    '　　第一章 始动\n' +
    '　　“小卫啊，上工了。”工头老李看着一个……\n' +
    '　　第二章 突破\n' +
    '　　连续一个星期了，陈卫还是每天……\n' +
    '　　但让陈卫纳闷不已的是，他现在每天……\n' +
    '　　第三章 融合\n' +
    '　　午夜时分，天上挂着一轮明月，……\n'
</code></pre>
<p>想提取其章节信息：</p>
<pre><code>第一集
第一章 始动
第二章 突破
第三章 融合
</code></pre>
<p>可以很容易写出匹配章节信息的正则表达式：</p>
<pre><code>var m = s.match(/^\s*第.+[章集].*$/mg)
</code></pre>
<p>得到的结果是：</p>
<pre><code>[
"　　第一集", 
"　　第一章 始动", 
"　　第二章 突破", 
"　　第三章 融合"
]
</code></pre>
<p>现在问题反过来，如果我们想提取非章节信息，应该怎么办呢？</p>
<p>目前最直接的做法是，依旧是像上面这样，先得到章节信息，然后逐行替换为空，剩下的自然就是非章节信息了。</p>
<p>有没有办法，直接用正则匹配出非章节信息呢？</p>
<p>这就涉及正则的 Lookaround 问题。在未来的 JS 引擎里，我们可以这样写：</p>
<pre><code>(?<=^|(第.+[章集])).*?(?=$|(第.+[章集]))
</code></pre>
<p>上面的正则，将会直接匹配出非章节文本，一步就能满足需求。</p>
<p>Lookaround 是 Lookahead 和 Lookbehind 的统称。对于向前匹配（Lookahead）相信大家都有所接触，包括向前正向匹配（Positive Lookahead）和向前负向匹配（Negative Lookahead），语法是 <code>?=</code> 和 <code>?!</code> 。上面的 <code>(?=$|(第.+[章集])</code> 就是向前正向匹配，表示要匹配的字符后面必须是行尾（$）或者是章节标题（<code>第.+[章集]</code>）。</p>
<p>类似的，理解了向前匹配，向后匹配（Lookbehind）就很容易理解了。<code>(?&lt;=^|(第.+[章集]))</code> 表示的含义是要匹配的字符前面必须是行首（<code>^</code>）或者是章节标题（<code>第.+[章集]</code>）。</p>
<p>中间的 <code>.*?</code> 是非贪婪匹配任意字符。结合上面的 Lookaround，在此表达的含义就是匹配所有非章节信息。</p>
<p>注意：几年前，如果你像我一样喜欢看文本小说的话，上面的正则稍加变化，可以用来干不少事情。当时还在用 Windows，我最喜欢 EmEditor，对正则的支持非常完备。使用 EmEditor 的搜索替换，匹配上无敌的正则，可以很方便提取章节信息、以及去除空白行、将章节缩进重新排版等等。</p>
<p>Lookaround 在正则中非常有用，经常可以利用它来完成一些看似不可完成的匹配，合理利用 Lookaround 能让正则如虎添翼。</p>
<p>Lookaround 参考教程：<a href="http://www.regular-expressions.info/lookaround.html">http://www.regular-expressions.info/lookaround.html</a></p>
<p>当然，在 JavaScript 中你目前只能使用 Lookahead，还无法使用 Lookbehind。期待 ES6 的迅速实现与普及。</p>
<p>文 / 玉伯</p>
<p>题图：可爱的龙猫呀。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/14360604.html</link><guid isPermaLink="true">http://acyort.github.io/posts/14360604.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Mon, 13 Jul 2015 06:29:01 GMT</pubDate></item><item><title><![CDATA[ 发呆]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/501509/e09ff6c6-bc99-11e2-833f-be018f83a23d.jpeg" alt="3315af2c0ffae92c8621c4e08527e6c6a624c04c1c226-tg2hpj_fw580"></p>
<p>忙活了一天，回到家里，吃完晚饭，倦倦地不知道干点啥。</p>
<p>想起 WTP 还没写，打开电脑，看着桌面发了半天呆。</p>
<p>小雕跟爷爷奶奶散步回来，闹腾着要跟老爸洗澡。于是一大一小两个男人洗了个痛快澡。</p>
<p>洗完澡，小雕找了个凉快处，开心地玩今天同学送的玩具。幼儿园不时有同学过生日，便给全班同学送礼物，似乎成了惯例。可怜小雕的生日在暑假，当爸的倒省心了。</p>
<p>老雕倦倦的，电脑上一堆要处理的事情都不想干。继续发呆，继续想着 WTP 写点什么。</p>
<p>思绪温热着，像是杭州最近的天气。</p>
<p>好久没这么没心没肺傻傻地发呆了，空荡的空气里，充满着静谧。</p>
<p>就这么发呆吧，未必要写点什么，不如就写当下的心情。</p>
<p>人最害怕的，有时是确定。</p>
<p>究竟在乎什么？是否有勇气去打破、去追逐？自己的心，是否还能保持年轻？</p>
<p>想不清楚，干脆就不去想了。</p>
<p>纯粹的发呆，简单的快乐，就好。</p>
<p>最后，推荐一本书，大家都知道的，却未必看懂了的一本童话书《小王子》：</p>
<blockquote>
<p>小王子是一个超凡脱俗的仙童，他住在一颗只比他大一丁点儿的小行星上。陪伴他的是一朵他非常喜爱的小玫瑰花。但玫瑰花的虚荣心伤害了小王子对她的感情。小王子告别小行星，开始了遨游太空的旅行。他先后访问了六个行星，各种见闻使他陷入忧伤，他感到大人们荒唐可笑、太不正常。只有在其中一个点灯人的星球上，小王子才找到一个可以作为朋友的人。但点灯人的天地又十分狭小，除了点灯人他自己，不能容下第二个人。在地理学家的指点下，孤单的小王子来到人类居住的地球。</p>
<p>小王子发现人类缺乏想象力，只知像鹦鹉那样重复别人讲过的话。小王子这时越来越思念自己星球上的那枝小玫瑰。后来，小王子遇到一只小狐狸，小王子用耐心征服了小狐狸，与它结成了亲密的朋友。小狐狸把自己心中的秘密——肉眼看不见事务的本质，只有用心灵才能洞察一切——作为礼物，送给小王子。用这个秘密，小王子在撒哈拉大沙漠与遇险的飞行员一起找到了生命的泉水。最后，小王子在蛇的帮助下离开地球，重新回到他的B612号小行星上。</p>
<p>童话描写小王子没有被成人那骗人的世界所征服，而最终找到自己的理想。这理想就是连结宇宙万物的爱，而这种爱又是世间所缺少的。因此，小王子常常流露出一种伤感的情绪。作者圣埃克絮佩里在献辞中说：这本书是献给长成了大人的从前那个孩子。</p>
</blockquote>
<p>文 / 玉伯</p>
<p>题图：每个人心中，都住着一位小王子。</p>
<p>补充：WTP 会保持每周 1-2 篇技术文，其他就随便写写，大家也随便看看就好。想每天看技术的，可以系统地去看书，比如《JavaScript 权威指南》。如果有什么学习上的问题，可以微信上直接回复，我会尽量回答。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/14309573.html</link><guid isPermaLink="true">http://acyort.github.io/posts/14309573.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Wed, 14 May 2014 08:11:08 GMT</pubDate></item><item><title><![CDATA[怀念晓旭]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/495673/109a9ac4-bbce-11e2-9603-a74129c8adca.jpeg" alt="62e7dca87b39effb751451befdcb009f52d9721d73c5-mweefs_fw580"></p>
<p>6年前的今天，87版《红楼梦》林黛玉的饰演者陈晓旭悄然离去。为了纪念心中的她，傍晚去浙大玉泉校区跑了三个圈。</p>
<p>喜欢陈晓旭，就像喜欢林黛玉一样，说不出为什么，就是喜欢。</p>
<p>能说出为什么的喜欢，都不是真的喜欢。</p>
<p>喜欢是种很真很纯的感觉，是任何回忆里，都找不到来由，却充满记念。</p>
<p>入戏深处，戏是人生，人生是戏。</p>
<p>累了。让文字停止，让思绪入梦。</p>
<p>文 / 玉伯</p>
<p>题图：这张图并不是陈晓旭最漂亮的一张，但却是最让我凝视的一页。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/14260214.html</link><guid isPermaLink="true">http://acyort.github.io/posts/14260214.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Wed, 17 Dec 2014 08:14:29 GMT</pubDate></item><item><title><![CDATA[CSS 学习之我观]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/491649/d0dca6fa-ba49-11e2-8a61-6f546d132e75.jpeg" alt="710319d981adaa47b423519a689727dd1f9e774b3f74e-ieucos_fw580"></p>
<p>winter 今天发了一篇博文：<a href="http://www.cnblogs.com/winter-cn/archive/2013/05/11/3072929.html">CSS 布局（一）</a></p>
<p>个人觉得，让前端工程师从浏览器的技术细节上去了解 CSS 的内部实现，对 CSS 技能的掌握并不会有太多帮助。</p>
<p><strong>CSS 是一门感性的语言，从技术上去深挖 CSS 在浏览器上的实现原理（How），个人觉得还不如从设计上去思考为什么会有这些现象（Why）。</strong></p>
<p>比如 winter 今天文章中提及的几个概念，从设计上来理解的话，是很简单的，同时不需要涉及 XFC 等渲染引擎实现者才需要关心的名词。</p>
<h2 id="最基础的">最基础的</h2><p>CSS 的基本功能是排版布局，我们拿出一张报纸，或一本书，会找出一些基本元素：</p>
<ol>
<li>标题</li>
<li>段落</li>
<li>图片</li>
<li>加粗的文字</li>
<li>……</li>
</ol>
<p>稍微抽象以下，以上各种元素可分为两类：块元素（标题、段落等）和行内元素（图片、粗体等）。</p>
<p>排版布局，首先要搞定的是多个块元素的排列。段落是个典型的块元素，多个段落之间，一般一段一段往下排就好了。这就是块元素排列的默认规律。（winter 用 BFC 解释了半天-.-）</p>
<p>块元素默认垂直竖排，对应的，行内元素默认水平横排。</p>
<p>基础概念就这么简单。</p>
<h2 id="复杂一点点">复杂一点点</h2><p>在实际需求中，两个块元素有时也需要横向并排。这就引出了浮动（float）概念。通过给块元素设定宽度，并指定浮动方向，就可以实现块元素的横向并排。当然，还有很多其他技巧来实现块元素的横向并排。但只要你从感性上理解了「浮动」和「定位」的画面，其他一些布局技巧，比如负边距等，就都是 hack for fun 了。</p>
<p>HTML 有很好的包容性，比如允许块元素和行内元素混排，这时可以直观的理解成浏览器自动创建了一些匿名块元素来包裹行内元素。这种感性的图像化理解，对设计师非常友好。</p>
<p>overflow 也是解决非常实在的问题：文字溢出时，怎么处理。并不需要扯上什么 BFC 才能理解。</p>
<p>再举一个列子：「外边距合并」。基本规律是，在同一个布局层级里，当两个外边距相遇时，会「大鱼吃小鱼」，合并成一个。与其去研究浏览器是怎么实现的，个人觉得不如从设计层面上想想为什么会有这个需求：</p>
<p><img src="https://f.cloud.github.com/assets/97227/491639/c0c0895e-ba48-11e2-859f-6ab0b819fdbb.png" alt="screen shot 2013-05-11 at 10 23 32 pm"></p>
<p>从上图中可以看出，外边距合并，是为了让排版看起来更一致、更舒服。有了这层认识，不合并才奇怪呢。同时也能理解为什么水平方向上，也需要存在外边距合并。一切为了排版更美观。</p>
<p>其他不多说，CSS 的绝大部分概念，都可以从设计的需求上去理解。用设计的眼光去看很多技术细节，对 CSS 来说，更自然、舒服，个人觉得也更容易理解。</p>
<h2 id="最后">最后</h2><p>重复下我的观点：</p>
<p><strong>CSS 是一门感性的语言，从技术上去深挖 CSS 在浏览器上的实现原理（How），个人觉得还不如从设计上去思考为什么会有这些现象（Why）。</strong></p>
<p>这与是学院派还是实践派没关系。我不是学院派，也不是实践派。作为前端，很喜欢 <a href="https://speakerdeck.com/josephj/f2e-the-keystone">F2E, The Keystone</a> 中的一张图：</p>
<p><img src="https://f.cloud.github.com/assets/97227/491579/697b8882-ba3f-11e2-9173-18490f900492.png" alt="screen shot 2013-05-11 at 8 53 48 pm"></p>
<p>不排斥在上图的技术部分深挖，但个人觉得，对于前端来说，要把技术做好，设计部分也非常非常重要。</p>
<p>最后，致所有希望我和 winter 吵起来的观众，非常遗憾地告诉你们：我很欣赏 winter，就和 winter 也欣赏我一样。我更希望你也加入进来和我们一起把前端做好做精，而不要仅仅是观众。舞台永远不属于观众。</p>
<p>文 / 玉伯</p>
<p>题图：爱因斯坦的一句名言，非常耐人寻味。你可以滚上去再看一下，然后将你的翻译回复给我。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/14222425.html</link><guid isPermaLink="true">http://acyort.github.io/posts/14222425.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Wed, 04 Nov 2015 00:16:04 GMT</pubDate></item><item><title><![CDATA[就近原则浅探]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/481073/869baa3a-b848-11e2-97c1-cd0697b0fa05.jpg" alt="6afd7d1b0d410102fc1bd81635963e62"></p>
<p>这篇文章来自我同事闲耘的投稿。闲耘在前端监控、代码质量等方面颇有研究。下面是全文，欢迎探讨。</p>
<hr>
<h2 id="引子">引子</h2><p>上周有位同事在周报里分享了段 for 循环的「好代码」：</p>
<pre><code>for (var i = 0, item; item = list[i]; i++) {
    // 将 ltem = list[i] 当做条件判断语句
    // 当 i 下标溢出时，返回 undefined，循环结束
    // 居然省了一个变量呢～
}
</code></pre>
<p>这位同事是看了 jQuery 里类似下面这种用法之后做的这个分享：</p>
<pre><code>// If no nodeType, this is expected to be an array
for ( ; (node = elem[i]); i++ ) {
    // Do not traverse comment nodes
    ret += getText( node );
}
</code></pre>
<p>jQuery 还有不少地方使用这种用法，也有不少地方是使用传统的 length 来循环。</p>
<p>jQuery 这样用有其特定场景，需要正视。我回复说：</p>
<ol>
<li>如果数组项中有 0, false, null, undefined, &quot;&quot;，代码就出 bug 了。</li>
<li>好像没看到少了变量，一定要少的话，典型的 for 写法也可以少（但是不推荐）。</li>
<li>代码是写给人读的，顺便给机器执行。</li>
<li>另外，对 list 本身有操作，尤其是长度有影响的操作要特别注意。</li>
</ol>
<p>我个人推荐下面这种写法：</p>
<pre><code>for(var i = 0, l = list.length; i < l; i++) {
    // ...
}
</code></pre>
<p>小提示：使用 Vim snipMate 的同学可以参考 <a href="https://github.com/hotoo/snipmate.vim/blob/master/snippets/javascript.snippets#L56">javascript.snippet</a> 这个代码片段模板。</p>
<p>好了，使用溢出判断数组循环结束的讨论到此就结束了，但是好戏还在后头。</p>
<p>由于 JavaScript 作用域的问题，有同学建议说将 <code>i</code>, <code>l</code> 变量定义在 <code>for</code> 循环之外。于是进入另一个话题。</p>
<h2 id="如何定义块级作用域中使用的变量？">如何定义块级作用域中使用的变量？</h2><p>持有变量应前置定义观点的同学，估计有不少是受了《JavaScript 权威指南》或其他权威著作的影响。</p>
<p>《JavaScript 权威指南》第 4 章 4.3.1 小节详细分析了块级作用域中变量定义的问题。</p>
<p>由于 JavaScript 只有函数作用域，没有块级作用域，因此在 <code>for</code>、<code>if/else</code>、<code>do/while</code>、<code>switch/case</code>、<code>try/catch</code> 这些块中定义的变量，实际在块之外也可以使用。</p>
<pre><code>function functionScope() {
  for (var i = 0, l = 5; i < l; i++) {
    var blockVariable = i;
  }
  alert(i); // 5
  alert(blockVariable); // 4
}
</code></pre>
<p>上面的代码，在 for 这个块之中定义的变量，在 for 之外也可以使用。这在其他支持块级作用域（如C / C++ / Java）的编程语言中是无法理解，甚至不可接受的。</p>
<p>这是 JavaScript 设计的 bug，书中作者建议将所有变量声明集中放置在函数开头，说这是个好习惯。</p>
<blockquote>
<p>This example illustrates why it is good programming practice to place all of your variable declarations together at the start of any function.</p>
</blockquote>
<p>JavaScript 传教士老道也有<a href="http://javascript.crockford.com/code.html#variable declarations">类似的教诲</a>：</p>
<blockquote>
<p>The var statements should be the first statements in the function body.</p>
<p>...</p>
<p>JavaScript does not have block scope, so defining variables in blocks can confuse programmers who are experienced with other C family languages. Define all variables at the top of the function.</p>
</blockquote>
<p>他们的理由是，既然在块级作用域之内定义的变量可以被块级作用域之外使用，那么就应该把变量定义在块级作用域之外，让它们看起来和它们实际的作用域表现一致。</p>
<pre><code>function functionScope() {
  var i, l = 5, blockVariable;

  // more codes ...

  for (i = 0; i < l; i++) {
    blockVariable = i;
  }
}
</code></pre>
<p>但是这个我稍微持不同的观点 ：）</p>
<p>实际上我们定义 <code>i</code>, <code>l</code> 是为了给 <code>for</code> 用的，JavaScript 解释器在执行的时候可以给块级作用域外面用，不代表就应该定义在外面。</p>
<p>定义在外面给人的暗示是这个变量是给整个 function 用的，而不只是 for 循环，就会给人「在外面用也没关系」的错觉。但这其实不是我们定义 <code>i</code>, <code>l</code> 的本意。</p>
<p>另外变量前置声明，会导致变量声明、定义和使用之间分离，变量含义自我解释性被削弱，而且容易造成误清理、或遗漏清理变量的问题。</p>
<p>对于 JavaScript 的这个糟粕，让人来适应机器的问题而修改代码，甚至改变本性习惯，和另一个使用逗号连续定义变量的话题是何其的相似。</p>
<p>为什么不让机器来适应人，在编辑器中编辑、或在编译器中编译 JavaScript 代码时，发现块级作用域之外有使用块级作用域内部定义的变量时，给予恰当的警告。这是否更合理呢。</p>
<p>如果遵循权威的教诲，把变量定义在函数前面，编辑器和编译器都没有办法帮我们了。</p>
<p>我认为：</p>
<ol>
<li><p>定义在块级作用域之内的变量不应该被块级作用域之外使用。</p>
</li>
<li><p>如果被块级作用域之外使用了：</p>
<ol>
<li>要么这是一个错误的用法，会带来隐患。人、编辑器、编译器、甚至将来的解释器可以发现这个问题并给出警告。</li>
<li>或者确实有这样的使用需求，那么这个变量应该被声明在块级作用域之外。</li>
</ol>
</li>
</ol>
<p>所以我比较认同 <strong>就近原则</strong> 这种更合理、更人性的风格。</p>
<ul>
<li><strong>文档、注释应尽可能的靠近代码。</strong></li>
<li><strong>变量声明应尽可能的靠近变量使用。</strong></li>
<li><strong>应尽量限制变量的作用域。</strong></li>
</ul>
<p>文 / 闲耘
原文地址：<a href="http://blog.hotoo.me/post/block-scope-variable-defined.html">http://blog.hotoo.me/post/block-scope-variable-defined.html</a></p>
<hr>
<h3 id="玉伯闲聊">玉伯闲聊</h3><p>就近原则挺有意思，这背后更一般性的原则我觉得是『自然法则』：</p>
<p><strong>写代码要自然，要回归本性。越是新手靠直觉写的代码，往往越是好代码。</strong></p>
<p>比如</p>
<pre><code>var a = 1;
var b = 2;
</code></pre>
<p>比</p>
<pre><code>var a = 1, b = 2;
</code></pre>
<p>更自然。再比如</p>
<pre><code>for (var i = 0; i < arr.length; i++) {
}
</code></pre>
<p>比</p>
<pre><code>for (var i = 0, len = arr.length; i < len; i++) {
}
</code></pre>
<p>更自然。</p>
<p>何谓自然？每个人都有不同理解。上面纯粹只是我觉得更自然、更优。</p>
<p>Code style 有时就像 life style 一样，永远不要贬低其他人的生活方式，但你可以选择与自己内心 style 一致的人一起生活。</p>
<p>最后，你持什么样的观点呢？</p>
<p> 题图：眼睛是窗口，透过它能看见美丽的风景，用心去越过边界。</p>
]]></description><link>http://acyort.github.io/posts/14130403.html</link><guid isPermaLink="true">http://acyort.github.io/posts/14130403.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 27 Jun 2014 01:18:41 GMT</pubDate></item><item><title><![CDATA[推荐几个微信公众帐号]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/478116/e35d74b2-b7f1-11e2-90f9-f3da5cf67b94.jpeg" alt="56cf47509f0ee08cc2a7987310e0baa61165849d7902-9xio0v_fw580"></p>
<p>今天回来比较晚，与一个朋友聊了很多。夜黑黑的，还有很长的路要走。</p>
<p>推荐几个公众帐号：</p>
<ol>
<li><p>「程苓峰-云科技」，微信号：yunkejiAPP。这是我最喜欢的公众帐号，没有之一。从这个帐号里，得知了净空法师、奥修等。佛学类的心得感悟，经历过才懂得、才珍惜。这个帐号的互联网类分析文章也挺好，时常能遇见不错的思考、见解。</p>
</li>
<li><p>「美剧英语每日一句」，微信号：followmeapp。每天精选一句美剧中的经典台词，比如今天的是「Oh! My God! You&#39;re breathtaking! 天哪！你真是美的令人窒息！」自从订阅以来，我发现日常英语词汇不知不觉增长了不少。</p>
</li>
<li><p>「在线英语听力室」，微信号：tingroom。与上面的每日一句类似，但内容更丰富，挑战更大。适合每天花半个小时静下心来学习。</p>
</li>
<li><p>「骑行西藏」。这个太有名了。我原来订阅着没怎么看，最近静静地翻阅这些游记，看着一张张美丽的图片，心中莫名的宁静。</p>
</li>
</ol>
<p>就这些。还订阅了「小道消息」、「Mac 技巧」、「鬼脚七」、「道哥的黑板报」等，最近看得越来越少。信息有毒，去读一百篇文章，往往还不如自己写一篇有收获。</p>
<p>梦安。</p>
<p>题图：幸福是简单的拥抱。</p>
<p>文 / 玉伯</p>
]]></description><link>http://acyort.github.io/posts/14106074.html</link><guid isPermaLink="true">http://acyort.github.io/posts/14106074.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Wed, 25 Jun 2014 09:31:05 GMT</pubDate></item><item><title><![CDATA[缝隙处的思考]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/471788/67a53a96-b722-11e2-8cda-22a46edd54b5.png" alt="screen shot 2013-05-07 at 10 28 00 pm"></p>
<p>昨天给大家提了 5 个问题：</p>
<ol>
<li>你最快乐、愉悦的是什么？</li>
<li>你最忧虑、害怕的是什么？</li>
<li>你对爱情、婚姻的理解是什么？</li>
<li>究竟什么是爱？</li>
<li>你给活着赋予了什么意义？</li>
</ol>
<p>微信上收到了不少有意思的回复，感谢大家的参与。</p>
<p>同事说我最近又思考人生了，我也不知道为什么。最近遇到一些事情，有朋友的，也有自己的，碰巧大都是关于心的。</p>
<p>经常遇到什么困扰，就会出现什么样的机缘。比如最近阅读到几本书《重新认识你自己》、《觉醒与冥想》，以及奥修的《道德经心释》，还有净空法师的《大乘无量寿经》视频。</p>
<p>这种种文字、语音、思考，像是瀑布一样倾洒而来，我茫然痛苦，又有点欣喜若狂。我提笔想写一篇长文，写写删删，感觉语言是如此无助无力。</p>
<p>这些天我行走着，在鸟语花香的杭州，也是钢筋混凝土的城市，我逐步看到了自己的心，像剥洋葱一样剥开一层层隐藏，那赤色的充满欲望的心，是那么恐怖又宁静。</p>
<p>那赤色的心充满着欲望，有对自由的向往，也有对金钱的渴望。这是一锅滚烫的沸水，翻涌着像血一样的颜色，滋滋冒着的热气，一不小心就会把自己甚至他人烫伤。</p>
<p>真正快乐的回忆里，是那些没有欲望的时光。和一个欣赏的女孩相处，她在看着点什么，你也在看着点什么，没有话语也没有眼神交流，只有心与心的相处，空气中流动的就是快乐。真正的快乐源自毫无动机的热情，源自本性之心的悸动。那种热情里，我们可以通宵写着代码，时间都会为这种简单而驻留。快乐像是早上升起的太阳，它就是简简单单的升起来呀，并不为了什么。这种快乐，没有因，也不需要果。</p>
<p>忧虑是因为放不下。忧是担心不好的事情会发生，虑是怀疑好的事情不会发生。害怕源自你的内心渴求未来。你很热，一阵凉风吹过时，那片刻的惬意就是永恒。「一时」比过去、现在和未来都重要。「一时」不是时间，是个地方。你找到了那个地方，就远离了忧虑。那个地方就在你心里，无需也无法刻意去寻找，只有放下，才能抵达。</p>
<p>爱不是责任（duty），duty 形似 dirty，是个很脏的词。没有谁对谁负有责任，责任意味着负担或强加，经常会让真正的爱变味。爱是反应（responsibility）。responsibility 的原始含义是 the ability to respond. 爱是心与心之间的关注与交流。她心情不好，你会感受到并做出适当的反应。充满爱时，你并不需要在她郁闷时刻意哄她开心，你的关注和反应本身，就会让对方的心逐步平静。爱是两个人静静地坐着，一起吃饭。爱是你种下一棵植物，清晨叶子凝聚的露水中，能映出他的眼神。</p>
<p>婚姻中最重要的是沟通。大脑中充满着理性与谎言。大脑与大脑的沟通，是最低层次的沟通。永远不要在婚姻中引入太多大脑与大脑的沟通，这带来的是隐瞒与裂痕。在婚姻中要像爱情一样，享受「坠入」（fall in love）。「坠入」是指从大脑到心灵。和谐源自心与心的相处。</p>
<p>幸福的婚姻中不会谁为谁牺牲，也不会是为了子女的延续。爱情是两颗心的互相吸引，婚姻是两颗心的互助成长。那空旷的孤野里，每个人都是一个不甚完美的圆环。爱情像是枝上的小鸟，你的鸣叫吸引了另一只小鸟，彼此相呼相应、渐飞渐近。婚姻是枝头的巢穴，有你有我，风雨与共。婚姻是两颗心灵的互相完善，彼此抚慰，彼此坚强。是两颗心的互相营养，彼此成长。</p>
<p>每一个思考活着意义的人，最终都将碰触一个无法回避的答案：活着没有意义。这个答案并不残忍，残忍的是知晓这个答案后必须做出选择：死去还是继续活着？有人选择自杀或从此厌世，也有人选择勇敢的活着。不再继续追寻活着的意义，而是去积极给生命赋予意义。时刻保持住一颗觉醒的心，保持住虚无，也保持住热情。放下忧虑，你会拥有平静与快乐，保持住毫无动机的热情，你会懂得爱。真实、真诚地面对自己，生命就会绽开奥秘之花。</p>
<p>最后，「活得尽致一点，活得强烈一点，活得危险一点，那是你的生命，不要因为别人教给你的任何愚蠢的观念而将它牺牲掉。」</p>
<p>文 / 玉伯</p>
]]></description><link>http://acyort.github.io/posts/14051644.html</link><guid isPermaLink="true">http://acyort.github.io/posts/14051644.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Wed, 15 May 2013 12:26:19 GMT</pubDate></item><item><title><![CDATA[层展现象]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/433647/7fab83e8-aedf-11e2-984d-6ac10dbaac21.png" alt="Screen Shot 2013-04-27 at 10 09 13 AM"></p>
<p>「知乎」是个好地方，经常会去逛一逛。今天在知乎上读到一个话题：<a href="http://www.zhihu.com/question/20783888">「基础物理研究真的是整个科学发展的根基吗？」</a></p>
<p>这问题在学生时代也困扰过。自己从事的是基础物理研究，因此特别喜欢「基础物理是根基」的说法。人呀，都如此。都会在某些阶段，特别想证明、强调自己所从事工作的重要性。</p>
<h2 id="还原论">还原论</h2><p>「基础物理是一切自然学科根基」的说法，可以用下面这张未必正确的图来说明：</p>
<p><img src="https://f.cloud.github.com/assets/97227/433558/f064130a-aed7-11e2-984e-87bdf0d9da48.png" alt="Screen Shot 2013-04-27 at 9 14 46 AM"></p>
<p>根基说法也叫「还原论」，即一切自然科学，都可以还原成某个基础学科。比如上图中，各种学科的起点，都是「万能理论」。</p>
<p>「还原论」的想法，为自然科学的发展做出了重要贡献，特别是对物理学本身的发展。</p>
<h2 id="层展论">层展论</h2><p>但是越来越多的现象表明，「还原论」未必能解释所有问题，即便我们拥有了「还原论」的终极梦想「万能理论」，依旧有很多很多自然现象无法解释。</p>
<p>引一段 L.P.Kadanoff 的讲话：</p>
<blockquote>
<p>我在这里要反对还原论的偏见，我认为已经有相当的经验表明物质结构有不同的层次，而这些不同层次构成不同群落的科学家研究的领域，有一些人研究夸克，另外一些人研究原子核，还有的研究原子、分子生物学，遗传学，在这个清单中，后面的部分是由前面部分构成的，每一个层次可以看成比它前面的好像低一些，但每一个层次都有新的、激动人心的、有效的、普遍的规律，这些规律往往不能从所谓更基本的规律推导出来。从最不基本的问题向后倒推，我们可以看到一些重要的科学成果。像门德尔的遗传律与 DNA 的双螺旋结构，量子力学与核裂变，谁是最基本的？谁推导谁？要将科学上的层次分高低的话，往往是愚蠢的，在每一层次上都有的普遍原则中，都会出现宏伟的概念。</p>
</blockquote>
<p>「层展论」的核心观念，可以用凝聚态理论学家 P.W.Anderson 的一段话来概括：</p>
<blockquote>
<p>将一切事物还原成简单的基本规律的能力，并不意味着我们有能力从这些规律来重建宇宙，当面对尺度与复杂性的双重困难时，构筑论的假设就被破坏了。大量的复杂的基本粒子的集体，并不等于几个粒子性质的简单外推。</p>
</blockquote>
<p>这与凯文·凯利在『失控』一书中的观点非常相近：无论对单个蜜蜂的研究多么深入，都无法解释蜂群的行为。</p>
<p>以上是回忆，回忆的背后，是对现状与未来的思考。</p>
<h2 id="程序员心中的底层梦">程序员心中的底层梦</h2><p>我感知到的很多程序员，心中都或多或少有一些底层梦：想深入研究计算机的基础知识，比如编译原理、网络协议、硬件驱动等等。</p>
<p>这没什么不对，对底层的必要了解非常有必要。</p>
<p>然而，会看到程序员圈子里，也有很强的「还原论」群体。在这批人眼中，只要把基础知识深深掌握好后，一切其他上层语言、方案等都是手到擒来、小菜一碟。</p>
<p>程序员圈子里的「还原论」，大部分情况下都是对的。</p>
<p>但就如经典力学头上的两朵乌云一样，随着 IT 产业的迅猛发展，「还原论」头上已经飘出了很多乌云。</p>
<p>很多兴趣广泛的传统程序员，除了把 C++ / Java 等钻研得非常精透，也会跟随潮流，开始学习前端开发技能，比如 JavaScript / CSS / HTML 等。但是真让他们去写一个页面，经常只能差强人意，很难做得很好。</p>
<p>这究竟是为什么？</p>
<p>回到前面讨论的「展层论」，一切变得非常容易解释：</p>
<p><strong>计算机学科也是分层的，上层部分需要基于底层构建，但每一层都有新的、激动人心的、有效的、普遍的规律，这些规律往往不能从所谓的基本规律推导出来。</strong></p>
<p>这应该是一个常识，但我们却经常没有看到。各行各业皆如此。分层次没错，但给层次分高低，则往往是愚蠢而狂妄的。</p>
<h2 id="最后">最后</h2><p>这篇文章最后的结论是常识，或者说是基本观念，但真的对吗？类似的，还有因果律。无论是自然学科，还是佛学，都赞同任何一种现象或事物都必有其因。</p>
<p>「层展论」、「因果律」等等观念，究竟是怎么回事？是否这些观念本身，只是人类愚昧且狂妄的投影？</p>
<p>你是怎么想的？</p>
<p>文 / 玉伯</p>
<p>题图：那璀璨的星空深处，是否有我的爱？</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/13715071.html</link><guid isPermaLink="true">http://acyort.github.io/posts/13715071.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 12 Aug 2016 06:15:54 GMT</pubDate></item><item><title><![CDATA[疯狂原始人]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/428283/a500ccf8-ae02-11e2-898d-3a695ffa3853.jpg" alt="p1867084027"></p>
<p>正在上映的一部梦工厂电影，强烈推荐。</p>
<p>每个人心中、现实中都有很多洞穴，里面可能不舒适。但大家都这么过，看起来很安全很安全，而且很可能就是因为这些洞穴才让许多人活下来。于是大部分人就躲在洞穴里，一辈子一辈子地过下去。</p>
<p>莫名悲哀、无奈……
然而，环境正在发生巨变。</p>
<p>精彩的情节，笑点不断，又有瞬间让人鼻酸落泪的场景。
网上评论说，这部动画，让 2012 年的动画黯淡无光。</p>
<blockquote>
<p>No one can stop, what has begun
You must believe when I say
　 
没有人可以阻止已经开始的东西 
你一定要相信我说的话</p>
<p>有一种很深的感情在心底 
你可以让它成为你的向导
去寻找，寻找你的路 
我们没有时间去浪费
需要一个坚定的信念 
然后飞 飞向远方</p>
</blockquote>
<p>文 / 玉伯</p>
<p>附录：今天去 QCon 北京会场，白天晚上估计都没时间了，因此「水水」地发了这篇 WTP 文章，不过电影真心不错，我看了还想看第二遍。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/13667800.html</link><guid isPermaLink="true">http://acyort.github.io/posts/13667800.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Wed, 08 May 2013 06:27:35 GMT</pubDate></item><item><title><![CDATA[重新认识 DRY 原则]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/423085/11b8033e-ad45-11e2-80bb-b187013e7013.jpeg" alt="d95bfb33f6ece74ab1725cbeaa9f97f864e56bd246ebb-eTrVhF_fw580"></p>
<p>今天在北京，白天晚上估计都没时间，一早起来写 WTP 先。</p>
<p>DRY 是 「Don&#39;t Repeat Yourself」的缩写，通常理解是：</p>
<blockquote>
<p>它意味着，当我们在两个或多个地方的时候发现一些相似的代码的时候，我们需要把他们的共性抽象出来形一个唯一的新方法，并且改变现有的地方的代码让他们以一些合适的参数调用这个新的方法。（来自 <a href="http://www.php100.com/html/webkaifa/PHP/PHP/2009/0706/3062.html">程序员编程十条戒律</a>）</p>
</blockquote>
<p>简言之，就是：「不要出现重复代码」。</p>
<p>这看起来天经地义并且充满追求的一条法则，真的放之四海而皆准吗？</p>
<h2 id="从一个例子说起">从一个例子说起</h2><p>作为有追求的程序员，看到以下代码时经常会手痒：</p>
<p>a.js</p>
<pre><code>function mix(s, r) { ... }

exports.funcA = ...
</code></pre>
<p>b.js</p>
<pre><code>function mix(s, r) { ... }

exports.funcB = ...
</code></pre>
<p>在模块 a 和模块 b 的代码里，都有一个 mix 方法，明显存在重复。根据 DRY 法则，轻松重构之：</p>
<p>util.js</p>
<pre><code>exports.mix = ...
</code></pre>
<p>a.js</p>
<pre><code>var util = require('util')

exports.funcA = ...
</code></pre>
<p>b.js</p>
<pre><code>var util = require('util')

exports.funcB = ...
</code></pre>
<p>当代码规模比较小时，遵守 DRY，一切看起来很美妙。</p>
<h2 id="那些优雅而庞大的类库">那些优雅而庞大的类库</h2><p>当软件规模逐步扩大，DRY 往往会成为代码设计中的恶魔，会成为完美主义者的港湾。拿前端类库来说说这事。</p>
<p>熟悉 YUI3 的，对颗粒化应该不陌生。颗粒化的一个重要目标，就是减少代码重复，同时提高可拼装性。但带来的弊端也非常明显，比如 YUI3 的 Calendar 组件，如果想拿出来独立使用，得引入一堆文件：</p>
<pre><code>yui-base (34.78 KB)
intl-base (0.49 KB)
oop (2.14 KB)
event-custom-base (11.92 KB)
event-custom-complex (4.16 KB)
intl (0.74 KB)
lang/calendar (0.00 KB)
lang/calendar-base (0.00 KB)
attribute-core (4.97 KB)
attribute-observable (1.04 KB)
attribute-extras (0.72 KB)
attribute-base (0.54 KB)
attribute-complex (0.26 KB)
base-core (4.18 KB)
base-observable (1.22 KB)
base-base (0.53 KB)
pluginhost-base (0.91 KB)
pluginhost-config (0.77 KB)
base-pluginhost (0.17 KB)
classnamemanager (0.34 KB)
features (4.90 KB)
dom-core (2.58 KB)
dom-base (6.16 KB)
selector-native (3.37 KB)
selector (0.08 KB)
node-core (9.52 KB)
node-base (6.05 KB)
event-base (7.14 KB)
event-synthetic (3.63 KB)
event-focus (2.03 KB)
dom-style (3.14 KB)
node-style (0.48 KB)
cssgrids (1.37 KB)
skin-sam-widget-base (0.00 KB)
widget-base (6.13 KB)
widget-htmlparser (0.90 KB)
widget-skin (0.36 KB)
event-delegate (1.88 KB)
node-event-delegate (0.26 KB)
widget-uievents (1.44 KB)
datatype-date-parse (0.24 KB)
lang/datatype-date-format (0.00 KB)
datatype-date-format (3.46 KB)
datatype-date-math (1.35 KB)
skin-sam-calendar-base (0.00 KB)
calendar-base (15.41 KB)
plugin (1.24 KB)
node-pluginhost (0.64 KB)
dom-screen (4.68 KB)
node-screen (1.61 KB)
skin-sam-calendarnavigator (0.00 KB)
calendarnavigator (3.80 KB)
skin-sam-calendar (0.00 KB)
calendar (5.53 KB)
</code></pre>
<p>共 54 个模块，不信的可以自己去试下：<a href="http://yuilibrary.com/yui/configurator/">YUI Configurator</a> 。</p>
<p>虽然 YUI 提供了依赖的自动分析，但如此多的依赖，对维护来说，依旧是个恶魔。</p>
<p>DRY 的本意是提高可维护性，为何在以上场景中，看起来却并没有达成初衷？</p>
<h2 id="dry-的本义">DRY 的本义</h2><p>来看维基百科中的释义：</p>
<blockquote>
<p>In software engineering, don&#39;t repeat yourself (DRY) is a principle of software development aimed at reducing repetition of information of all kinds, especially useful in multi-tier architectures. The DRY principle is stated as &quot;Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.&quot; The principle has been formulated by Andy Hunt and Dave Thomas in their book The Pragmatic Programmer. </p>
</blockquote>
<p>大意如下：</p>
<blockquote>
<p>DRY 是软件开发领域的一条原则，目的是减少各种信息的重复，在多层架构中特别有用。DRY 的含义是：在一个系统中，任何知识点都应该拥有唯一、清晰、可信的表示。</p>
</blockquote>
<p>我们经常说中文博大精深，其实英文也一样，特别是涉及「原则」、「宗旨」等大词时。在上面的 DRY 的解释中，根本就没具体谈及代码重不重复的问题，更强调的是：</p>
<p><strong>在一个系统中，任何知识点都应该拥有唯一、清晰、可信的表示。</strong></p>
<p>「唯一」并不代表不重复，关键看你重复的是什么，不重复的又是什么。去年在设计 <a href="http://aralejs.org/">Arale</a> 类库时，写过一篇文章：<a href="https://github.com/lifesinger/lifesinger.github.com/issues/106">Arale 背后的一些设计理念</a>，其中谈到「适量重复」：</p>
<blockquote>
<p>第二个适度法则是适量重复。这是我的切身体会，有悖于传统的软件开发思想，但我觉得在前端界，适量重复比 DRY 更实用。</p>
<p>是个程序员可能都听过 DRY （Don&#39;t Repeat Yourself），这条法则非常好，在大部分情况下都是对的。</p>
<p>然而在构建前端类库时，我觉得遵守 DRY 会很危险。</p>
<p>如果你追求代码的不重复，那么你在写 a 和 b 组件时，会把公用部分抽取为 c，不断重复这个追求，最后就会得到一个非常庞大的依赖结构图，比如 YUI3 就是这样。YUI3 追求颗粒化，表面上看颗粒化可以让自定义打包更灵活更优秀，但实际上，颗粒化的粒度非常关键，像目前 YUI3 的粒度太小，导致的问题是，实际上你若真去把 dom / event / node 等模块打包出来，其实会比 jQuery 大出不少，不光达不到实际的期望效果，还牵三挂四，开发起来并不方便，虽然 combo 服务可以缓解一点。</p>
<p>对于 DRY 法则，我的理解是，必须要非常小心把握好两点：</p>
<ol>
<li>究竟不应该重复的是什么？</li>
<li>粒度如何？</li>
</ol>
</blockquote>
<p>DRY 中的不重复，真正要考虑的是：</p>
<ol>
<li><p><strong>职责问题：每个模块的职责究竟是什么？确定范畴、界限非常重要。要明确每个功能的职责，并在同一个系统中，保持其唯一性。</strong></p>
</li>
<li><p><strong>粒度问题：模块的粒度问题。细粒度还是粗粒度？根据具体场景来做合适的取舍、决策。</strong></p>
</li>
</ol>
<p>把职责和粒度考虑清楚，保证其在同一个系统中不重复，这才是我眼中的 DRY 原则。至于代码是否重复，并不是关键。</p>
<h2 id="在-arale-中的尝试">在 Arale 中的尝试</h2><p>在 Arale 中，我们制定了几条法则：「开放、简单、易用、适度灵活、适量重复」。遵循这几条法则，我们来看 Arale 中的 <a href="http://aralejs.org/calendar/">Calendar</a> 组件：</p>
<pre><code>base.js
widget.js
overlay.js
jquery.js
handlebars.js
moment.js
calendar.js
</code></pre>
<p>看起来也不少，但与 YUI3 的 54 个依赖相比，Arale 的更简单清晰、易于维护。</p>
<p>特别注意以上组件中，比如 jquery、handlebars 等文件的代码里，仔细去看的话，其实存在着不少重复代码。包括 Arale 自身的组件 base 和 widget 的代码中，我们也故意留了一些重复代码，而没有去做进一步「追求完美」的提取封装。</p>
<p>这种「追求职责不重复、允许适量代码重复」带来的好处是：</p>
<ol>
<li><strong>依赖层级更简单清晰。</strong></li>
<li><strong>内部修改变得更方便。</strong> 比如 jquery 里的 each 方法，和 moment 中的 each 方法，可以各自有自己的选择，根据实际场景优化。</li>
</ol>
<p>这与 Go 语言的设计有很多相似的地方：<a href="http://www.oschina.net/translate/go-at-google-language-design-in-the-service-of-software-engineering">Go在谷歌：以软件工程为目的的语言设计</a>。</p>
<h2 id="小结">小结</h2><p>肚子有点饿了，我的核心观点是：</p>
<p><strong>DRY 中最重要的，是在具体场景中，去想清楚什么是坚决不能重复的，同时想清楚什么是允许重复的。而非简单粗暴去追求代码的零重复。</strong> （代码的零重复与 0 bug 一样邪恶）</p>
<p>DRY 用在生活中更具诗意： <strong>让每一天，都与你的过往不同。</strong></p>
<p>文 / 玉伯</p>
<p>题图：几片自然风干的叶子，清晰、美丽。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/13619280.html</link><guid isPermaLink="true">http://acyort.github.io/posts/13619280.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Wed, 15 May 2013 01:30:07 GMT</pubDate></item><item><title><![CDATA[事件触发的一个细节设计（下）]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/414520/ed8692f8-ac1a-11e2-94f6-f69585a129b9.png" alt="Screen Shot 2013-04-23 at 9 36 54 PM"></p>
<p>昨天的 <a href="https://github.com/lifesinger/lifesinger.github.com/issues/150">文章</a> 发出后，收到了不少经过认真思考的回复，非常感谢这份参与精神。很希望国内的技术讨论氛围，会在 WTP 频道中越来越好。</p>
<h2 id="两种策略的分歧">两种策略的分歧</h2><p>同一个事件的 handlers 在触发过程中，当执行某个 handler 发生异常时，昨天提到有两个处理策略：继续执行和停止执行。</p>
<p>目前支持继续执行的类库框架有：MooTools、Prototype、Dojo
目前支持停止执行的类库框架有：YUI3、jQuery、Backbone</p>
<p>这个列表不能说明什么，但值得注意的是，这个问题在 2009 年时，JavaScript 大神 Dean Edwards 就在 <a href="http://dean.edwards.name/weblog/2009/03/callbacks-vs-events/">Callbacks vs Events</a> 一文中提出过，并且给出了一个非常 Geek 的解决方案。</p>
<p>我印象中，Prototype 等类库，就是在 Dean Edwards 指出这个问题后，将策略修改成了继续执行。</p>
<p>然而，目前更流行的几个类库 jQuery、YUI3 包括新秀 Backbone 等，却依旧坚持停止执行。并非是他们不知道，而是这几个类库的作者，选择了停止执行策略。</p>
<p>这两种策略的主要分歧在于：</p>
<ol>
<li><p>继续执行策略觉得，继续执行是对 handlers 之间无依赖的更好保障。如果停止执行，就破坏了无依赖性，使得后面 handlers 的执行依赖前面 handlers 的无异常性。</p>
</li>
<li><p>停止执行策略觉得，发生异常时，已经超出了无依赖性的讨论范畴。在类库里面 <code>try catch</code> 或通过其他方式处理都不是最佳解决方式，这应该交给用户去解决，属于 user-land 范畴。</p>
</li>
</ol>
<p>Backbone 作者 Brad Dunbar 的 <a href="https://github.com/documentcloud/backbone/issues/1527#issuecomment-7554619">观点</a> 如下：</p>
<blockquote>
<p>While I understand your concern, suppressing errors inside event handlers is a much worse behavior than skipping the rest of the handlers. When something fails, you want to know immediately, not continue as though nothing happened.</p>
</blockquote>
<p>大意是说：</p>
<blockquote>
<p>与停止执行相比，在事件处理器中抑制错误是一种更糟糕的行为。当某些事情不对时，就应该立刻知道，而不是装着什么也没发生一样继续执行。</p>
</blockquote>
<p>jQuery 开发者也有类似的 <a href="http://bugs.jquery.com/ticket/13782">观点</a>：</p>
<blockquote>
<p>In order to continue subsequent callbacks, jQuery would have to catch the error, which is not a good solution. If an error is acceptable, a try/catch can be implemented by the user.</p>
</blockquote>
<p>大意是：</p>
<blockquote>
<p>为了继续执行回调，jQuery 需要捕获错误，这并不是一个好的解决方案。如果某个错误是可以容忍的，那么应该由用户通过 <code>try / catch</code> 去实现。</p>
</blockquote>
<h2 id="放在场景中思考">放在场景中思考</h2><p>但为什么浏览器的默认行为是继续执行呢？</p>
<p>我的想法是，得分场景来说：展现型页面和功能型页面。</p>
<p>对于展现型页面，比如淘宝首页，页面某一个区域出问题时，最好不要影响其他区域的展现。因为一般来说，各个区域之间不会有依赖。感觉这也是浏览器设计之初，采取继续执行策略的初衷。这个初衷还体现在，当某个 script 块的代码发生异常时，不会影响其他独立 script 块的执行。</p>
<p>对于功能型页面来说，比如 Gmail，当页面某一个区域出问题时，经常意味着底层数据或网络出了问题，这时最好的处理方式是，都停下来，统一给出错误或重试提示，而不是继续进行操作。因为操作已经不可预期，很可能造成不必要甚至错误的操作，比如发出一封错误的邮件等等。</p>
<h2 id="无依赖很难">无依赖很难</h2><p>Backbone 的使用场景应该是功能型页面，因此非常坚持采用停止执行策略。类似 YUI3 也是如此。jQuery 更多是觉得这应该是用户范畴的事，类库不应该处理。</p>
<p>举个例子，对于支付宝来说，由于支付操作涉及用户金额，有可能存在以下可能性：</p>
<ol>
<li>handler A 检查校验码，有可能通过，有可能不通过。通过时，会设置某个校验标识为 true 。</li>
<li>handler B 提交支付请求，提交前会检查是否通过校验。</li>
<li>当 handler A 出错时，校验标识有可能是旧值，也有可能被设置成错误值。</li>
<li>handler B 并不依赖 handler A，但依赖校验标识。当 handler A 出错时，校验标识无论是什么值，都已经不可靠，即便是校验通过，也不应该提交支付请求。</li>
</ol>
<p>这就是说，对于功能型页面来说，一旦有代码错误（不一定是 handler 引发的），就应该尽可能做到停止代码执行，并告知用户出了问题。</p>
<p>这就如一锅汤，一旦滴进了一滴毒药，只要发现有一个人中毒了，最明智的做法就是立刻不再继续把汤盛给其他人，否则毒死一批人，罪孽就大了。</p>
<p>问题的核心是，要判断滴进汤里的是毒药，还是仅仅是一粒沙子。对展现型页面来说，经常是沙子，无伤大雅，但对功能型页面来说，我情愿假设都是毒药，应立刻告知所有人并停止喝汤。</p>
<p>这个例子的背后，还能让我们看到无依赖的 handlers 之间并不一定无依赖。由于代码运行在同一个环境下，有可能共享同一份数据。对于前端代码来说，明显共享的是同一份 DOM 树。这样，当某个 handler 出了问题后，很可能共享的数据、DOM 树已经不可靠。继续执行其他 handlers，很可能已经是在一个不可靠的环境中去运行代码。后续代码已经不可控，特别是对于复杂系统来说。</p>
<p>对于复杂系统，<code>try / catch</code> 并不能保障无依赖性。因为环境的复杂性，继续执行反而可能带来后续的不可控性。</p>
<h2 id="范畴很重要">范畴很重要</h2><p>Backbone 和 jQuery 社区中，这个问题其实被反复提出过，Arale 中也被 <a href="https://github.com/aralejs/events/issues/1">提出过</a>。但我始终觉得，在基础类库中去 <code>try / catch</code> 并不是最佳解决方案。不光不是最佳方案，更重要的是，这件事，不应该属于类库去解决的，而应该是用户需要去考虑的。</p>
<p>比如，如果用户担心某个 handler 有可能会出问题，那么这个 handler 在可能出问题的地方，本就应该自行 <code>try / catch</code>，由用户去负责。对于复杂系统，对于不放心的 handlers，可以通过工厂模式自动封装。比如很多游戏的代码里，会做类似的错误异常统一处理。但具体应该对哪些 handlers 封装异常，由具体游戏的开发者决定。</p>
<p>还有一个有意思的是，少就是多。类库做得越少（保持完整性），用户能做的反而越多。假设类库封装了 handler 的异常，那么对于那些想采取停止执行策略的场景来说，就很不好实现了。反之，则用户自行封装就好。</p>
<p>Sea.js 从 1.x 升级到 2.0，最核心的一个思考就是缩减范畴，不断思考 Sea.js 应该做什么，不应该做什么，砍掉了大量功能，增加了少量功能，目前看起来还是挺不错的。但即便经过半年的升级后，Sea.js 2.0 里，目前依旧发现有少量功能不应该提供，打算在接下来的版本里进一步去掉。</p>
<p>少即是多，确定边界对类库框架来说非常非常重要。</p>
<h2 id="小结">小结</h2><p>对于展现型页面来说，采用浏览器的继续执行策略，个人觉得是合理的。</p>
<p>对于功能型页面来说，特别是涉及复杂系统时，基础类库中应该尽量少做一些事情，把更多的决定权交给用户。</p>
<p>也许无法说服你，其实也不需要达成某个最终结论。不同应用中，这两种策略都有合适的使用场景。</p>
<p>（文 / 玉伯）</p>
<p>题图：挺有意思的一幅图哦，你可以返回顶部去看。</p>
<p>题外话：昨天不少人全部答对了那个小作业，答对的可以留一个地址给我，我送大家一些淘公仔，小的那种。</p>
<p>小调查：想调查一下大家目前的一些情况。如果你还在读书，请回复『高三』、『大四』之类的。如果你已经参加工作，请回复工作已经多少年了，回复数字就好，比如『2』、『9』。期待大家的回复，我会根据回复情况，来调整一下 WTP 推送的内容。</p>
<p>预告：这周会有沉鱼 fool2fish 的漫画，我期待好久了，嘿嘿。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/13534870.html</link><guid isPermaLink="true">http://acyort.github.io/posts/13534870.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sat, 18 Jul 2015 06:57:15 GMT</pubDate></item><item><title><![CDATA[事件触发的一个细节设计（上）]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/409298/81d61a4a-ab4f-11e2-991e-bd8c3ed68cb6.png" alt="Screen Shot 2013-04-22 at 9 20 41 PM"></p>
<p>前端开发过程中，事件机制无处不在。比如使用 jQuery 添加 DOM 事件：</p>
<pre><code>$(document).click(function() {
  console.log(1);
});

$(document).click(function() {
  console.log(2);
});
</code></pre>
<p>当点击 document 时，控制台中会按照预期输出 1 和 2 。</p>
<p>问题来了：</p>
<pre><code>$(document).click(function() {
  console.log(1);
  DOES_NOT_EXIST++;
});

$(document).click(function() {
  console.log(2);
});
</code></pre>
<p>以上代码，点击 document 时，控制台中会输出：</p>
<pre><code>1
Uncaught ReferenceError: DOES_NOT_EXIST is not defined
</code></pre>
<p>输出了 1，然后抛了一个异常，没有输出 2 。</p>
<p>如果使用浏览器自身的 <code>addEventListener</code> 注册：</p>
<pre><code>document.addEventListener('click', function() {
  console.log(1);
  DOES_NOT_EXIST++;
}, false);

document.addEventListener('click', function() {
  console.log(2);
}, false);
</code></pre>
<p>当点击 document 时，在 Chrome 下，控制台中会输出：</p>
<pre><code>1
Uncaught ReferenceError: DOES_NOT_EXIST is not defined
2
</code></pre>
<p>很明显，当 handler 中有异常时，浏览器的 addEventListener 与 jQuery 的处理方式不一样：</p>
<ul>
<li><strong>继续执行策略</strong>：浏览器会抛出异常，然后继续执行其他 handlers 。</li>
<li><strong>停止执行策略</strong>：jQuery 会抛出异常，然后停止执行其他 handlers 。</li>
</ul>
<p>继续讨论前，先留一个小作业：大家可以研究下 YUI、MooTools、Prototype、Dojo 等等类库框架的处理策略。回复给我，全答对者，明天有惊喜。</p>
<p>对于继续执行策略，核心理念是： <strong>事件 handlers 之间应该彼此无依赖，即便有异常也不能影响其他 handlers 的执行</strong>。实现上可以通过 <code>try catch</code> 或 <code>setTimeout</code> 等方式，来确保一粒老鼠屎不会坏掉一锅汤。这个理念有很多人、很多类库框架支持。</p>
<p>对于停止执行策略，核心理念是： <strong>事件 handlers 之间应该彼此无依赖，但当某个 handler 异常时，不应该假装没事一样，继续执行其他 handlers</strong> 。这个理念也有很多人、很多类库框架支持。因为掉进锅里的老鼠屎很可能有毒，一旦发现了，最明智的做法是别让大家喝了。</p>
<p>无论是继续执行还是停止执行，都同意事件 handlers 之间应该彼此无依赖，这一点上无分歧。但涉及异常时，两种理念下的策略迥异。</p>
<p>这两种处理策略，究竟哪种更好呢？你的想法是怎样的？欢迎留言给我。明天我再详细说说我的想法。</p>
<p>记得做前面留的小作业哦，以及回复我你的选择。</p>
<p>（文 / 玉伯）</p>
<p>题图：一幅充满事件的抽象画。</p>
<p>题外话：昨天有人问 WTP 怎么没更新。WTP 默认情况下只在工作日更新。非工作日，鼓励大家忘掉手机、忘掉网络，好好去沐浴阳光、享受生活。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/13481078.html</link><guid isPermaLink="true">http://acyort.github.io/posts/13481078.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sat, 27 Apr 2013 04:06:46 GMT</pubDate></item><item><title><![CDATA[6个残酷的人生事实]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/380026/9af6c538-a5b4-11e2-9a31-ea89524c31bd.jpg" alt="52d8765c3fa8d72f298a43c23640ffaa"></p>
<p>这周 WTP 由我的同事远尘维护。今天本想发一篇关于 OAuth 的技术文，但写得还不够通俗易懂，等修改好后分享给大家。</p>
<p>WTP 原则上不转载文章，但今天看到一篇实在非常棒的文章，因此就厚颜无耻一回，调整排版后，分享给大家。下面是全文。</p>
<hr>
<h1 id="6个残酷的人生事实">6个残酷的人生事实</h1><p>原文：David Wong 
翻译：天理难容</p>
<p>如果你的职业道路非常顺利，你的生活美满感情顺利，你可以不用读这篇文章。祝你一天愉快，这篇文章不是为你写的。你做的非常出色，我们都为你自豪。 </p>
<p>对于其余的人来说，我希望你做一件事情：说出5件你引以为豪的事情。写在纸上也好，或者喊出来也好都可以。但这里有一个条件：你不可以列出你“是”怎样的人（比如，我是一个温柔的人，我很诚实），只能列出你“做”的事情（比如，我刚获得了全国象棋冠军，我做的chili是全麻省最好的）。如果你发现很难列出五件事情，这篇文章就是为你所写的。而且你他x娘de肯定一边听一边心里会不舒服。我的感受是，如果有人在1995年的时候跟我讲这些事情就好了。 </p>
<h2 id="第6个事实：这个世界只关心你能给予什么">第6个事实：这个世界只关心你能给予什么</h2><p>我们假设一下你最爱的亲人在大街上被枪击了。TA一边失血一边尖叫。一个路人冲上来说“让一下”。他仔细检查了伤口并拿出一把小刀准备在大街上动手术取出子弹。 </p>
<p>你问他：“你是医生吗？” 
他回答说：“不是” 
你说：“你知道你要做什么，对吧？你是不是退伍的军医，还是……” </p>
<p>这个时候那个路人感觉有点不快了。他告诉你说他是一个好人，是一个诚实的人，他上班从来不迟到。他告诉你说他是一个孝顺的儿子。业余生活丰富，生活非常富足。他还说他从不说脏话。 </p>
<p>你有点疑惑，说：“这ta吗的和我亲人被枪击躺在马路上有什么关系？我需要一个可以在伤口上动手术的人！你到底能不能做？” </p>
<p>现在这个路人非常生气了——为什么你就那么自私肤浅呢？你难道不在乎他的那些优良品德么？他刚才不对你说他总是记住女友的生日吗？他有那么多优良品质，你为什么就抓着他会不会外科手术这个事实不放呢？ </p>
<p>在那个疯狂的情形下，你会用你沾满鲜血的双手用力摇晃他的肩膀，大喊道：“废话！你说的那些优良品质都是屁话，因为在当前情况下我只需要一个可以止血动手术的人！你这个神经病给我滚！” </p>
<p>所以，这就是我要说的第一点成人世界的残酷事实：你其实天天都身处于上述的“当前情况”之中。只不过换作你是那个喋喋不休的好心路人，而社会上其他所有人都换作成那个流血的伤者。 </p>
<p>如果你想知道为什么社会对你不屑，或者你为什么从不受到尊重，这是因为社会充满了 <strong>需要某样东西</strong>的人。他们需要人来造房子，他们需要食物，他们需要娱乐，他们需要人来满足性欲。你从出生开始就进入了这样的需要解决人们需求的社会系统。 </p>
<p>你要么选择学习某种技能担当某样角色满足他人的需要，要么就选择被社会抛弃。这个社会不在乎你有多么善良，礼貌，无私。你会变穷，你会没有朋友，你会被遗弃。 
但这是不是说我们要刻版、自私呢？爱和温柔重要吗？当然了，但前提是这些爱是别人需要的，也是从其他人那里得不到的。 </p>
<p>否则的话…… </p>
<h2 id="第5个事实：别去相信嬉皮士的话-hippies-are-wrong">第5个事实：别去相信嬉皮士的话 (Hippies are wrong)</h2><p>【原文此处引用了一段视频： <a href="http://v.youku.com/v_show/id_XNTIwNzE5MDg0.html">http://v.youku.com/v_show/id_XNTIwNzE5MDg0.html</a> ，到优酷搜索 &#39;Glengarry Glen Ross speech&#39; 直达，英文对白： <a href="http://yu.ac.kr/~bwlee/esc/baldwin.htm">http://yu.ac.kr/~bwlee/esc/baldwin.htm</a> 】 </p>
<p>对于那些无法看视频的读者，这是一段著名的影院神片Glengarry Glenn Ross里Alec Baldwin的演讲。Baldwin的角色——你会假设是反角——对一屋子的销售员疯狂施压，警告他们说他们都会被解雇，除非他们可以搞定他们手上的单子。 </p>
<p>“好人？关我屁事！慈父？去你ma的！回你的家和你孩子玩去！如果你想在这里工作，给我敲定手上的单子” </p>
<p>非常残酷、粗鲁、甚至有点疯狂。可是，这恰恰是这个社会对你期望的最诚实的写照。不同的是，在现实世界里，人们认为那样讲话太粗鲁了对你不礼貌，于是他们干脆什么都不说眼看着你失败。 </p>
<p>这个电影片段改变我的人生。我如果知道怎么做的话，会把它录成闹钟每天早上叫我起床。Baldwin因此还拿了奥斯卡奖，而这个片段是他整个电影唯一出场的场景！正如前人已经分析过，这段演讲精彩之处在于，一般的人会理解为“天哪，我要有这么一个混蛋老板会怎样啊？”。而另一半人却会想“太ta嘛励志了！我现在就想去上班做业务去！” </p>
<p>或者，有一个心理学家写道：“如果当时你在那个房间里，你们中的一些人会明白这是工作，会从那段演讲里吸收能量，就像一个球队教练冲你大骂一样。你会觉得‘这家伙太有能耐了’。而另一些人会非常介意，认为这个老板是混蛋，你没有权利跟我这样说话。” 
以上节选自一篇对于“hipster（这个词很难翻译，姑且翻译为非主流潮人）”的批判文章。文章解释了这些人为什么会难找工作，并指出上述两种不同的态度——受刺激vs受激励——很大程度上决定你是否在现实生活中能成功。 </p>
<p>比如说，有人会引用搏击俱乐部里的经典台词“You are not your job”。但事实上，你完完全全就是你的job（职责）。当然了，你的职责和你为公司的服务不是一回事请，但其实你只不过是你所有有用技能经验的综合体罢了。技能是某一个个体能为社会中其他人提供的有用服务。但别搞错了，你的“职责”——你为他人提供的有用服务——就是你的全部。 </p>
<p>这就是为什么外科医生比喜剧作家更受到尊重。也是为什么机修工比无业潮人更受到尊重。如果你的死讯能登上新闻，这说明你的工作已经成为了你的标签。搏击俱乐部里Tyler说You are not your job，但他同时又操办了一家成功的肥皂公司同时成为了社会运动的领导人。He was totally his job （这句不翻译比较好理解）。 </p>
<p>我们再这样理解一下：你还记得Chick-fil-A餐厅反对同性恋婚姻么？不论嬉皮们如何抗议，公司还不是照样卖出了成千上万的汉堡？这不是说顾客们认可他们，而是因为他们成功地完成了履行了他们的职责——做好吃的汉堡。这一点才是最关键的。 </p>
<p>你不一定非要从心里喜欢这个事实。我也不喜欢我生日的时候天下雨。但天还是要下雨。人们有需求，人们会认可能够满足他们需求的人。世界就是通过这么简单的机制运行的，谁也改变不了。 </p>
<p>如果你抗议说，我不是肤浅的物质主义者，金钱不是万能的，我只能说：我有说过金钱吗？说明你没看懂我的要点。 </p>
<h2 id="第4个事实：你所做的事情不一定要换成钱，但一定要有益于他人">第4个事实：你所做的事情不一定要换成钱，但一定要有益于他人</h2><p>那么我们换一个非金钱的例子好了。这个网站(cracked.com)主要面向20出头的男性。我每天都要从邮箱里收到一大堆挫男抱怨女人不愿意接近他们，虽然他们是世界上最nice的男人。我可以解释他们的思路有什么问题，不过最好是让Alec Baldwin解释最好。 </p>
<p>（译注：此处再次引用上述视频，我真的建议大家去看那个片段！） </p>
<p>在我们说的例子里，Baldwin就是你生活里那个女神。他们当然不会像Baldwin的角色那样粗鲁直接——社会教育我们不要对别人那么“诚实”——但问题是一样的：“你是好人？关我屁事！想在这里工作，就给我搞定工作。” </p>
<p>所以，你有什么感想呢？你对在书店里遇到的女神每天白日梦YY，为她午餐不吃色拉感到惋惜。她10年后会成为一个外科医生，你呢？ </p>
<p>“什么？你是说除非我找到一个好工作赚大钱否则不可能把到女神？” </p>
<p>不！你的大脑跳跃太快了，因此你可以给自己一个理由认为所有拒绝你的女神都是肤浅自私的。我在这里就问一个问题：你给予了什么？你聪明么？幽默吗？情趣吗？天才？雄心？创意？好，那你做什么事情能向这个世界证明自己的优点呢？不要跟我说你是个好人——这是最起码的。你的女神每天有三打的男人对她“好”。用我们上文的例子来说，伤者在大街上流血，你到底会不会开刀？ </p>
<p>“我不歧视女人，不歧视种族，不贪婪，不肤浅，也不虐待人！我和那些diao不垃几的男人不一样。” 
很抱歉，如果你所能做的事情只不过是你“没有”一堆缺点，就ta吗的给我从伤者身边滚出去！我们有的是风趣、英俊、事业成功的男人来帮助你的女神。 </p>
<p>伤到你自尊了么？有一点？那现在怎样呢？你想碎碎念呢，还是打算学习怎么去做手术治疗那个伤者？取决于你。但你不要去抱怨为什么女神就喜欢找你口中的坏男人。她们吃这套是因为那些diao不拉几的男人有其他东西可以满足你的女神。“但我是一个聆听者！”是吗？你可以坐在女神身边几个小时听她念叨？你猜怎么着？角落里还有另一个男人可以这样做，他还是吉他高手！你如果不停地说你是一个好人，就像一个餐厅说他们的卖点是他们的食物不会让你拉肚子一样，就像一部电影的标题是“This Movie is in English”。 </p>
<p>这就是为什么你可以做一个好人但仍然觉得自己是loser。 </p>
<h2 id="第3个事实：你恨自己是因为你无所作为">第3个事实：你恨自己是因为你无所作为</h2><p>“所以你的意思是要我去买一本教我如何把妹的书么？” 
当然不是，除非那本书的第一章是“让自己变成女孩子愿意接近的人”。因为这一步总是容易被忽略——人们总是问“我怎么能找到工作？”而不是“我如何成为雇主愿意雇用的人？”；人们总是问“怎么让女孩喜欢我？”而不是“我怎么成为女孩喜欢的人？”。对吧？因为后者往往要求你放弃自己喜欢的爱好，注重外表，天知道还要做其他什么牺牲。你甚至还可能要改变你的天性。 </p>
<p>“但是为什么我不能就去找一个喜欢原本的我的人呢？”答案很简单：人是有需求的。别忘记我们的例子：伤者在流血，而你所做的只是抱怨找不到会自动愈合的伤口？ </p>
<p>【此处插入一段Youtube上点击率很高的猥琐街头艺人表演的视频】 </p>
<p>每个人看了上面这段视频都会会心一笑。你能为人们带来笑声么？为什么不呢？是为什么阻止你穿上猥琐的衣服在街头边唱边甩鸡鸡呢？那家伙似乎知道赢得掌声的门道……做怪事……总比什么都不做好…… </p>
<p>“但是我什么都不擅长！”我有好消息告诉你：如果你尝试反复练习做一件事情，任何事情，你都可以擅长此事。我小时候可能是全世界最糟糕的作者。到了25岁的时候稍微好那么一点点。但当我职场失意的时候，我用业余时间写作长达八年，一周写一篇文章，直到它为我换回了钞票。我花了13年时间才能登上纽约时报畅销书榜单。我大概花了20000个小时才慢慢磨快了我拙劣的文笔。 </p>
<p>不希望花那么多时间磨练一门技术？那么我有好消息和坏消息告诉你。好消息是漫长的磨练可以让你慢慢走出困境——我忍受了多年琐碎的办公室工作，因为我知道我同时在学习一门技能。人们半途而废是因为要看到结果实在是太漫长了，同时也是因为他们没有意识到“结果”就是过程本身。 
坏消息是你别无选择。“想继续在这里工作？给我搞定手里的单子” </p>
<p>从我个人角度出发看，你并不是因为缺乏自信而恨自己，或者是因为别人羞辱你。你恨自己是因为你【什么都不做】。连你自己都不能爱“原本的自我”——这就是为什么你很可悲，不断写私信问我如何处理你的生活问题。 </p>
<p>自己扳手指算一下：你有多少时间是在消费别人创造的东西（电视，音乐，电玩，网站）而不是生产你自己的东西？只有你的“产出”才能为你添加作为人的价值。 </p>
<p>如果你听到这里听不下去了，并且用你从小听到大的陈词滥调回应说：“人的内在才是最重要的”，那么我只能说……（接下文） </p>
<h2 id="第2个事实：你的内在只有通过所做的事情才能表现出来">第2个事实：你的内在只有通过所做的事情才能表现出来</h2><p>在我所从事的行业里，我认识无数有理想的作家。他们认为自己是作家，他们在聚会上介绍自己是作家，他们拥有一颗作家的热心。他们只缺乏最后的一步：写点ta吗的像样的东西出来。 </p>
<p>是吗？难道“写点东西”就是真正决定谁是谁不是真正“作家”的标准吗？ 
我的天哪，当然是了！ </p>
<p>这恰恰是对我以上所说一切最常见的反驳，也是对你生活中批评声音最常见的反驳。这是你不断对你自己暗示以逃避能帮你改善自我的刻苦工作的理由。“我知道我的内在是一个很好的人”。你也会听到人说“我做我自己”。 </p>
<p>不要误会我的意思：你的内在非常重要。一个男人如果为了他的家庭从无到有造出一栋房子完全是因为他的内在是一个好人。你所做的一切坏事最初是一个坏的念头，萦绕在你脑中，直到最后实施。同样，做一件好的事情也是一样道理——内在的自我是你成功果实赖以生长的土壤。 </p>
<p>但是所有人都应该知道，所有人却都不能接受的事实是：“没有最后的果实，你就什么都不是” </p>
<p>比如你内心非常同情穷人。很伟大。这会让你最后做什么实事么？你听到你社区里一些悲剧发生后，你会说“这些不幸的孩子啊，让他们知道我在内心同情他们”吗？你要这么说我就只好说法克you——给我去真正帮助他们才是真的。数以千万的人看了那段Kony视频（译注：2012年Youtube上很有争议的关于非洲儿童的视频），所有看过的人都“在心里同情他们”。那么这么强大的同情给儿童们带来了什么呢？屁都没有！每天有非洲的儿童死于非命，因为数以百万的我们对自己说关心和行动一样重要。这是我们内心的一种心理机制，控制着我们大脑里犯懒的那一部分，让我们不断逃避真正去做实事。 </p>
<p>有多少人此刻正在想：“她（他）如果知道我是多么有趣的人，一定会爱上我。”真的吗？你那些有趣的想法有多少让世人知道了呢？如果你的心上人有一个隐藏摄像机跟着你拍一个月，他们会被录影的内容打动吗？记住，人们不会读心术，他们只会观察你的行动。 </p>
<p>我希望你做的，只不过是用你看别人的标准来看你自己罢了。你有没有一个烦人的基督徒朋友给别人最大的帮助只不过是“我为你祈祷”？你觉得烦不烦？我这里还没涉及到祈祷是不是实际有用呢，他们提供的帮助不需要他们屁股离开沙发就可以做。他们认为自己思想纯净，但是他们纯净的思想土壤有没有结出果实呢？他们自己应该比别人更清楚这点——因为我“土壤-果实”的比喻就是从圣经里拿来的。圣经里耶稣曾经不止一次说过“人们是根据果实来评判一颗树的”。当然，耶稣从来不会说“想继续留在这里工作，就给我搞定单子”，但他说“凡不结好果实的树，都要砍下來，扔在火里。” </p>
<p>对以上这些话无动于衷的人，就如同电影里对Baldwin无动于衷的业务员一样。 </p>
<h2 id="第1个事实：-人的内心其实一直在拒斥进步">第1个事实： 人的内心其实一直在拒斥进步</h2><p>人类的大脑是很神奇的。但你会发现大脑在拒斥进步的时候运转得比做实事的时候还快。你的意识会通过层层防御机制来排斥任何会让你改变现状的事情——问一下对任何事物有瘾头的人就知道了。 </p>
<p>所以，到现在，你们中的许多人一边读这篇文章，一边会感觉到大脑在不断提供排斥这篇文章的理由。从经验上说，这些想法通常是： </p>
<h3 id="有意将任何批评理解为侮辱">有意将任何批评理解为侮辱</h3><p>“他凭什么说我又懒又没用？一个善良的人从来不会这样对我说话！作者写这些东西只不过是想显示自己有多么优越，让我这个loser对自己生活不满罢了！等我回复更损人的话给你！” </p>
<h3 id="对人不对事">对人不对事</h3><p>“这人有什么资格告诉我怎么活？他自以为自己了不起吧？不过是网上的一个白痴写手罢了！我要去人肉他，看他有什么丑事可以抖出来。这人真自以为是，让我作呕” </p>
<h3 id="只看语气，不看内容">只看语气，不看内容</h3><p>“我会仔细看你的文章，找出一句话，断章取义只讨论那个。” </p>
<h3 id="不断修饰你的过去">不断修饰你的过去</h3><p>“事情没那么糟糕。确实我上个月还想自杀呢，但现在我感觉好多了！也许我只要继续做我现在做的事情，情况会好的。让我继续给那个女神修电脑，女神总会到我身边的！” </p>
<h3 id="认为改善生活的行为总会让你失去自我">认为改善生活的行为总会让你失去自我</h3><p>“哦，那么你是让我扔掉所有的漫画书。天天去健身房6小时？因为除此之外我没选择了？” </p>
<p>当然还有其他的想法。记住： <strong>痛苦是会让人感到舒坦的</strong>。许多人选择拥抱痛苦。幸福是需要努力的。 </p>
<p>还有：勇气。人们无法批评你根本没有去创造出来的东西，所以人们选择什么都不做来避免批评。 
人们很容易双手一叉裤袋批评别人的工作。这个电影很傻，这对父母的小孩很皮，那对情侣的感情很糟糕，那个暴发户不学无术，这个餐厅糟透了，本文作者是个白痴，我倒不如留一条损的回复让网站开除他，瞧，我这不“创造”了一些东西么？ </p>
<p>哦，是啊，我忘记提醒你了。不论你尝试建造或者创造什么东西——诗歌也好，新的技术也好，或者新的感情也好——你会立刻发现自己身边多了很多批评家。这些批评家也许不会当你面损你，但是他们确实在挖苦你。你的酒鬼朋友不希望你清醒，你肥胖的朋友不希望你苗条，你无业的朋友不希望看到你开始新的职业。 </p>
<p>记住，他们不过在表达他们对生活的恐惧罢了，批评别人的工作是自己不作为的另一个理由。“为什么我要创造什么东西呢，你看别人做的东西都糟透了！”“我想写小说，不过我要等时机，我可不想写出暮光那样肤浅的东西”。只要他们永远不动手去做事情，事情就永远是完美的。或者他们如果真的着手做事情了，他们会故意不努力，让别人认为事情做不好是因为他们不在状态，“他们真正的潜力是无穷的”，不是你看到的狗屎一样的产品。 </p>
<p>往下翻读一下本文的回复——那些很极端的回复，永远都是“Cracked应该炒了这个作者”“这个自负的白痴应该停止写作”。所有一切的负面评论潜台词永远都是“停止创作，如果换我来创作绝对比这个好千倍，你现在得到那么多人气让我自己很没面子。” </p>
<p>不要成为上述的那种人。如果你是那种人，请不要继续成为那样的人。这正是人们为什么不喜欢你的原因，这正是你恨自己的原因。 </p>
<p>所以，我有个建议：给自己定一个期限，2013年底，或者从你读本文之后的一年。当别人跟你说“我的新年计划是减肥15磅”的时候，我说咱们应该努力去做任何一件事情——学习新的技能直到足够有用为止，或者随便选一件事情：学空手道，学跳舞，学陶艺，做一个鸟屋，学习按摩，学一门语言，甚至拍一部A pian，做蝙蝠侠打击犯罪…… </p>
<p>关键在于：我不希望你把眼光放在某个过高的目标上，我希望你专注于获得一样新的， <strong>对其他人有用</strong>的技能和经验。 </p>
<p>“我没钱参加烹饪班”，那就ta吗的给我Google“如何烹饪”。我的天，拜托你戒掉这些借口，否则这些借口就要你命了。（You have to kill those excuses, or they will kill you） </p>
<p>（全文完）</p>
<p>本文编辑：远尘（支付宝前端工程师，热爱代码，关注移动开发）</p>
<p>这篇文章内容虽然有点长，但看后颇有感慨。残酷直白的文字让人既有伤疤被揭的刺痛，也有醍醐灌顶的觉醒。可能真像上文说的，可能会有一半人看了感觉羞辱，一半人看了感觉激励。各位不妨回复你看完后的感觉。</p>
<p>题图：雄狮的奔跑人生。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/13189315.html</link><guid isPermaLink="true">http://acyort.github.io/posts/13189315.html</guid><dc:creator><![CDATA[noahlu]]></dc:creator><pubDate>Tue, 02 Feb 2016 02:37:43 GMT</pubDate></item><item><title><![CDATA[昨天的歌与今天的电影]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/378012/2f8d4e5e-a50d-11e2-85d3-768395b138be.jpg" alt="ad1baad6e8a9ff9f7304b5e98ac51f21"></p>
<p>昨天推荐了林志炫的两首歌『浮夸』和『烟花易冷』，可能刚好对上了我的心境，所以特别喜欢。</p>
<p>『浮夸』还有陈奕迅的粤语版本，个人不是很喜欢。这两首『浮夸』，意境很不一样。知乎上有一篇神贴详细阐述，我就不多费笔墨了。林志炫的版本，让我想起的是周星驰的『喜剧之王』。拍的是故事，讲的是自己。歌手已经不是歌手，演员也已不是演员，而是真实的一部分。喜欢，不需要理解，只需要感觉。不喜欢也一样。</p>
<p>林志炫的『烟花易冷』，无论是曲还是词，都是一场重新诠释和演绎。个人觉得比周杰伦的版本好听多了。周杰伦，每次听他唱歌都挺给我信心的，因为我的口音也挺重，经常让人听不大清楚。『烟花易冷』在我听来不是武侠里的爱情，而是现实中的「雨纷纷、旧故里草木深、烟花易冷、人事易分」。</p>
<p>今天给大家推荐几部片，让我疯狂若喜、黯然如悲。</p>
<p>第一部是『Alice 梦游幻境』。曾答应给大家写一篇影评，只写了一小半，没写完。后来想想，这不应该是一部用文字去表达观后感的电影，而是一部需要用一生去践行的影片。在现实中，各种世俗观念，指导同时束缚着我们的言行，然而我们的内心，经常有着不一样的声音。这些发自灵魂的音符，我相信很多人都能听见。但经常因为各种各样的原因，因为惯性，我们不会去追随，那心的音符也就离我们渐行渐远，终至不见。这是女孩 Alice 的一场梦，梦中要认清自己，梦中要迈过恐怖的人头桥，梦中要相信一切不可能皆有可能，梦中要举起抉择之剑，砍下那恶龙的头。醒来，你已不是你，你又变回了你。世界还原精彩。</p>
<p>第二部是『大鱼』。一个喜欢讲故事的父亲，儿子非常腻烦爸爸的啰嗦。随着一个个略显夸张的故事展开，一个勇敢又平常的人的一生，变成一道美丽的风景娓娓走来。平凡又不平凡的故事里，总是让我不时念起很多细节。考虑今天是推荐影片，此处就不剧透了。强烈推荐一看，看完后可以找我聊聊。</p>
<p>第三部是『剪刀手爱德华』。这部片看得我想掉泪。为什么很多时候很多事，都会像是一场飘散的雪花？如果你没看过，你不会懂雪花是什么意思。强烈推荐，不剧透。</p>
<p>第四部是今天看的『查理和巧克力工厂』。很适合陪小孩一起看。前面几部也可以陪小孩一起看，但不如这部带有「教育」意义。小雕看完之后，知道了多吃糖的坏处，知道了老雕不能宠着小雕，否则后果很严重。老雕看完这部片，也坚定了让小雕继续玩着长大的宏伟野心。让各种培训班见鬼去吧。</p>
<p>以上电影，都是 Tim Burton 导演的。这是位奇才般的导演。很喜欢这种充满想象力、张力与梦的片。</p>
<p>不知道为什么喜欢。如果知道为什么喜欢，或许就不喜欢了。这样挺好的，希望你也会喜欢。</p>
<p>我只是希望在某些时候，我的文字，能抓到你的内心。</p>
<p>（文 / 玉伯）</p>
<p>题图：一只叫 Tim Burton 的大鸟。</p>
<p>PS：周末本不打算发文，刚好听到了好听的歌，想起了好看的电影，因此推荐给大家。技术很重要，生活更重要。WTP 关注技术、产品、自由梦，后两者，都与生活息息相关。最近的文字，倘若不符合你的脾胃，请别犹豫，退订就好。倘若喜欢，也期待你的回复，哪怕就是简简单单回复「喜欢」两个字。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/13173322.html</link><guid isPermaLink="true">http://acyort.github.io/posts/13173322.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Tue, 30 Apr 2013 06:39:11 GMT</pubDate></item><item><title><![CDATA[推荐两首歌]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/376580/f7202486-a441-11e2-9425-2bd6eb0dbc20.png" alt="Screen Shot 2013-04-13 at 9 55 59 PM"></p>
<p>我是歌手昨天总决赛，一下就喜欢上了林志炫的『浮夸』：</p>
<p><a href="http://v.qq.com/page/a/0/0/a0012tff2o0.html">http://v.qq.com/page/a/0/0/a0012tff2o0.html</a></p>
<p>歌词写得相当好：</p>
<pre><code>夜晚星空 你只看见 最亮的那颗
人海中你崇拜话题最多 最红的那个
谁不觊觎着要站在舞台中央光环只为我闪烁
散场后落幕后谁关心你想什么 谁在乎你做什么
夸张不是罪过 能满足空洞乏味的生活
那窥探的眼 那议论的口 消遣了每一次茶余饭后

难道非要浮夸吗 无谓是非与真假
拼排场 包装 比身价 谁说真心话
谁说真心话 只要画面够惊讶 只要内容够爆炸
一张嘴开出了天花 嬉笑怒骂
只能在夜里镜子前 偷偷讲实话

你喜欢我 不喜欢我 是你的自由
我只是希望在某些时候 抓到你耳朵
为音乐梦想唱出第一个音符 从此就没放弃过
主观的 客观的 旁观的拦阻太多 好坏要自己承受
所以我要歌颂 让情绪释放在歌声之中
选择虽然多 好歌有几首 能够去感动人给些什么

难道非要浮夸吗 无谓是非与真假
拼排场 包装 比身价 谁是大赢家
谁是大赢家 只要画面够惊讶 只要内容够爆炸
一张嘴开出了天花 嬉笑怒骂
只能在夜里镜子前 偷偷讲实话

幸运儿不是我 因为我选择的路很难走
如果够出色 却不能出头 
至少也做到没第二个我

难道非要浮夸吗 内心也曾很挣扎
一个人努力的时候 有谁看见吗
有谁知道吗 唱到思绪都融化 唱到声音也沙哑
说是我着了魔也好 疯了也罢 
若不能挥洒 算什么歌唱的玩家
看着我正在为你发光
合不合胃口 都请欣然接受吧
下一刻要为你擦出火花
</code></pre>
<p>顺藤摸瓜，发现我是歌手里，林志炫还唱了一首非常打动人心的歌：『烟花易冷』。</p>
<p><a href="http://v.qq.com/page/r/0/j/r0011f0fiuj.html">http://v.qq.com/page/r/0/j/r0011f0fiuj.html</a></p>
<p>歌词出自方文山：</p>
<pre><code>繁华声 遁入空门
折煞了世人

梦偏冷 辗转一生
情债又几本

如你默认 生死枯等
枯等一圈 又一圈的年轮

浮图塔 断了几层
断了谁的魂

痛直奔 一盏残灯
倾塌的山门

容我再等 历史转身

等酒香醇 等你弹
一曲古筝

雨纷纷 旧故里草木深
我听闻 你始终一个人

斑驳的城门 盘踞着老树根
石板上回荡的是 再等

雨纷纷 旧故里草木深
我听闻 你仍守着孤城

城郊牧笛声 落在那座野村
缘份落地生根是 我们

听青春 迎来笑声
羡煞许多人

那史册 温柔不肯
下笔都太狠

烟花易冷 人事易分
而你在问 我是否还认真

千年后 累世情深
还有谁在等

而青史 岂能不真
魏书洛阳城

如你在跟 前世过门
跟着红尘 跟随我
浪迹一生

雨纷纷 旧故里草木深
我听闻 你始终一个人

斑驳的城门 盘踞着老树根
石板上回荡的是 再等

雨纷纷 旧故里草木深
我听闻 你仍守着孤城

城郊牧笛声 落在那座野村
缘份落地生根是 我们

缘份落地生根是 我们
伽蓝寺听雨声盼 永恒
</code></pre>
<p>喜欢这词、这曲。
喜欢林志炫那安静地唱着、却充满张力的感觉。
思绪万千，莫名眷恋。</p>
]]></description><link>http://acyort.github.io/posts/13156769.html</link><guid isPermaLink="true">http://acyort.github.io/posts/13156769.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sun, 14 Apr 2013 13:15:49 GMT</pubDate></item><item><title><![CDATA[简单还是一致（再续）]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/372586/6834e5ec-a363-11e2-9873-21edd2eff3a8.jpeg" alt="421b88b85ccd5b23b2f611c1915f2ba8a82970e0744a-3rCEIQ_fw580"></p>
<p>拔赤发完「<a href="https://github.com/lifesinger/lifesinger.github.com/issues/140">简单还是一致（续）</a>」一文后，一直想回复一篇，今天得空，回下。</p>
<h2 id="抛错时机">抛错时机</h2><pre><code>seajs.use('a', function(A) {
  A.doSth();
  console.log('a');
});

// some logic...

seajs.use('b', function(B) {
  B.doSth();
  console.log('b');
});
</code></pre>
<p>上面这段代码，在正常使用情况下，当 a 的 callback 里发生了错误，不会影响 b 的 callback 执行。因为正常情况下，a.js 和 b.js 并不会提前同步加载好，<code>seajs.use</code> 依旧是异步行为。和拔赤的预期是一样的。</p>
<p>假设出于某种考虑，提前加载了 a.js 和 b.js，比如：</p>
<pre><code><script src="a.js"></script>
<script src="b.js"></script>
<script>
seajs.use('a', function(A) {
  A.doSth();
  console.log('a');
});

// some logic...

seajs.use('b', function(B) {
  B.doSth();
  console.log('b');
});
</script>
</code></pre>
<p>上面这种情况下，<code>seajs.use</code> 的 callback 才是同步执行的，这时 a 的 callback 倘若出错，会影响 b 的 callback 执行。</p>
<p>但实际上，拔赤提到的那种分模块开发，绝大部分情况下是：</p>
<pre><code><script>
seajs.use('a', function(A) {
  A.doSth();
  console.log('a');
});
// some logic...
</script>

</script>
seajs.use('b', function(B) {
  B.doSth();
  console.log('b');
});
</script>
</code></pre>
<p>上面这种使用方式下，即便是同步执行，a 的 callback 执行错误，也不会影响 b 的 callback 执行。</p>
<p>也就是说，拔赤的担心，反而是一种理论派的担心，实际开发过程中，根本不用管 <code>seajs.use</code> 的 callback 执行是同步还是异步，使用者本就不应该关注这个内部机制。</p>
<p>这就和 Sub-Pub 事件机制一样，最朴实简单的事件机制是，天女散花式，可以理解为所有订阅者同时并发收到消息，而不要去理会是先进先出，还是先进后出。一个事件机制里，订阅者应该互相隔离，不依赖顺序，不依赖内部机制。</p>
<p>即便是同步执行情况，又把多个 <code>use</code> 写在了同一个 <code>script</code> 标签里，这时抛错个人觉得也是合理的。同一个 <code>script</code> 下，可以认为是同一段业务逻辑，当前面已经出错了，再执行后面已经意义不大，停下来不执行，抛出错误，反而简单，更容易发现和定位问题。特别是对稳定性要求很高的产品来说，及早抛错往往是更明智的选择。</p>
<h2 id="顺序">顺序</h2><pre><code>seajs.use(['a', 'b', 'c'], callback)
</code></pre>
<p>这个，拔赤理解错了哦。<code>use</code> 多个模块，是并发下载的，全部下载完成后，才执行 callback 函数。</p>
<p>a、b、c 之间如果有依赖，在模块定义里自己去指定就好，不需要 loader 层关心。</p>
<p>拔赤提到的 <code>sequential</code> 等参数设计，是把简单的问题搞得复杂了。loader 应该关注什么，什么应该交给 module 自身确定，职责的边界等等，这些问题，越明显越简单越好。</p>
<p>以上是顺带提下，下面说说今天最想说的。</p>
<h2 id="懂业务的框架">懂业务的框架</h2><p>拔赤这段话：</p>
<blockquote>
<p>这时，seajs就和旧有的类库有所不同，seajs提供“方法”和“思路”，而jquery、yui、mootools等则提供“工具”。两种思路直接决定了类库所面向的“问题集合”。因此，seajs需要“学习”，而jquery更多的则是需要“查阅”。</p>
</blockquote>
<p>seajs 其实是提供工具，是剪刀、锤子一样的工具，职责非常单一，能做什么，不做什么，很明确。这跟 jquery 是一样的。</p>
<blockquote>
<p>对于具体的场景来说，“一致”的约定难免单薄，相比之下，“工具”则更易于被大众接受。理论最终是要和业务结合，这也是为什么一个“懂”业务的框架看起来不美的原因。“懂业务”带来的复杂性和“强约定”带来的优雅的编程体验，两者之间，你会选择哪个？</p>
</blockquote>
<p>真正懂业务的框架是美的。看起来不美的业务框架，往往是因为抽象层次还不够，还未能真正抓住问题的本质，未能真正把业务中的各种纠缠梳理清楚。比如 Backbone 挺美的，AngularJS 也挺优雅，他们的背后，都是繁复的业务，各种各种业务，但是合理的抽象，不断的重构前行，让这些直接从业务中诞生的框架，依旧保持了优雅美丽。</p>
<p>最后，吐个槽。前端界的大部分讨论，都会比较肤浅的停留在表层。比如拔赤的文章，其实我很高兴看到这么一篇对 seajs 带点批判的文章，真的很高兴很高兴，我相信我当初给 OzJS 提交一些建议时，豆瓣的哥们虽然忙，但内心也是感激我的。可是，这种本来就非常少的交流背后，可以看出，拔赤对 seajs 基本还处于不了解状态，我对 ozjs 的了解，也还远远不够。在这种状态下，很多分析，都相当乏力，能给彼此带来的促进很有限。</p>
<p>一样的，也能看到不少对 jQuery、对 Backbone、对 xxx 的吐槽。在国内，我经常看见的情况是，这些吐槽的背后，并没有真的深入过，比如只看过 Backbone 的源码，跑过几个 demo 后，就开始吐槽了，说 Backbone 这不好那不好。这种吐槽，真心无力。个人觉得真正的吐槽，应该是在深入使用过之后，才有发言权。</p>
<p>就说这些吧。周末快乐。</p>
<p>（完）文 / 玉伯</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/13114764.html</link><guid isPermaLink="true">http://acyort.github.io/posts/13114764.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sun, 14 Apr 2013 14:22:42 GMT</pubDate></item><item><title><![CDATA[舞技与舞台]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/366659/69a1abe0-a28c-11e2-9d74-900461f6132b.jpeg" alt="a1869827f15efb9950b7695f5c8bb08bc41c467db886-jzqOny_fw580"></p>
<p>最近两篇文章，看到好几个类似回复：</p>
<blockquote>
<p>只要舞跳得好，就不怕没有舞台。</p>
</blockquote>
<p>这是一种武侠情结。比如躲到某个深山老林里，苦练某本秘籍，练就一身盖世武功后，一出道，天下闻名。</p>
<p>这听起来很诱人，但在信息时代，对技术人员来说，这是一个很危险的误导。实际情况经常是：</p>
<blockquote>
<p>因为舞台够大，才造就了世界级舞蹈高手。</p>
</blockquote>
<p>在互联网行业，很多技术人员的成长，离不开业务环境。举几个例子：</p>
<ol>
<li><p>前些年流行的性能优化，Facebook 的 BigPipe 让很多技术人员眼前一亮。为什么是 Facebook 的工程师想到？这跟 Facebook 工程师的精英文化有关，但我觉得，更重要的是因为 Facebook 的业务对性能优化的强烈需求。是 Facebook 这个舞台让很多技术有机会涌现，是 Facebook 造就了一帮技术牛人。类似的，还有 Google 等互联网公司，在国内，腾讯、百度、阿里等环境，也造就了一帮牛人。</p>
</li>
<li><p>在阿里，有一位神一样的技术大牛。这位大牛，跟随着淘宝的长大而成长。淘宝遇到的很多问题，让这位神苦思冥想、费劲周折。可以说，是淘宝造就了这位大牛，当然，这位大牛也给淘宝带来非常大的价值。如果这位神当初没有选择来淘宝，而是去了一个没有快速发展的公司，这位神，很可能成不了技术大牛。</p>
</li>
<li><p>对于前端来说也是如此。你若没做过上亿访问量的页面，就很难真正感受到每行代码的重量。你若没经历过一个错误操作导致的过百万的资损，就很难理解那些烦琐复杂的发布流程。</p>
</li>
<li><p>再比如类库组件，自己写写，给公司同事用用，与开源出来，给成千上万人用，这两种场景下带来的挑战有很大不同。去真正经历，才有成长。</p>
</li>
</ol>
<p>当然，舞台只是提供技术大牛成长的土壤，是否能成为大牛，还得看个人努力。脱离舞台去跳舞，很容易孤芳自赏，甚至遗憾终生。</p>
<p>舞台如此重要，在国内，对前端来说，有哪些好的舞台呢？</p>
<ol>
<li><p><strong>大公司</strong>。比如腾讯、阿里、百度。对不起，我只知道并初步了解这三家。这三家互联网公司，因为用户规模大，因为其快速发展的业务，对前端的挑战非常多。去这些公司，你会学到很多很多东西，不仅仅是技术成长。大公司带来的挑战是规模，在大规模下，很多事情的玩法都会不一样。</p>
</li>
<li><p><strong>有意思的中小公司</strong>。比如豆瓣、知乎等。有技术氛围的小公司，往往在技术比大公司走得更快。</p>
</li>
</ol>
<p>最后，虽然我前天和昨天的文章充满负能量，不过，如果你想来阿里的话，个人强烈推荐可以考虑支付宝。理由：</p>
<ol>
<li><p><strong>我们真诚。</strong>我们看到很多问题，在别人才遇到时，我们已经在尝试突围。认清现实，是迈向未来的重要一步。我们不忽悠你，不会给你画饼，我们需要真正的勇士，一起结伴前行。</p>
</li>
<li><p>阿里前端的两个方向： <strong>技术平台化和体验创新化</strong>，在支付宝都已经有了很不错的基础，目前在所有阿里前端团队里，这两块，支付宝是做得最好的。</p>
</li>
<li><p><strong>支付宝的未来是金融，每个人都离不开</strong>。我个人从淘宝来支付宝，很大一个原因，是因为淘宝我不怎么用，而支付宝，我每周都用。吃饭 AA、水电煤缴费、手机充值等等，以及未来的电子钱包梦，支付宝的业务愿景，最是让我心动。</p>
</li>
</ol>
<p>如果有兴趣，如果想来支付宝做前端，我们希望你是：</p>
<ol>
<li><p><strong>在前端开发领域已有 2-3 年经验</strong>。应届生勿扰，刚毕业一两年的也勿扰。因为名额有限，我们只招高手，有真正经验的高手。</p>
</li>
<li><p><strong>对代码有爱，就像爱 TA 一样</strong>。如果你有这种感觉，管你会什么，简历给我就行。</p>
</li>
<li><p><strong>对互联网行业有爱</strong>。我们招你过来，就希望你能干上 5 年以上。对事情有爱，才有坚持。</p>
</li>
</ol>
<p>如果满足以上 3 点，请发送简历到：yubo@alipay.com</p>
<p>（完）文 / 玉伯</p>
<p>题图：两个妹子，舞技高超。</p>
<p>PS：不好意思今天给支付宝打了一个广告，注意这是广告，不是软文，因为说的都是事实。前不久微博上有人联系我，想往 WTP 投放招聘广告。我说几个硬性条件：1）必须是我觉得对前端来说很不错的公司，描述属实。2）WTP 不提供免费广告，一条广告 2000 元，不议价，童叟无欺，也别跟我讲朋友感情，出得起钱才能表明真的求才若渴。3）广告费用会用在 Sea.js 生态圈和团队建设上。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/13060206.html</link><guid isPermaLink="true">http://acyort.github.io/posts/13060206.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Mon, 30 Jun 2014 03:53:19 GMT</pubDate></item><item><title><![CDATA[路在脚下]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/361464/50c7014c-a1c4-11e2-9d9f-d17a9cc8fc5a.jpeg" alt="fec55c9c66edeffbbab0cabab82d2c1ecd1e264a33a1a-Mmr29B_fw580"></p>
<p>昨天发完文章 <a href="https://github.com/lifesinger/lifesinger.github.com/issues/141">阿里前端的困局与突围</a>，在微信、微博上收到了不少很暖心的回复，还有朋友发来短信，很感谢。</p>
<p>想补充说明几点。</p>
<ol>
<li><p>再次强调，这是我看到的，阿里不少前端团队存在的问题。阿里很多业务还是以展现型页面为主，富交互型的业务也有，不过不多。对于展现型业务来说，对前端的要求，并不是很高。展现型页面的挑战，在流量上，在过亿的用户数上。但这一块，我们必须意识到，更多的挑战在后端，无论是请求数、还是数据存储，当用户过亿时，对系统都存在非常大的挑战。对于前端来说，主要能做的是性能优化，不过，真的有限。比如：12306 的前端真的不咋地，但一样能支撑过亿的访问量。</p>
</li>
<li><p>富应用对前端的要求很高。比如 GMail 等典型案例，没有前后端的通力配合，体验无法这么好。可是，在国内，如此成功的富应用，同时又有大规模用户的，我立刻能想到的是 QQ 邮箱。其他的也知道些，但用户数并不是很大，比如很多企业级应用的后台、豆瓣的阿尔法城等，阿里也有旺铺装修等平台，但真正面向大规模普通用户的，在国内还真少。像 Facebook 这种前后端都能玩得很深的平台在国内真心少。这一块，前端的舞台有多大，受限于产品形态。</p>
</li>
<li><p>前面两点，着重想说的是舞台很重要。如果刚进入前端行业，还是有非常多好玩的，还远不会触及天花板。但做得越多，时间越久，会发现真正能让前端持续发挥做好做精的产品并不多。比如淘宝首页，再怎么改版，也很难对淘宝整体业务产生核心价值。无论你承不承认，这就是事实。是否能通过前端技术，从产品形态层面挖掘出亮点，去为业务产生价值，这很值得思考。如何用技术驱动业务，是个很实在的问题。但很多时候，技术能否驱动业务，很大程度上取决于业务形态本身。比如，前端技术再牛，目前也很难让 Yahoo! 翻身了。</p>
</li>
<li><p>跳出阿里来看，其实海阔天空。比如去 Google、去 Facebook 等，都是机会。每个人都不太可能在一个公司待一辈子，没必要。</p>
</li>
<li><p>跳出前端来看，也海阔天空。做前端的，如果对设计有感觉，出去创业会有不少机会与挑战，当然也有风险。做前端的，如果对技术有情结，也大可朝深里钻。真正的技术成长，是没有语言界线的，前端、后端、网络、数据、移动、驱动，都可以去玩。活到老学到老，也是一种乐趣与选择。</p>
</li>
<li><p>对我个人而言，最大的感触是，不能有技术情结，但不能丢失的是技术情怀。</p>
</li>
<li><p>在阿里依旧有很多事情可以去做，比如之前提到的技术平台化、体验创新路，都是很有意思的事情，并且内心很认可这两个方向。既然认可，去做就行。</p>
</li>
<li><p>但做实事，莫问前程。人的成长往往在低头赶路时，掉下的汗水里。</p>
</li>
<li><p>马云和史玉柱今年都退休了，我比他们快点，我今天就退休了。退休的含义是，开始去做自己喜欢做的事情，并且不求回报。真正的放开、看淡，心里会有云朵飘过，还有那绚丽的彩虹。</p>
</li>
<li><p>很多时候，正是因为没有希望，才充满希望。因为未知而兴奋，因为不确定而坚定。</p>
</li>
</ol>
<p>（完）文 / 玉伯</p>
<p>题图：路在心里，更在脚下。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/large/68361562gw1e2xqaox0asj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/13011605.html</link><guid isPermaLink="true">http://acyort.github.io/posts/13011605.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Mon, 30 Jun 2014 09:05:40 GMT</pubDate></item><item><title><![CDATA[阿里前端的困局与突围]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/356552/8091c16e-a10b-11e2-9bff-a7008ecee73e.jpeg" alt="c9b65e2c86bf60ac89a4bfef2f7cdbc691ae61d41848e-LdbCtj_fw580"></p>
<p>最近发了两条微博：</p>
<blockquote>
<p>想起克军的一句话：前端研究，研究个屁~ 的确如此呀。补充下联：前端设计，设计个屁~</p>
<p>前端目前最大的困境是，如 HTML 一样，无论你承不承认，市场上并不太需要 HTML 高手。</p>
</blockquote>
<p>微博上的回复大部分歪楼了。上面两句话乍看有点激进，却是我的真实想法。</p>
<p>背后是一个问题：</p>
<p><strong>前端的价值究竟是什么？未来应该如何发展？</strong></p>
<h2 id="前端的价值">前端的价值</h2><p>如果你刚入行，或者从事专职前端工作未满 3 年，请忽略上面这个问题，并且尽量不要再往下看了。</p>
<p>我知道你会忍不住往下看，那就看吧。负能量有时也是正能量。真实面对所做的事，如实面对自己的真心，这是迟早的。有过痛，才真正懂得乐。</p>
<p>特别注意，下面说的前端，都是阿里的前端，其他公司切勿对号入座，每个公司的情况都不同。每个公司，前端的定位也会有差异。</p>
<p>阿里的前端，目前主要分两种：一种在 UX / UED 部门，另一种在技术部门，所做的事大同小异，都是负责界面交互层的开发。上游是 PD、交互、视觉等，下游是后端开发人员、测试等。技能主要是 HTML、CSS、JavaScript，有些前端团队比如支付宝还直接负责 Velocity 等模板层的开发。这是阿里目前前端的现状。</p>
<p>前端是后端数据的第一消费者，也是最贴近用户的程序员。</p>
<p>一切看起来很美。</p>
<p>前端的价值在哪呢？很多人会回答：</p>
<ol>
<li><strong>实现界面交互。</strong></li>
<li><strong>提升用户体验。</strong></li>
</ol>
<p>第一点是前端的本职工作，也是前端岗位存在的原因。第二点也不多说，前端做得好，对用户体验是有益的。</p>
<p>让人纠结的，是前端有价值，可是，这价值真的很重要吗？真的值得做为一个职业投入一辈子吗？</p>
<p>做技术的，可能都会有类似纠结。但传统技术，纠结相对少点。比如搞数据库的，有一堆牛人榜样，搞网络、安全等等的，也是如此。这个现实的背后，是因为</p>
<p>这批传统技术的背后，无论是数据库底层优化，还是网络优化、安全防范等等，做得好，对业务都能直接产生影响，比如大幅度降低硬件成本等等。 <strong>价值是直接的，可见的，不太会被质疑。</strong></p>
<p>然而前端的价值，没有人会直接否认，但看得明白的，都知道：</p>
<p>淘宝的核心用户体验，并非是 UI 层面带来的，而是 C2C 的模式，是同等品质下商品的价格，还有支付宝的便捷等等。前端的确很重要，但真的，也就那么着。比如京东，很多交互细节做得其实不咋的，但京东靠着靠谱的物流、货到付款等方式提升了整体购物体验。对阿里来说，用户体验非常非常重要，但前端在用户体验层面能做的其实很少很少。</p>
<p>一个事实：</p>
<blockquote>
<p>把国内大部分公司的 UX 部门解散掉，也不会太影响产品的体验。在国内，UX 主要还是起到美工的作用，虽然我不想承认。</p>
</blockquote>
<p>前端依旧是美工，而且仅仅是实现工。</p>
<p>在阿里，我们不得不承认一个事实：<strong>前端的确有价值，但放在全局来看，前端产生的价值并非核心价值。</strong> 在阿里，虽然前端的工作已经不可或缺，但对大公司而言，不可或缺的岗位多了去呢，不可或缺不代表有核心价值，我就不说了。</p>
<h2 id="前端的未来发展">前端的未来发展</h2><p>前端，往后是技术，往前是体验。我的理解，前端的未来发展，有两个方向：</p>
<ol>
<li><p><strong>前后端体系的融合，技术平台化。</strong> 范例是 Google、Facebook 等公司的技术体系，不细分前后端，都是 Web Developer，在整套技术平台上，Developer 都可以从后到前高效开发。技术平台本身由 Engineer 维护，有各个领域的高手，包括前端的。</p>
</li>
<li><p><strong>前端技术带来的体验革新，成为某些产品的核心竞争力。</strong> 典型的比如 Path，国外有很多创新型项目，体验是核心竞争力之一。在这类产品中， 前端带来的用户体验很关键。</p>
</li>
</ol>
<p>然而，上面两个方向，在阿里的现状下，困难重重：</p>
<ol>
<li><p><strong>技术平台化之路很难。</strong> 阿里现有的技术体系，前端只是薄薄的一层，要靠这薄薄的一层，来渗透甚至改革现有前后端开发模式，非常困难。支付宝算是走在前面，已经摸索了一年多，但越来越觉得，前端的绝大部分问题，其实都需要后端才能解决。去跨团队推动也可以，因为难，所以前行也挺有挑战挺有意义。可是，更悲催的事实是，技术平台化，前后端开发模式的融合，目前来看，并不是阿里的痛点，还没有到这一步，没这个强烈需求。需求不强烈，意味着缺了“天时”。很希望我的想法是错的。前后端的技术平台化之路，还有一个很现实的问题是，马云留下的隐患：平凡的人去做非凡的事。虽然现在有意不提这句话了。这句话很伤人，特别是技术人员，然而事实就是事实。即便技术平台能建成，在平台之上，阿里现有的开发人员，无论是前端还是后端，很多人可能还欠缺了不少能力。Facebook、Google 等玩起来，有个重要因素是精英文化。这话题不多说。现实的残酷，虽然也有方法是改变。</p>
</li>
<li><p><strong>体验创新之路也非常难。</strong> 在淘系可能相对好点，在支付宝，前几年首要的问题是安全、稳定，接下来几年之内，依旧是安全、稳定。创新受产品形态的影响非常大，没有一个好的产品，妄谈创新。可以有不少微创新，可以有很多小而美，但目前都触不到痛点，隔靴搔痒。真正承担阿里用户体验的，是 CDN 团队、是数据库团队、是 PD、是运营、是大安全…… 继续希望我是错的。</p>
</li>
</ol>
<p>以上两个方向，虽然困难重重，但在一些新领域，却充满机会与希望：</p>
<ol>
<li><p><strong>无线领域</strong>。 未来是属于无线的，这话说到心坎上。目前阿里的无线才起步，起步意味着百废待兴。无论是前后端的技术体系，还是产品的体验创新，在无线领域，前端的机遇与挑战都很多。并且其价值，有可能变成核心价值。这一点，希望我的判断是对的。</p>
</li>
<li><p><strong>Node.js 领域</strong>。严格来说是 JavaScript 程序员的新舞台。通过 Node，前端程序员可以摇身一变，变成传统程序员。数据库、网络、业务架构等等技术核心领域，都可以通过 JavaScript 来达成。Node 社区是迷人的。同样，希望我的判断是对的。</p>
</li>
</ol>
<p>上面的分类有点混乱，下面继续乱谈：</p>
<ol>
<li><p><strong>创业</strong>。 在很多产品中，前端虽然很难产生核心价值，但在有竞争的地方，附属价值经常会成为核心竞争力。比如出去创业，如何在大量同类产品中脱颖而出，前端界面层的实现非常关键。可是，无论是淘宝，还是支付宝等，目前都已经过了初期创业期。有时真希望，易趣如果还强大着该有多好。</p>
</li>
<li><p><strong>转行</strong>。 的确，没必要因为懂 JavaScript，就一辈子做前端。没必要限定自己的发展，可以做 2-3 年前端，然后再去做 2-3 年开发，还年轻的话，可以继续尝试各种岗位，说不定，10年后，就变 CTO 了。</p>
</li>
</ol>
<p>从人的一生来看，前端只是一段很小的旅途。它能带给你我们的已经不少，舍弃惯性，脱离舒适区，长远来看才能走得更远。放弃有时也是坚持，重要的是你心中的梦是什么。</p>
<h2 id="感悟与坚持">感悟与坚持</h2><p>纯技术上，前端目前的很多发展，只是在满足业务，并没有真正对业务带来“从无到有、促进变革”的变化。从公司的角度讲，并不需要那么多前端牛人。这是我那条说 HTML 高手是屠龙术的微博的含义。</p>
<p>另一个角度上，前端技术这些年的变化，无论是 YUI 的发展、还是最近两三年兴起来的模块化开发理念、以及 Node.js 带来的前端工具变革、还有 Backbone 等类库背后的 MVX 的发展，这些都切实推动着前端往前发展，虽然很慢很慢，虽然短时间内很难直接影响业务价值，但我相信，这类工作的价值，也很大。</p>
<p>一类是直接促进业务发展，一类是缓慢带动人员的成长。这两类工作，都非常有价值。一个着力于现在，一个发力于未来。</p>
<p>看起来，路都很清楚。然而我们都是人不是神。最后以一段人与人之间的对话来结束这篇充满负能量的文章：</p>
<blockquote>
<p>章小新：有一个现实是，如果在这块上长时间的价值不被认可，那很有可能真正产出的价值没有我们想想象的大，是否是我们自己深限其中？ 有时虽然不想往这方面想，但又是不得不仔细深思的问题。</p>
<p>玉伯：毕竟我们都是人，要坦诚面对自己的真心，包括贪欲。比如一个事，如果做了 5 年，依旧得不到直接认可，也没更多物质上奖励，我估计你也很难做下去了，或者就是打着酱油，干着其他有意思的事情去了。</p>
<p>章小新：哈，今天的话题的确是沉了点，今天上午还和同事们讨论过~~~ 先认清自己，再从容微笑去面对。</p>
<p>玉伯：从容微笑谈何容易。从容微笑的一个前提是，认清了自己，找到了今后要走的方向，知道接下来该怎么走下去。</p>
<p>李牧：这么说好像我有多么淡定一样。。其实没有了。会很计较，但是现实面前了。 </p>
<p>玉伯：从容不是有希望，也不是在路上，而是自己喜欢自己做的事情。又变鸡汤了，不过发现很多鸡汤越来越有道理，得真心去信。真正的认可是自己给自己的。</p>
<p>柏林：我不是做前端的，一直在关注大家。 呵呵。看到这句话蛮有感触，要体验过鸡汤的过程，才能品味到真实的味道。（说得不好哈）</p>
</blockquote>
<p>（完）文 / 玉伯</p>
<p>PS：把这篇文章发出来，很犹豫。把这些想清楚的事情说出来，虽然可能会影响团队士气，会打击工作不久的前端，但隐瞒更不可取。 前端还很年轻，如何发展，如何前行，需要所有前端们一起来思考。我们需要未来，也需要真实。我们不需要的是混日子。我们往哪里去，取决于我们自己。</p>
<p>题图：路在心里，更在脚下。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/large/68361562gw1e2xqaox0asj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12967692.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12967692.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 30 Sep 2016 07:46:21 GMT</pubDate></item><item><title><![CDATA[简单还是一致（续）]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/351057/0cfbcdb2-a039-11e2-8ecb-044d40aa8b83.jpg" alt="1013990952e91f73aa"></p>
<p>前不久发了一篇文章：<a href="https://github.com/lifesinger/lifesinger.github.com/issues/139">简单还是一致</a>，引起了不少热议。淘宝前端工程师拔赤就此总结了一篇文章，非常值得思辩。全文如下。</p>
<hr>
<h2 id="一段代码的两种理解（1）">一段代码的两种理解（1）</h2><p>看这段代码：</p>
<pre><code>seajs.use('a', function(A) {
  A.doSth();
  console.log('a');
});

// some logic...

seajs.use('b', function(B) {
  B.doSth();
  console.log('b');
});
</code></pre>
<p>问题来了，我们想象这段代码出现在淘宝首页，淘宝首页的结构是被分割为很多个“区块”，每个“区块”由不同业务线中的同学开发维护，他们之间互不知晓，最终首页是被“拼凑”而成的。那么这个例子中，若A的代码报错，会不会影响B的代码？</p>
<p>按照玉伯的设计，因为同步执行回调，当然会影响。怎么办？淘宝首页架构师要call正在休假的A让他去改<code>A.doSth()</code>的逻辑以适应seajs的简单性吗？</p>
<p>本来是一个小功能出问题，导致整个页面瘫痪掉，这种架构当然有问题。</p>
<p>这段代码真实的语义应当是：</p>
<pre><code>seajs.use('a', function(A) {
  A.doSth();
  console.log('a');
}, {
  async: true // 异步执行callback
})

// some logic...

seajs.use('b', function(B) {
  B.doSth();
  console.log('b');
}, {
  async: false // 同步执行callback
})
</code></pre>
<p>seajs的“一致性”隐藏了这个重要的配置。</p>
<h2 id="一段代码的两种理解（2）">一段代码的两种理解（2）</h2><p>看这段代码：</p>
<pre><code>seajs.use('a', 'b', 'c', callback)
</code></pre>
<p>这段代码有两种理解</p>
<ul>
<li>我想依次执行<code>a.js</code>，<code>b.js</code>，<code>c.js</code>，这时a、b、c之间有依赖</li>
<li>我想尽快执行<code>a.js</code>、<code>b.js</code>、<code>c.js</code>的代码，三者无依赖</li>
</ul>
<p>对于第一种情况，三段代码的加载顺序无要紧，只要三者顺序执行即可，这和浏览器中写入script标签一样。</p>
<p>对于第二种情况，因为有“约定”三者无依赖，每段js代码加载完成后立即执行。</p>
<p><code>a.js</code>、<code>b.js</code>、<code>c.js</code>之间到底有无依赖，在这段代码中是看不出来的。其实上段代码的真实语义其实等同于</p>
<pre><code>seajs.use('a', 'b', 'c', callback, {
  sequential: false // 不要顺序执行a,b,c
});
</code></pre>
<p>问题又来了，seajs默认三者之间无依赖。如果真有呢？</p>
<p>同样，seajs的“一致性”隐藏了这个配置信息。</p>
<h2 id="小结">小结</h2><p>其实，代码所蕴含的信息，不会因为代码量减少而减少。代码过于简洁，就需要额外的“规约”来传达这些重要信息。</p>
<p>“黄金法则”中提到的“简单性”就是指约定，约定共识，做事才会简单。其中提到的“完整性”是指的底层机制的健壮，说的直白一点就是面向场景的设计。</p>
<p>这时，seajs就和旧有的类库有所不同，seajs提供“方法”和“思路”，而jquery、yui、mootools等则提供“工具”。两种思路直接决定了类库所面向的“问题集合”。因此，seajs需要“学习”，而jquery更多的则是需要“查阅”。</p>
<p>对于具体的场景来说，“一致”的约定难免单薄，相比之下，“工具”则更易于被大众接受。理论最终是要和业务结合，这也是为什么一个“懂”业务的框架看起来不美的原因。“懂业务”带来的复杂性和“强约定”带来的优雅的编程体验，两者之间，你会选择哪个？</p>
<p>（完）  文 / 拔赤</p>
<p>题图：很漂亮的三片叶子。对于叶子，你喜欢简单，还是一致？抑或复杂？</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/large/68361562gw1e2xqaox0asj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12806408.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12806408.html</guid><dc:creator><![CDATA[jayli]]></dc:creator><pubDate>Thu, 11 Apr 2013 10:47:27 GMT</pubDate></item><item><title><![CDATA[简单还是一致]]></title><description><![CDATA[<p><img src="https://i.alipayobjects.com/e/201304/2WWTNwVz6S.jpeg" alt=""></p>
<p>今天要讨论的问题挺有意思，来自 SeaJS 中的一个实现细节。描述如下：</p>
<pre><code>seajs.use('a', callback)
</code></pre>
<p>假设模块 a 对应文件 a.js，上面的代码，会先下载 a.js，下载并执行完成后，再调用 callback 方法。</p>
<p>问题来了：</p>
<pre><code><!-- 提先加载好模块 a -->
<script src="a.js"></script>
<script>
// use 时，模块 a 已就绪
seajs.use('a', function() {
  console.log(1)
})

console.log(2)

// 请问 console 中先输出 1 还是 2 ？
</script>
</code></pre>
<p>问题可以简述为： <strong>对于已经就绪的模块，在 use 时，callback 是同步执行还是异步执行。</strong></p>
<h2 id="现状">现状</h2><p>不同 loader 的处理策略不同：</p>
<ol>
<li>在 SeaJS 2.0 中，输出 1 2</li>
<li>在 RequireJS 2.1.5 中，输出 2 1</li>
<li>在 YUI 3.9.1 中，输出 1 2</li>
<li>在 KISSY 1.3 中，输出 2 1</li>
</ol>
<p>测试代码：<a href="https://github.com/lifesinger/lifesinger.github.com/tree/master/lab/2013/callback-order">callback-order</a></p>
<h2 id="一致认可的观点">一致认可的观点</h2><p>与同事讨论后，一致认可的是：</p>
<p><strong>无论同步还是异步执行 callback，都不应该影响最终结果。</strong></p>
<p>即</p>
<pre><code>seajs.use('a', callback)

// 这里的代码，不应该依赖上面 callback 的执行结果
</code></pre>
<h2 id="异步执行的观点">异步执行的观点</h2><p>在 KISSY 1.3 之前，当模块已就绪时，callback 是同步执行的。1.3 时，调整成了异步执行，考虑点为：</p>
<ol>
<li><p><strong>保持一致性</strong>。无论模块是否就绪，始终让 callback 保持异步执行。</p>
</li>
<li><p>在 KISSY 1.2 的实际使用中，会有人让 use 后面的代码依赖 callback 的执行，当把前面的 script 引入去掉时，就出错了。为了避免这种误用，改成了异步，强制使得 use 后面的代码不能依赖 callback 的执行。</p>
</li>
</ol>
<p>具体实现原理，是在调用 callback 时，始终放在 setTimeout 中执行。</p>
<h2 id="同步执行的观点">同步执行的观点</h2><p>在模块已就绪时，SeaJS 和 YUI3 中 callback 是同步执行的。考虑点是：</p>
<ol>
<li><p><strong>保持简单性</strong>。因为代码本就不应该依赖 callback 的执行时机，因此加一个 setTimeout 显得多余，增加了复杂性。</p>
</li>
<li><p>同步性还是有用的，只要用户了解这一规则。比如可以提前引入打包好的关键模块，这样在 use 时，可以确保立刻执行，有利于页面 TTI （Time to Interact）时间的优化。setTimeout 的话，执行时机变得不可控。</p>
</li>
</ol>
<h2 id="两种观点的背后">两种观点的背后</h2><p>这个问题，让我想起了一篇经典老文：<a href="http://forum.pusuo.net/posts/list/2312.page">简单之美——系统设计黄金法则</a></p>
<p>文章中提及两种经典的设计哲学：</p>
<pre><code>1）MIT Approach

　　简单性：设计必须简单，这既是对实现的要求，也是对接口的要求。接口的简单要比实现的简单更加重要。
　　正确性：设计在任何值得注意的方面都要保证正确。不正确是绝对不允许的。
　　一致性：设计必须保持一致兼容。设计可以允许轻微少量的不简单和不完整，来避免不一致。一致性和正确性同等重要。
　　完整性：设计必须覆盖到实际应用的各种重要场景。所有可预料到的情况都必须覆盖到。简单性不能过度的损害完整性。
</code></pre>
<p>来看另一个世界：</p>
<pre><code>2）New Jersey Approach

　　简单性：设计必须简单，这既是对实现的要求，也是对接口的要求。实现的简单要比接口的简单更加重要。简单是设计中需要第一重视的因素。
　　正确性：设计在任何值得注意的方面都要求正确。为了简单性，正确性可以做轻微的让步。
　　一致性：设计不能过度不兼容一致。为了简单，一致性可以在某些方面做些牺牲，但与其允许设计中的这些处理不常见情况的部分去增加实现的复杂性和不一致性，不如丢掉它们。
　　完整性：设计必须覆盖到实际应用的各种重要场景。所有可预料到的情况都应该覆盖到。为了保证其它几种特征的品质，完整性可以作出牺牲。事实上，一旦简单性受到危害，完整性必须做出牺牲。一致性可以为实现的完整性作出牺牲；最不重要的是接口上的一致性。
</code></pre>
<p>回到我们的问题，可以看出 RequireJS、KISSY 的背后是 MIT 理念，强调一致性，可以牺牲简单性。SeaJS、YUI 的背后则是 New Jersey 理念，追求简单性，可以放弃部分一致性。</p>
<h2 id="最后">最后</h2><p>你的观点是什么？</p>
<p>（完）</p>
<p>文 / 玉伯</p>
<p>题图：最爱的莲花，即简单，又一致。</p>
<p>PS：爱丽丝那篇文章还没写好，太多思绪。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/large/68361562gw1e2xqaox0asj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12688281.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12688281.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sat, 06 Apr 2013 15:28:56 GMT</pubDate></item><item><title><![CDATA[前端业界聚焦（3月刊）]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/323998/269132fc-9ad6-11e2-9142-2146dcbf0bd1.jpeg" alt="0"></p>
<p>大家好，本周 WTP 主要将由偏右（@前端工程师）维护更新。新的一周新的一月要有新的气象，今天我们没有月经贴，没有感悟，没有教唆。我们来看看这一段时间内国内外的前端业界都有哪些新闻和变化。</p>
<p>停下来看看路，你会走的更远。</p>
<hr>
<ol>
<li><p>流行全球的 jQuery 将在其即将发布的 2.0 版本正式改名为 jFind，基金组的一些成员表示无法容忍一个没有作为 API 的动词出现在名称中，反对者则认为应该把 <code>$().find</code> 方法改名为 <code>$().query</code> 。</p>
</li>
<li><p>美国饮料业巨头可口可乐公司今日向亚特兰大州法院提交了一份诉讼，起诉对象是所有美国互联网公司。原因是该公司发现在几乎所有页面上都使用了一种叫做 CSS Sprite 的前端技术，该公司认为其严重侵犯了旗下品牌雪碧（Sprite）的品牌权。据专业人士透露，可口可乐公司对此次诉讼信心十足，几个主要的互联网公司很可能将被迫放弃这个技术的现有名，业已准备了几个改名的预案，其中呼声最高的名称是 CSS Shit。</p>
</li>
<li><p>由于抗议其公司禁止员工在家远程办公的规定，雅虎著名前端开发框架 YUI 的核心开发小组，决定将 YUI 完全本地化，未来用户可能需要到雅虎公司购买相应的安装光盘才能访问雅虎。</p>
</li>
<li><p>知名前端调试工具 Firebug 由于遭受 Chrome 开发者工具的冲击显得近况不佳。其雄心勃勃的开发团队近日开始发力，准备在未来几周释出三个新版本，其中备受瞩目的 2.0 版中 Firebug 将正式更名为 Fire，原因是该团队计划在这个版本中修复所有的 bug。</p>
</li>
<li><p>日前国内有著名工程师吐槽前端领域的 CSS 和 JS 开发工程师分工过细。后来该工程师得知国内页面重构团队的妹子比例后，收回了上述观点，并计划在今夏筹备重构团队。</p>
</li>
<li><p>今日国内一知名前端团队负责人在其微博上表示“前端研发，研发个屁啊”，业界分析这可能是该公司看衰此行业的信号，提醒广大计算机应届毕业生谨慎选择方向。相关链接：<a href="http://weibo.com/1640297597/zq7tI2YL9">http://weibo.com/1640297597/zq7tI2YL9</a></p>
</li>
<li><p>新浪首页在历经十年后于今日再次大规模改版，上线后褒贬不一，据说有大量老用户投诉新版页面太过整洁清晰，实在难以适应。同天搜狐首页的访问量有明显上扬。</p>
</li>
<li><p>春节过后国内大量前端工程师跳槽，据说目标企业主要是米其林和普利司通等五百强外企。</p>
</li>
<li><p>国内著名开源框架 SeaJS 和 spm 今天晚上将同时发布 2.0 版本，大约八点二十发。</p>
</li>
</ol>
<p>（完）</p>
<p>题图：支付宝前端团队某组妹子合影。</p>
<p>本社不定期持续坚持看心情发刊，欢迎大家投稿。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12662051.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12662051.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 03 Jan 2014 03:51:14 GMT</pubDate></item><item><title><![CDATA[会议工具分享]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/317140/a06b5d24-985a-11e2-9e18-0a49002e80ec.jpg" alt="d8e41a5d46ba030bb9057eacf0152417"></p>
<p>在公司开会，会议室是个大麻烦，涉及远程会议时，更麻烦。今天没什么心情，只分享些与会议相关的小工具。</p>
<p>如果公司财大气粗，有充足的视频会议室，可以用思科那一整套解决方案，下面就不用看了。然而实际情况是，视频会议室永远不够用，甚至投影仪都不够用。</p>
<p>对技术人员来说，远程会议最需要解决的只有两个：</p>
<ol>
<li>声音。</li>
<li>屏幕共享。</li>
</ol>
<p>第一个问题，解决方案一堆，个人推荐微信的对讲机。</p>
<p>第二个问题，也有很多解决方案。个人最喜欢的是一个免费方案：<a href="https://join.me/">join.me</a> 下载安装后，就可以分享屏幕，对方通过浏览器查看。</p>
<p>如冯大辉说的一样，大部分会议有毒。最好的方式还是尽可能减少会议，非开不可，也一定要严格控制时间。很多时候，特别是需要思考的东西，通过邮件、GitHub 等方式会更有效。真的，我从不骗人。</p>
<p>（完）</p>
<p>题图：完全看不懂，但觉得很贴题。</p>
<p>最后来个广告：4 月 1 日会正式发布 seajs 2.0 和 spm 2.0，信不信由你。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12600493.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12600493.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sat, 30 Mar 2013 11:31:54 GMT</pubDate></item><item><title><![CDATA[晋升面试的几点心得]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/313429/43cec522-97ad-11e2-8ce8-90ddf9826218.jpeg" alt="27301d36664203784868c7936730eef277fd21cbc759-Ou0eyH_fw580"></p>
<p>最近忙晋升面试，面了不少同学，有些感慨。晚上团队聚餐，回来有点晚，长话短说，简单聊几点最有感触的。</p>
<ol>
<li><p><strong>要融入业务，要关注场景。</strong> 技术人员最喜欢去造轮子，造轮子是个好习惯，但如何造很有讲究。要更多地去看到轮子所承载的车身，自行车轮子和汽车轮子虽然都是圆的，但有明显不同。除了车身，还需要关注所走的路，小轿车和越野车的轮子有很大差异。需求决定功能，场景决定架构。在商业公司，离开业务不会有技术。好的前端工程师，都是产品工程师，是通透的。</p>
</li>
<li><p><strong>做事要坚持，也要顺势而为。</strong> 坚持是每天定时起床，坚持也是对不会的事情说不。快速完成是坚持，小步慢跑也是坚持，不同的产品需要不同的节奏。拥抱变化也是坚持，顺潮而动，顺势而为，这需要勇气。敢于迈出第一步，往往就真的已经完成百分之五十。当然，你有可能成为烈士，也有可能成为英雄。结果好还是坏，就是前瞻性。</p>
</li>
<li><p><strong>能让别人自愿帮你做事，协同共赢，这就是生态圈。</strong> 阿里是个江湖，但江湖不意味着自封山头。心有多大，舞台就有多大，这句话不是空谈。心态很重要，心态会影响视野，视野限定做事的方式。中国人很聪明，总会想着自己搭建一个平台，让别人来协助共建。但更重要的是，能放下，去发现已有的平台，奉献自己的力量去协助他人的成功。影响力取决于你能帮助到多少人，而不是有多少人来帮助你。放下很难，但一旦懂得放下，整个世界都是你的。</p>
</li>
</ol>
<p>成长之路有两种，一种在脚下，需要踏踏实实去走。另一种在心里，我们写的是代码，代码背后却是诗歌、是哲学、是做人。</p>
<p>（完）</p>
<p>题图：路，很远很迷茫。偶尔，需要坐下来想想。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12564844.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12564844.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Tue, 31 Mar 2015 09:21:02 GMT</pubDate></item><item><title><![CDATA[文字排印与标记语言]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/306455/140a06d0-9681-11e2-9fb4-7168501a6940.jpg" alt="922cbf39c55bb1fa86b378c50a676175"></p>
<p>今天的文章来自支付宝交互技术部前端工程师南伯。南伯是个天才般的少年，写代码对他来说是种享受。南伯兴趣广泛，从旅游、绘画、钢琴，到文学、排版、摄影等等，兴趣盎然，且都略有研究。下面是文字排印与 Markdown 标记语言的一篇文章，欢迎阅读。</p>
<hr>
<h1 id="文字排印与标记语言">文字排印与标记语言</h1><p>文 / 南伯</p>
<p>许多年前，我也曾想过将来要做一个文字工作者，结果现在从事了互联网行业。这次单从互联网从业人员的角度谈文字排印。</p>
<p>提到「标记语言」，不免会让不知情者以为高深，其实很简单，正如某言「无技术含量​​」。然而真正要做好，亦非易事。糟糕的排版随处可见，例如在一段文字中突兀出现很大几个字，又或者一段黑色文字中夹杂几句红的绿的黄的句子，更可憎的是有些文字还一闪一闪亮晶晶，这样的例子在互联网上比比皆是，不忍卒读。通俗来讲，称为暴发户气质。</p>
<p>好的排版（指单篇文章）是为了文章的易读性，让人看着愉悦看着舒服，实际经验告诉我们，略微泛黄的奶油色底加黑色文字是让人最愉悦的搭配。当然，除了颜色，还有字体、大小、字间距、行间距等诸多因素影响着排版的效果。</p>
<p>做为写作者，我们应该关注的真的是文章的显示效果么？当我们说「把这段文字加粗」，我们的本意是想强调这段文字，加粗只是表象，强调并不意味着一定要加粗。相反，我们所需要的是理解文字段落的本质，忽略其表现效果，一个好的开头就是改变我们的思维方式，回归本原， <strong>「这段文字需要着重强调一下」</strong>。</p>
<p>正如多年前的互联网，当时（也许现在还存在）还没有样式分离的观念，前端开发者迷失在样式的表象上，忽视了事物的本质。于是，各种 <code>&lt;font&gt;</code> 之类的 HTML 标记大行其道。但是现在的情况好很多了，比如我们会用 <code>&lt;strong&gt;</code> 而不是 <code>&lt;b&gt;</code> 来「加粗」文字，这样的改变体现的正是观念的转变，<code>&lt;b&gt;</code> 意味着 bold，是表象上的加粗，<code>&lt;strong&gt;</code> 体现的是著重强调，是本质上的加粗。这是一小步改变，也是一大步改变。</p>
<p>也许你并不了解什么是 HTML，什么是 <code>&lt;strong&gt;</code>，什么是 <code>&lt;b&gt;</code>，这没有关系，你正在看的这个网页其实就是一个HTML。但是你不需要知道这些。因为有更简单，更多适合写作者的标记语言—— Markdown。</p>
<p>已经有不少人谈过 Markdown，例如：</p>
<ul>
<li><a href="http://apple4us.com/2012/02/why-writers-should-use-markdown.html">为什么作家应该用 Markdown 保存自己的文稿</a></li>
<li><a href="http://www.yangzhiping.com/tech/r-markdown-knitr.html">Markdown 写作浅谈</a></li>
</ul>
<p>普遍的误解是，这些标记语言是程式师们的东西。但是正如其作者 John Gruber 所说：</p>
<blockquote>
<p>Markdown is a text-to-HTML conversion tool for web writers.</p>
</blockquote>
<p>它从一开始就不是所谓 Geek 的东西，恰恰相反，它是为你这样的文字工作者所设计的。它很简单，它在 IT 界所以越发流行也正是因为其简单易学，甚至有人称其学习成本为零。</p>
<p>我们只需要简单介绍一下基本的文法，聪明者如你应该不需要五分钟就可学会。</p>
<ul>
<li><p>一级标题（大标题）</p>
<pre><code># 这是一级标题
</code></pre>
</li>
<li><p>二级标题（副标题）</p>
<pre><code>## 这个是副标题
</code></pre>
</li>
<li><p>那么三级标题，四级标题也就很容易猜出来了</p>
<pre><code>### 三级标题
#### 四级标题
</code></pre>
</li>
<li><p>图片与链接</p>
<pre><code>![image description](image URL)
[link text](link URL)
</code></pre>
</li>
<li><p>着重强调</p>
<pre><code>*emphasize* **strong**
_emphasize_ __strong__
</code></pre>
</li>
<li><p>引用的内容</p>
<pre><code>> 生命是一袭华美的袍，爬满了虱子。
</code></pre>
</li>
<li><p>有序列表</p>
<pre><code>1. 有序列表第一条
2. 有序列表第二条
</code></pre>
</li>
<li><p>无序列表</p>
<pre><code>* 无序列表
* 无序列表
</code></pre>
</li>
</ul>
<p>现在你已经了解了所有你需要知道的了，这难道能叫做难学么？忘记介绍段落了，你只需要保证段落之间有空行就可以了。</p>
<p>也许你还需要一个编辑器来辅助你，例如我现在正在用 Mou 来写作这篇文章。对，你所看到的这篇文章正是用 Markdown 写作的。也许你对自己的写作不放心，需要实时预览，借助<a href="http://www.zhihu.com/question/19637157">这些工具</a>也许能让你更放心。其实真的不需要，例如当我写作这篇文章时，我并不需要即时预览，我知道我写出来的效果一定就会是我想要的。</p>
<p>另外我正在编写一个网页版的 <a href="http://lab.lepture.com/editor/">Markdown 编辑器</a>，虽然还没有完成，不过已经足以帮助你熟悉一下 Markdown 的文法了。我也为你准备了一份详细的<a href="http://lab.lepture.com/editor/markdown">英文版文法</a>说明。</p>
<p>也许你还会觉得这些文法不​​够用，你还是想把你的文章弄得花花绿绿的，我想这篇文章不是为你而写的。我也深深为你的审美捉急呀。</p>
<p>（完）</p>
<p>原文地址：<a href="http://lepture.com/work/typography-and-markdown">http://lepture.com/work/typography-and-markdown</a>
南伯新浪微博：<a href="http://weibo.com/lepture">@lepture</a></p>
<hr>
<h3 id="玉伯有话说">玉伯有话说</h3><ol>
<li><p>南伯这篇文章介绍了 Markdown 基础用法，非常推荐大家尝试，特别是程序员。如果经常用 GitHub，在 Issue 等页面，可以摁 m 键，快速查看 Markdown Cheat Sheet，用上几次后，就会非常熟悉，效率倍增。</p>
</li>
<li><p>Markdown 对我来说，也是用上后就很难离开的东西。自从有了它，就很少开 Word 了。在此推荐 Markdown 编辑器 Byword，安静、自然、舒适，码起字来，如坐幽谷，泉水叮咚。</p>
</li>
<li><p>上个月去上海参加了一席。一席关注人文、科技、白日梦，有点像国外的 TED 论坛。一席上个月的视频已放出，特别推荐蔡朝阳老师：<a href="http://v.youku.com/v_show/id_XNTMxNDc4MjA0.html">以自由看待教育</a> 无论你现在有没有小孩，这都是值得一听的讲演。</p>
</li>
<li><p>霜波说心理学系列，微信上收到了大量温馨的反馈，也有少量说这是心灵鸡汤没意思的回复。无论在微博还是微信上，某篇文字是否心灵鸡汤，我觉得主要取决你阅读时的心态。你是否真的沉浸去读了、去思考了。把自己掏空，抛去一些自以为是的预设，你会看到更多美好。</p>
</li>
</ol>
<p>题图：好的排版，简单、舒适、自然。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12482756.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12482756.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 02 May 2014 04:17:05 GMT</pubDate></item><item><title><![CDATA[付出与得到]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/301842/d3bf6f5a-95ec-11e2-8cd2-7b6cef1d7dcb.jpg" alt="ca9a5e1d6614cb1ab4fc130c3658d445"></p>
<p>昨天发出微信后，“想要霜波”的回复数都数不清，女性的魅力就是大呀。霜波是阿里的一位同事，目前是妈妈了，有个可爱的女儿叫杭杭。简介到此，用文章说话。</p>
<hr>
<p>杭杭在玩拼图，有几块放错了，很着急，我过去帮她：“妈妈帮你。”  </p>
<p>她却突然生气了：“不要你帮。”还狠狠地推开我手。</p>
<p>我很奇怪，我想帮助她，我想付出我的帮助，为什么她要生气呢？第二天去问老师，老师笑着说：“她得到的是你在怀疑她的能力。”  </p>
<p>记得有个同学，独子，家境相当好，成绩也一直很好，高考的时候却当场呕吐不止，最后未能进入理想的学校。父母很伤心：“为了他我们什么能做的都做了。”他也很痛苦：“父母为我做了太多，什么希望都在我身上，我压力太大了。”父母认为自己付出的都是爱，他收到的却是压力。  </p>
<p>社会学家说当代社会情感破产，因为期望得到的远远多于实际得到的，如何来纠正？</p>
<p>其一： <strong>降低期望值</strong>，我们对他人报以了太多期望，所以带来太多失望。  </p>
<p>其二： <strong>勇于付出</strong>，不要问别人能为你带来什么，先问自己能为别人带来什么。证明你真正价值的是你付出的能力，而不是你已经得到的财富，金钱和地位。   </p>
<p>最后一点： <strong>让付出和得到对等</strong>。这是所有人都容易忽视也最难实现的一点。因为主体不同，我们很难保证我们付出的就是对方得到的。换位思考有一些帮助，在两个人形式相当的情况下能有很大帮助，甚至能做到这一点的少数人已经相当之优秀。但是还是有很多人处于不同的位置，有着不同的心情，还有着不同的特质。就好像爬山对某些人是享受，对于少数人却是痛苦不堪。己所不欲勿施于人多数人都能理解，己所欲亦勿施于人却有少有人能够理解。尤其是家长和小孩，大人和小孩看到的世界根本就是不同的世界，我们很难体会到小孩子的感觉和思维，这个时候只能通过询问和沟通来了解小孩子的需求，了解他们真正的需要。太多小孩子无法准确表达自己的感受，也不知道什么时候来表达自己的感受，但是不能因为这样就忽视了和她的对话。   </p>
<p>以前陪杭杭睡觉是我最痛苦的事情，她会翻来覆去做很长时间无聊的事情才会睡着。但是有一次杭杭的幼儿园发了一份作业，要求记录杭杭最喜欢妈妈做的事情是什么。我问杭杭：“你最喜欢妈妈做什么？”她回答：“我最喜欢妈妈陪我睡觉。”我又问：“最不喜欢妈妈做什么？”她想想回答：“最不喜欢妈妈陪爸爸睡觉。”这句话我想了好久也没敢记录上去。那一次的对话让我突然觉得陪她睡觉是件有意义开心的事情，于是每每加班也会打电话回去说：“我会尽量赶回去陪杭杭睡觉。”  </p>
<p>如果真的爱不妨多去问问对方：“你最喜欢的什么?”“你最想要的是什么？”“我做什么会让你开心。”“我怎样才能帮到你。”  </p>
<p>只有充分的了解才能让付出和得到对等，也才能让我们集体的社会情感走向平衡。让他人开放的同时先放开你自己，你和他人分享的越多他人也才能将心事和你分享。我们放不开的原因是什么，无非是你自己的缺点和阴暗，但那就是你自己，你不说它还是属于你自己。说了，反而不会那么耿耿于怀，反而容易放下了。学沟通也学了很久，从根本上想想沟通的关键是什么？先把自己的心打开了，别人的门也许就不会关的那么严实了。</p>
<p>（完）</p>
<hr>
<p>本文来自霜波说心理学系列，有少量校订。近期，大约每周会有 1-2 篇。今天晚上有事，就提前发了。喜欢的，说声好，我转给霜波，呵呵。</p>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/large/68361562gw1e2xqaox0asj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12438577.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12438577.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 16 Aug 2013 09:18:31 GMT</pubDate></item><item><title><![CDATA[关于前端的那些事]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/297534/d125be7c-953b-11e2-8f2c-97150bd86157.jpeg" alt="7a6deb9ccccaf74dbbf728cb313e4c3050daa66039bdb-rziXu6_fw580"></p>
<p>这是一篇投稿，来自淘宝 UED 前端工程师堂主。堂主是个高高又帅气的小伙子，不光写得一手好代码，还练就一手好毛笔字。介绍到此，来看文章。</p>
<hr>
<h1 id="关于前端的那些事">关于前端的那些事</h1><p>好吧，最近有些人又在讨论“前端是不是一个低级工种”、“前端这个职位是不是有存在的必要”等类似的问题了。这里说“又”是有原因的，因为这类话题出现的频率虽不似月经贴，但每隔一段时间年也总会出来秀一下下。</p>
<p>作为一个立志于为前端布道的从业者，有些个体的声音需要发出。</p>
<h2 id="1-前端的尴尬">1. 前端的尴尬</h2><p>目前，前端的地位及受重视程度，相比前几年有了极大的提升。但尴尬之处仍存在，具体体现为：国内大部分有互联网业务的企业确实不需要专业前端，专业前端的就业面及需求量相比 JAVA、PHP 等开发工程师而言明显局限。</p>
<p>对大部分有互联网业务的企业而言，它们的互联网产品，开发工程师或者视觉设计师自己写一写 table 可能就够了，甚至其产品都是外包公司做出来的。即便需要前端也只是充当切图的页面仔，涉及到 JS 也只是实现一些简单交互。有的从业者甚至通过搜索引擎，搜出一些模板、代码片段，修改一下来满足需求、应付老板。这导致了相当一部分从业人能力平庸，被一些程序员同行概括认为前端技术难度有限，职位可有可无。</p>
<p>前端地位的尴尬返回来也导致学校教育上的漠视，在互联网技术快速发展的当下，迟迟不开设前端对应的专业课程。我在大二时就被当时拥有博士学位的数据结构老师点名批评：“就你天天研究的那些网页的东西，一点技术含量都没有，随便找个同学培训他一周 DreamWeaver 就能全学会！”微博微信上大学同学众多，堂主不会说谎话。</p>
<p>不过现在似乎有点改观，自从学校知道我这个挂科大户、反面典型来到淘宝工作后，我就变成了就业典型。甚至毕业前几个月院长还专门咨询过我，开设前端对应的课程，哪些书籍是适合作为教材的。能通过自己的就业对学院的教学改革产生一点点布道的作用，我现在还感到高兴和欣慰。</p>
<p>那么，前端的技术含量到底怎么样？是不是真的像其他人说的那样，企业不值得为其单独设立一个职位呢？</p>
<h2 id="2-企业中的前端">2. 企业中的前端</h2><p>个人观点，其互联网业务仅作展示窗口作用的，可能确实不需要设立专业的前端职位。如企业展示类网站、政府网站等，其运营业务的核心渠道不基于互联网，其互联网产品更多承载的是品牌推广手段多样性的作用，其网站产品的开发完全可以通过外包来实现，顶多只需要设置1、2 位运营编辑人员即可。</p>
<p>而对于那些核心营生基于互联网的企业而言，专业前端的职位就是必须的。因为前端作为一个职业存在的价值主要体现在：“叫专业的人干专业的事，解放并提升了产品方的生产力”。翻译成人话就是，前端解放了交互、解放了视觉、解放了开发，并用其专业技能提升了客户端的用户体验。</p>
<p>说解放了交互及视觉，是因为从此交互只专注于操作体验，视觉只聚焦于艺术呈现，而不用附带还要做切图切页面的事，且你叫交互、视觉去写要具备专业编程能力的 Javascript 语言他们也很难搞定。</p>
<p>说解放了开发是指开发可以将精力都投入在诸如底层系统架构、算法优化、数据处理等核心业务上，而不同再去写页面套页面，且你叫专业开发去捣鼓需要具备极强人文修养的 HTML 和 CSS，他们多半也会崩溃的。</p>
<p>说提升了客户端的用户体验，是因为，你找出一个能同时搞定 HTML 语义性、CSS 兼容性、JS 优异交互、整体性能经过优化、结构样式及脚本具备优异扩展性支持、且界面还原精确到 1 像素的交互、视觉或专业开发给我看看，有一个我们团队要一个！</p>
<h2 id="3-前端的工作内容及技术含量">3. 前端的工作内容及技术含量</h2><p>作为前端开发工程师，我们中的绝大部分（极少部分的前端工程师的工作内容是面向底层库的开发，为其他前端提供更便捷的开发工具），在日常的开发实践中，确实鲜有要用到算法的情况。如此好似低端，却不意味着做好就容易。</p>
<p>相比字面意思理解性较差的 F2E (Front End Engineer，前端开发工程师)，我们中绝大部分的工作性质更准确的形容应该是 UIE（User Interactive Engineer，用户界面开发工程师）。我们要处理的事务包括但不限于：产品界面的在浏览器端的展现、前后端数据的通信以及基于 DOM 操作的交互体验。</p>
<p>因前端编码手段过于灵活，质量参差的 HTML、CSS 和 JavaScript 可能都可以满足当前的产品需求。可若一旦涉及可用性、扩展性、细节控、性能优和兼容性，质量不佳的代码劣势立现。如，对很多人最不重视的、认为最没技术含量的 HTML：一个优异的 HTML 结构，且不论其本身就具备的高优雅性及可读性，更可以节省一大半的 DOM 操作；且具备良好的可扩展性，避免未来因需求变化而导致的大规模结构重构；更能避免绝大部分的 CSS 兼容性问题 —— 我就不提什么模块化复用性、搜索引擎优化和盲人阅读器的那些事了。</p>
<p>另外因前端职业成型晚，技术迭代快（且这种迭代属于技术累加式而非替换式，使得越往后入门的新人需学习的东西越多），产品兼容问题多（想做到 “write once, run anywhere&quot; 是F2Er共同的梦），校园教育缺失，自学成本高、最佳实践积累少、职业思维模型需跨技术与人文等种种因素，都导致前端职业修养的养成成本更高，靠谱的人才稀少。</p>
<p>所以说，“糙活也能用，细活养成难”的现实一是阻碍了很多从业者的进步，二也造成了行业上认为前端“没难度级别低”的错觉。</p>
<p>但错觉终究是错觉，互联网的快速发展会帮助大家逐渐纠正这一认知。前端现在不论作为一个职业，还是其背后代指的一干技术与思维，都依然显得青稚，需要积淀与成熟。但请相信前端成熟的路不会更类似其他职业的开发——我会告诉你一个好的前端应该具备很强的人文气息么？人文这东西说不清道不明，但可以肯定它属于是感性的一类，正如 HTML 和 CSS，看似简单，却绝非简单，一如文学创作，语境的形成不取决于语法，却依赖于开发者自身。</p>
<p>（完）</p>
<p>原文地址：<a href="http://www.osmn00.com/personal/244.html">http://www.osmn00.com/personal/244.html</a>
堂主的新浪微博是：@堂主</p>
<hr>
<p>最后，增加一个小小的栏目，玉伯有话说。</p>
<ol>
<li><p>昨天发出 <a href="https://github.com/lifesinger/lifesinger.github.com/issues/131">WTP 近期数据与感想</a> 一文后，在微信上收到了很多温馨的回复，非常感谢朋友们的信赖与支持。因为有大家的关注，我相信 WTP 会越来越好。</p>
</li>
<li><p>堂主今天的话题，是否月经贴，取决于读者自身。收获来自于思考，如果能有新的思考，每个月讨论一次又何妨？比如堂主文章里提到的 UIE 工程师，是非常好的新思考。支付宝，今年还将前端开发部改名成了交互技术部。前端的核心职责是交互，不仅是与用户的交互，也包括与后端的交互。名字不代表什么，也代表着什么，取决于你怎么看。</p>
</li>
<li><p>越来越不在意微博上的言论，我要的是思考与真实。比如陈皓，前面多篇文章有提及。每次交流的背后，更让我看到的是陈皓的难得与可贵。陈皓对前端的理解，绝非像微博上很多前端认为的那样肤浅。对未知领域的好奇、探索、尝试性交流，这一切令人钦佩、难能可贵。</p>
</li>
<li><p>昨天发了一条微博说：三年后，希望大家提到玉伯，不再想起前端。这个微博没什么深意，只是提醒自己，除了技术，还有产品、自由梦。希望三年后，自己的名字被人提及时，联想到的是像 Evernote、Dropbox 一样的产品，而不是具体的技术。这个感慨来自阅读鬼脚七的微信（希望大家以后提到鬼脚七，不再想起搜索）。</p>
</li>
<li><p>继续鼓励并期待大家的投稿，无论是阿里的前端，还是阿里之外的前端。投稿方式很简单，将文章地址告诉我就行。</p>
</li>
<li><p>另外，微信回复上，有不少人对霜波的心理学系列很感兴趣。我跟霜波联系过，同意在 WTP 上连载。如果各位想看，可以回复“想要霜波”，回复超过 100 个，就开始连载。</p>
</li>
</ol>
<p>题图：不知道为什么，看着这张图，会想起前端。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12395230.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12395230.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 27 Jun 2014 16:32:58 GMT</pubDate></item><item><title><![CDATA[WTP 近期数据与感想]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/295028/39e8de3e-9443-11e2-9b37-4fbb8c490c4f.jpeg" alt="025578bdbf9ed33806cd1d4f29274c58a5a0e9e1104f2-WUrTvC_fw580"></p>
<p>从 3 月 8 日写下 WTP 第一篇文章，眨眼半个多月。今天周末，分享一些数据和感想。</p>
<ol>
<li><p><strong>WTP 的定位是：技术、产品、自由梦。</strong>其实什么都可以谈，目前核心关注点是前端技术的“水货”。水蛮重要的，一天都离不开。干货也蛮重要，比如大米。WTP 的梦想是每篇文章都能成为“饭货”。饭需要米也需要水，嚼之齿香，吃之管饱。这追求挺难的，是为梦想。</p>
</li>
<li><p><strong>WTP 的背后不止玉伯一个人。</strong>比如已经现身的偏右小帅哥，接下来还会有沉鱼的漫画系列，以及筹划中的《简明扼要的 JavaScript》等系列文章。据说玉伯在写一本书，这本书的部分初稿，会通过 WTP 与大家见面，非常期待反馈。</p>
</li>
<li><p><strong>WTP 目前已有 3400 多位读者。</strong>有人问我怎么营销的？其实很简单：最好的营销就是勤写好文章。还需感谢冯大辉、池建强等朋友们的推荐，虽然，不好意思实话实说啦，并没带来多少新读者。更感谢的是，冯大和池大的鼓励。每天一文，坚持写下去，不容易。这需要朋友们之间的彼此温暖。</p>
</li>
<li><p><strong>WTP 关注产出，关注收获。</strong>每个工作日（偶尔休息日）一篇文章，是我们对自己的自律。我们在乎文章质量，也在乎数量上的坚持。写作需要训练，产出需要成为习惯。好的习惯，能导向自由之梦。</p>
</li>
<li><p><strong>WTP 的文章，一般在晚上十一点之前推送</strong>。近期因为微信的审核，经常要隔好几个小时才飞到读者的手机。如果有扰大家的休息，非常抱歉。建议将微信的提醒关闭，每天定时去阅读就好，不要让微信掌控主动权。</p>
</li>
<li><p><strong>WTP 鼓励互动，鼓励投稿。</strong>如果某篇文章非常对你胃口，一句感谢会让我们倍感鼓舞。也非常欢迎不同的声音，这个世界因不同而有火花，因火花而绚丽多彩。如果你有原创文字想分享给 WTP 的读者，也非常欢迎投稿，只要合适，我们就会采用。不会有稿费，收获的是朋友。</p>
</li>
<li><p><strong>WTP 有线下交流会。</strong>从 4 月份开始，每个月第二周星期二下午两点到四点，WTP 会在支付宝杭州举办交流会。每一期，会有一个主题分享，加一场主题讨论。第一期会是支付宝前端解决方案 Arale 的分享与吐槽交流，欢迎有兴趣的朋友参加。</p>
</li>
</ol>
<p>最后，WTP 代表 Web Tech &amp; Product（Web 技术与产品），也代表 What&#39;s The Professional? 感谢你的订阅，期待你的反馈。</p>
<p>（完）</p>
<p>题图：我们希望 WTP 成为一扇窗，联结你我，联结心与心。</p>
<hr>
<p>微信公众帐号中搜索 wtp-notes 或扫描二维码订阅：
<img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12369811.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12369811.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Wed, 10 Apr 2013 01:42:48 GMT</pubDate></item><item><title><![CDATA[观点决定关注点]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/294043/11b1bb96-93cd-11e2-912c-f6797988c85a.png" alt="Screen Shot 2013-03-23 at 11 19 03 PM"></p>
<p>同事霜波在内网写过一个很受欢迎的心理学系列，其中有一篇讲到一个故事：</p>
<blockquote>
<p>大一的时候和班上的生活委员玩的很近，经常开玩笑，然后，就在一天收到他的情书了。那个时候我直觉他是一个轻浮的人，不便直接告知，所以用了很不靠谱的一种拒绝的方式，回了一份信，信的结尾上说：“我一直当你是个好哥哥，我们做兄妹吧。”</p>
<p>然后，几天之后，在我上学的路上，就会有他宿舍的朋友对着我大唱：“你究竟有几个好哥哥？为何每哥哥都那么憔悴？”和我一起上学的同学个个对我异眼看之。我那个时候已经发育，但是胸怀没有现在大，所以那个生气啊。认定了是生活委员叫他朋友来报复我。从此，见到他变怒目而视，掉头就走，不再和他说一句话。</p>
<p>就这样到了大四，他有了他得女朋友，我有了男朋友。大四是离别的季节，一场接一场离别的聚会，在其中的一次聚会中，他喝醉了，然后过来抱着我哭起来，哭着哭着在我的腿上睡着了，可是在那一抱中，我感觉到了巨大的悲伤。我想，他是真的喜欢我的。可是，如果他真的喜欢我，为什么会这样对我呢？几天之后我按捺不住找到了当初唱歌的男生，问明真相，他告诉我，那个晚上他特郁闷，拿着信看了一遍又一遍，然后他们宿舍人就将信偷出来的看，看了不服气所以联合起来想法子帮他出气。</p>
<p>如果，四年之前，我就相信他是真心的，至少这四年我不会在怀恨中度过，他也不会在我莫名的愤怒中度过。四年之前，我对他的主观意向已经决定了我能看到的事情的全部，我关注了我的委屈，我的耻辱，却没有去关注他的真实情况；只有在四年之后，一次拥抱让我对他的观点改变之后我才可能去关注到事情另外的一面。</p>
</blockquote>
<p>这类故事在生活中经常遇见。我们以为看到了全部，但很多时候只看到了我们的主观意向所关注的部分。同样的事情，不同的人所关注的内容不同。我们关注什么，经常取决于我们脑海里预设的观点。</p>
<p>观点带来的关注点不同，很多很多。无论现实生活，还是网络上。</p>
<p>比如最近考驾照变难了，听到很多人抱怨。但也有人像我一样，暗自开心：以后马路上会更安全些，甚至还琢磨着应该再出台哪些策略，来保障马路上更安全。</p>
<p>WTP最近有人反馈文章太水了，没什么技术内容。的确如此。可能跟我目前的状态有关，更关注“水”一些的内容。水其实蛮重要的，我们可以一天不吃干粮，但一天不喝水可难受死了。你瞧，这也是观点决定你我的关注点不同。</p>
<p>最后，还是谈点技术，不过，还是水水的。昨天的文章讨论了C++工程师陈皓眼中的CSS，陈皓觉得CSS和XML配置差不多。今天早上看到前端工程师拔赤的一条微博：</p>
<blockquote>
<p>如果说学javascript就像学数学，那么学html/css则如同学语文。</p>
</blockquote>
<p>很喜欢这个比喻。我的理解是，JavaScript有如数学，公式、原理等都非常明确清楚。是不是数学高手，通过考试或科研产出，能比较容易判断出来。</p>
<p>HTML、CSS则有如语文。小学毕业后，基本的汉字我们就都会了。自然语言的门槛其实很低，很简单。但是，一个作文高手，一个作家，水平怎么样，经常很难界定。哪怕是莫言，拿诺贝尔奖了，依旧能听到不少质疑的声音。HTML和CSS高手，与作家、画家一样，具有艺术性，不能像衡量数学大牛一样来衡量艺术家。</p>
<p>工作不同，形成不同的观点，关注点也就不同。C++等工程师关注底层的相通性，比如会联想到CSS配置是否与AOP有关，会去关注语言层面是简单还是复杂。前端工程师更关注如何用CSS去做出漂亮的界面，会关注 <code>#F2F2F2</code> 与 <code>#DEDEDE</code> 的视觉差异。</p>
<p>其实，无论你同不同意，HTML的确很简单，CSS也很简单，包括JavaScript门槛也很低，前端与后端相比，从语言层面和基本使用来说，简单很多很多，前端工程师没必要去反驳这一点。一个成熟的行业，不会去反驳外界的质疑。算法工程师，不会去反驳算法没含量的言论。前端，只是还不太成熟。反驳是思考，是成熟的过程。</p>
<p>同时，无论你同不同意，HTML很难，CSS也很难，要用好JavaScript可也真不容易。前端与后端相比，从感性把控、细节复杂度等方面来说，要做好，一点都不轻松。后端工程师没必要去质疑这一点，不信自己去写一个优秀的页面出来看看。这就如每个人都会用画笔涂鸦一样，但能画出一副受欣赏的画作，不经过训练，可能性很低。</p>
<p>预设的观点，会影响你的关注点。求证式的关注，很可能会加深已有的观点，导致恶性循环。</p>
<p>看到不同的世界，不取决于你去过多少不同的地方，而在于你是否打开了你的心。</p>
<p>最后，回到开头的小故事，用霜波的感慨来结束全文：</p>
<blockquote>
<p>我会选择怎样的观点去看待生命中遇到的每一个人，生命中发生的每一件事，带着爱还是带着恨？带着相信还是带着怀疑？带着欢喜还是恐惧？你的观点决定你的关注点，也决定你是否能得到快乐的人生。</p>
</blockquote>
<p>程序员的世界，一样一样的。</p>
<p>（完）</p>
<p>题图：这是芙蓉姐姐在做公益，你怎么看她？</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12357404.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12357404.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sun, 24 Mar 2013 03:05:24 GMT</pubDate></item><item><title><![CDATA[如何理解他人的工作]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/291062/74406172-92fb-11e2-825b-7d0d20a697b6.png" alt="Screen Shot 2013-03-22 at 10 18 25 PM"></p>
<p>陈皓今天发了一条<a href="http://weibo.com/1401880315/zoA2N9DIy">微博</a>：</p>
<blockquote>
<p>我不要求别人，我有什么就学什么。Photoshop，摄影，平面设计什么的，有机会我就学。有时，学习并不仅仅为了掌握，只是为了开阔思路和眼界，为了理解别人。</p>
</blockquote>
<p>这条微博看起来很励志。同一天，陈皓在另一条微博的回复中提到：</p>
<blockquote>
<p>你觉得后端写XML配置文件和前端写CSS配置文件有什么差别？</p>
</blockquote>
<p>这条回复引发了很多前端的激烈反驳。细思前后两条微博，有个问题非常有意思：</p>
<p><strong>陈皓是非前端开发，对CSS有过了解和使用，为何对CSS的理解却引来了很多人的反驳？</strong></p>
<h2 id="了解的层次">了解的层次</h2><p>首先定义什么是了解。可分为三个层次：</p>
<ol>
<li><p><strong>了解What</strong>。比如对于桥梁设计师，知晓其职责是负责桥梁设计，会产出设计方案。</p>
</li>
<li><p><strong>了解How</strong>。在知道What后，更进一步，知道具体怎么去做，比如知道桥梁的设计图纸是怎么一步一步产出的。</p>
</li>
<li><p><strong>了解Why</strong>。理解How的每一步是基于什么思考，理解背后的原因。</p>
</li>
</ol>
<h2 id="一个现象">一个现象</h2><p>在现实生活中，特别是IT从业者之间，经常能听见一些对话：</p>
<blockquote>
<p>小王：小张做了一款LBS应用，下载量挺不错，但其实没什么技术含量，我以前研究过。
某PD：这页面不难，花半天就能写出来，我以前写过。
看客：SeaJS没什么挑战，花个两天，就能写出来。</p>
</blockquote>
<p>这些言论的共同点是：</p>
<ol>
<li>不光知道What，从表面上看，还知道How。</li>
<li>低估了事情的实际难度。</li>
</ol>
<p>可以总结成一个现象：</p>
<p><strong>对他人的工作有一定了解，有时反而会对他人的工作产生误解。</strong></p>
<h2 id="了解一定有助于理解吗">了解一定有助于理解吗</h2><p>从微博上看，陈皓对CSS的了解，应该到了How的层次。 但为什么陈皓还会很不恰当地将CSS理解成XML配置文件？</p>
<p>我的分析如下：</p>
<p>How还分很多层次。对于CSS来说，知道基本语法是第一层，知道高级用法是第二层，能搞定兼容性是第三层，能进一步提高可维护性是第四层，能将CSS与HTML、JS等技术融会贯通是第五层，往下还有第六层……</p>
<p>陈皓可能到了前两层，第三层应该也有涉足。（猜错了不负责，解释权归陈皓）</p>
<p>这样，就很容易解释了：</p>
<p><strong>了解不一定有助于理解。</strong> 在对How有深层次了解前，浅层次的了解，经常会给人“不过如此”、“也就这样”、“原来很简单”等印象。很明显，这反而会阻碍理解。</p>
<h2 id="理解真的要去了解吗">理解真的要去了解吗</h2><p>我们尊敬充满结构美的建筑设计师，我们赞美指间留韵的钢琴家。但我们绝大部分人，并不知道建筑图纸是怎么设计出来，也不清楚那美妙的音乐是如何流淌出来。</p>
<p>很多很多事情，我们只了解What，并不了解How，但一般并不会阻碍我们对他人工作的理解之心。</p>
<p><strong>理解不一定要去了解。</strong></p>
<h2 id="非常简单的结论">非常简单的结论</h2><p>要理解他人的工作，经常只要了解What就好。</p>
<p>了解How不一定要助于理解。浅层次的了解，有时反而会闭塞自己的理解之心。</p>
<p>理解的关键并不是了解，而是保有一颗谦卑的心。</p>
<p>（完）</p>
<p>题图：很少有人了解爱因斯坦的工作，但我们都尊敬他。</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12320788.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12320788.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 05 Apr 2013 10:01:38 GMT</pubDate></item><item><title><![CDATA[做基础技术类产品的五点思考]]></title><description><![CDATA[<p>昨天看了鬼脚七《关于产品经理的四点思考》，很有感触。2009 年从做前端类库 KISSY 开始，越来越体味到对技术人员来说，拥有一颗产品心也非常重要。</p>
<p>下面说的产品，特指基础技术类产品，比如类库、框架、开发者工具、内部平台等。很多公司，有一定规模后，都会有专门人员投入基础技术类产品的研发。这类产品，不会直接面向最终用户，但会影响开发效率，以及最终产品的稳定、质量、性能等指标。</p>
<p>对于基础技术类产品，要做好很不容易。下面是我的一些思考，欢迎讨论。</p>
<h3 id="1-去做产品，而不是项目">1. 去做产品，而不是项目</h3><p>在本厂，有不少华丽丽的项目，但隔半年或一年后，就销声匿迹了。想通过一两个项目来造就基础技术类产品，基本上不太可能。</p>
<p>项目最多种下一棵小树苗，树苗要长大，更需要平平淡淡的日常工作。平时一点一滴灌溉，不断去施肥修正，树苗才能长成大树。</p>
<p>产品人的心中永远没有“做完了”。产品有黑夜有白天，有欢喜也有泪水，产品人心中最重要的是梦想与坚持。</p>
<h3 id="2-学会欣赏，而不是颠覆">2. 学会欣赏，而不是颠覆</h3><p>看见已有系统的缺点往往很容易。看见缺点后，经常会看不见缺点背后的大量优点。对于复杂系统，保持现状往往是最正确的选择。当然，这不代表着不去做改进，或不能去颠覆。</p>
<p>绝大部分决策，要解决掉现有系统的不足，更需要的往往是延续现有系统的优点，否则很容易做出看似勇敢却路漫漫的决策。</p>
<h3 id="3-少做、做好、做通">3. 少做、做好、做通</h3><p>要懂得说不，有所放弃，有所坚持。少做是为了多做，是为了不做。对基础技术类产品，保持适当的慢，才能确保以后的快。</p>
<p>坚持做少，才有机会做好。好不光体现在技术上，还要与场景紧密结合，真正服务好使用者。</p>
<p>做通是在做好的基础上，能用技术驱动创新，能触类旁通，能由点及面。由深度带来广度，以一渗百。通是平台化、体系化。</p>
<h3 id="4-顺势而为，而不是逆流而上">4. 顺势而为，而不是逆流而上</h3><p>对技术人员来说，逆流而上很吸引人，但充满着危险。顺势而为是保持对业界的关注。技术变化很快，新思想、新潮流未必代表着什么，但保持对社区的适量关注，适时跟进，往往能节省团队的大量时间。</p>
<p>比如，对前端开发来说，我们可以继续延续 Ant 或 Maven 等工具方案。但如果能看到 Node.js 的兴起，能适时跟进 Grunt 等社区，那么我们的很多工作，都可以省掉。通过业界的成熟方案，稍加定制，就可以达成目标。</p>
<p>顺势而为可以让团队走得更快，不光速度快，心情更是愉快。</p>
<h3 id="5-追求小而美，打造生态圈">5. 追求小而美，打造生态圈</h3><p>很多基础技术产品，做出来相对容易，维护起来可是一场噩梦。你所在的公司，是否会有某一两个系统，常年需要那么一两个固定的人员或团队持续维护？</p>
<p>好的产品成年后，应该能自我前行。SeaJS 的目标是希望能把 SeaJS 做“死”。“死”代表着稳定，也代表着重生。稳定是功能增无可增，减无可减，bug 接近零。重生是社区之美，就如 jQuery 一样，原始作者 John Resig 可以安心去创业，jQuery 能通过社区的力量不断自我前行。</p>
<p>小而美是事物的形态，小意味着成本、可替换性、可维护性等各方面的优势，美意味着功能的完备与稳定。就如 Shell 的命令一样，一旦成熟之后，可以十几年甚至永远不用再更新。</p>
<p>生态圈的形成，可以让良币驱逐劣币，适者生存。生态圈也代表着解放，世界上不缺聪明人也不缺勤快人，缺的是一种机制，能让这些聪明又勤快的人积极主动地一起来共建生态。打造生态圈，无论是在公司内还是整个业界，都非常重要。一旦形成了，生态圈里的产品就都会都有了生命，活跃灵动起来。</p>
<p>最后，想分享 Amazon 掌门人杰夫·贝索斯的一句话：It is always Day 1（永远是第一天）。无论是做得很差，还是压根儿就还没开始做，只要开始，就有机会。如果已经做得很好，也不代表以后会好，每一天都是第一天。</p>
<p>（完）</p>
<p><img src="https://f.cloud.github.com/assets/97227/280873/7755daa2-9168-11e2-9f69-418ec52ce3d5.jpg" alt="bf934ff003317ad183473ff03b6f1953"></p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12228619.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12228619.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sun, 24 Mar 2013 12:55:29 GMT</pubDate></item><item><title><![CDATA[我眼中的技术高手]]></title><description><![CDATA[<p>今天发了一条<a href="http://weibo.com/1748374882/zoavsuWAz">微博</a>：</p>
<blockquote>
<p>会原生 JavaScript 不代表什么，懂 jQuery、YUI 等才真正好。怎么这么多人有原生主义情结呢？走出那点小天地，海阔天高。</p>
</blockquote>
<p>很多人已经猜出，这是为了晚上的文章而发，提前收集大家的想法。这个话题，很早就想谈，肯定会引起口水仗，但有些事不辩不明，不理不清，与其和谐社会，不如辛亥革命。</p>
<h2 id="奇怪的现象">奇怪的现象</h2><p>平时工作，时不时能听到一些困惑、感慨：</p>
<blockquote>
<p>jQuery 虽好，但只会 jQuery，不会原生 JS 是不被大公司认可的。
最近半年对原生 JS 有些生疏，得补一补。
得好好看看 ECMAScript 规范，把 JS 语言学透彻。</p>
</blockquote>
<p>和原生情结对应的，是国内程序员特别喜欢研读源码，比如：</p>
<blockquote>
<p>jQuery 源码分析系列
YUI 源码分析
Backbone 及 Underscore 源码解析</p>
</blockquote>
<p>国内程序员对源码的热衷，可以拿 SeaJS 的数据来看：</p>
<p><img src="https://f.cloud.github.com/assets/97227/275655/5db87e34-9095-11e2-8fe2-f12cb83c7c70.png" alt="Screen Shot 2013-03-19 at 9 02 44 PM"></p>
<p>fork 数高达 500 多，但 watch 数只有 1000 多，这其实是不正常的。相比而言，RequireJS 的数据正常很多：</p>
<p><img src="https://f.cloud.github.com/assets/97227/275659/d452caa4-9095-11e2-88fc-1a0373c93b7a.png" alt="Screen Shot 2013-03-19 at 9 06 20 PM"></p>
<p>简言之，国内与国外相比，有比较明显的两个特点：</p>
<ol>
<li>对原生 JS 的学习心更强。</li>
<li>对类库、框架的源码更感兴趣。</li>
</ol>
<p>这两点看起来很好，可是：</p>
<ol>
<li>研究原生 JS 的优秀文章，大都出自国外程序员。</li>
<li>类库、框架，国人好像一直在研究，鲜有产出。</li>
</ol>
<p>这肯定跟我们是社会主义国家有关，但我越来越怀疑这一点。</p>
<h2 id="语言高手们">语言高手们</h2><p>真正的语言高手不多，我不是，正在看这篇文章的你，很可能也不是，而且这一辈子可能都和我一样成为不了语言高手。</p>
<p>JavaScript（纯语言，不含 DOM 等）高手，在国内屈指可数。周爱民、白露飞、老赵、winter、月影、hax 等等等等，还有一些非常低调的隐士，这些人读 ECMAScript 规范像磕瓜子一样轻松，甚至能花几个晚上就像 BE 大神一样造出一门新语言来。你我等闲之辈，除了佩服之外，只能去谈恋爱。</p>
<p>工作中，我们需要语言高手吗？肯定的说，需要！可是，我们需要大量语言高手吗？除了特殊岗位，我相信很多公司都不需要！</p>
<p>题外话：目前为人知的 JS 语言高手里，除了周爱民，我最看好白露飞。这是一个有能力也有潜力造就 SuperScript 的人，最佩服的是他有实际行动，虽然方向未必正确。</p>
<h2 id="我们的价值在哪">我们的价值在哪</h2><p>除了重新投胎，我们大部分人这辈子都不大可能有兴趣、有能力、有机缘去成为 BE 大神了。这是个残酷的现实，之所以残酷，只因视野太狭窄。</p>
<p>跳出来，天大地大。妹子多着呢，而且更漂亮。</p>
<p>Douglas Crockford 的 JS 能力很可能不及 winter，但 Douglas 规范并布道了 JSON 格式，天下留名，惠泽全球。</p>
<p>Jeremy Ashkenas 的 JS 能力可能还不如老赵，但 Jeremy 用很裸的代码写就了 Backbone，至少影响了一万人，给各个公司创造的价值总额很可能过千万美刀。</p>
<p>更不用说 Isaac Z. Schlueter，这小伙的 JS 功力很可能还不如我，但 Isaac 打造了 npm 生态圈，而我至今只有精力玩玩 Ant 和 Grunt。</p>
<p>有幸还看过 Google Docs 的前端源码，那代码和 Java 一样中规中矩。但在 RTE 领域，Google Docs 是王者，里面的专利都一堆一堆的……</p>
<p>特别想提及的还有开发 Evernote Clearly 的前端工程师，这小伙子的代码，我眼睁睁看着其从很生涩的 JS 代码，逐步演化成上万行牛逼代码还保持了相当好的可维护性。这份代码就像 Clearly 产品一样奕奕生光。</p>
<p>以及把 jQuery 用得出神入化的 Amazon！前不久那个秒杀国内互联网公司的悬浮菜单，可不是研究原生 JS 能想出来的。</p>
<p>还有 Facebook 的工程师们，Twitter 的工程师们…… 这些故事大家并不陌生。</p>
<h2 id="不是总结的总结">不是总结的总结</h2><p>不贬低语言高手们，也不反对去研究编译原理、ECMAScript 规范等。作为技术人员，我们需要这种精神。但是，这仅仅是很小很小很小很小很小的一个领域。并且在这个领域里，永远有比你更聪明的人。</p>
<p>具体对 JavaScript 语言来说，会用就好。搞清楚数据类型、作用域、闭包、原型链等基本概念，足矣。再深入进去，对绝大部分人来说，除了能满足下心理上的优越感，对实际工作不会有任何实质性帮助。</p>
<p>语言的本质和互联网一样，只是工具，是剪刀、石头、布。让张小泉去研究怎么做剪刀就好，我们用好剪头，去剪出各种窗花，更有意思。还有一个有趣的事实是，张小泉会造剪头，但剪不好窗花。</p>
<p>跳出很小很小很小很小很小的语言领域之外，天大地大。永远不要妄自菲薄，每个人身上都背负着独特的使命。去努力寻找自己的，不要老盯着别人的，否则就会成为观众。</p>
<p>好像跑题了。前面那个奇怪的现象，还有很多想吐槽的点。比如</p>
<ol>
<li><p>源码只是很小很小的一部分。直接读源码往往无法领会类库框架的精髓。不读源码，用心去用，用时间去体味，偶尔针对性看看源码，往往更能掌握一个类库框架的真谛。</p>
</li>
<li><p>对社区的贡献可以有很多很多。你的使用经验、用心的 bug 提交、入乡随俗的 pull request、一个认真的评论等等，这些都比去研究什么狗屁源码更有价值。</p>
</li>
<li><p>一个 Java 高手如果说他会原生 Java，那一定会遭来很多人的围观。我还会谭浩强教我的 C 呢，那几个 if else 还有结构体、指针等谁不会。语言之外的领域知识，才真正造就了高手。对于前端来说，会原生 JS 只能打 20 分，另外 40 分需要你深入使用 CSS、DOM、HTML5 等领域知识，还有 20 分需要你对业务需求、架构设计等有真正的运用，这已经 80 分了，不要太贪心。剩下 20 分，只有两个字：勤奋。</p>
</li>
</ol>
<p><img src="https://f.cloud.github.com/assets/97227/276088/d142a94e-90a2-11e2-9f24-711bb4178cec.jpg" alt="W020120801476878218873"></p>
<p>题图：我的网名射雕的来历，喜欢郭靖，无底线。</p>
<p>（完）</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12182936.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12182936.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sat, 27 Aug 2016 00:19:38 GMT</pubDate></item><item><title><![CDATA[对企业家最重要的两条规则]]></title><description><![CDATA[<p>这篇文章来自创业家 John Muldoon，原文：<a href="https://medium.com/on-startups/b74475cb8891">The Two Most Important Rules For Entrepreneurs</a></p>
<p>下面是我的好朋友胡金埔 <a href="http://hujinpu.com/the-two-most-important-rules-for-entrepreneurs/">翻译</a> 的，我做了少量校对。这是篇很棒的文章。</p>
<hr>
<p>我现在 29 岁。做最后一份正式工作时，我 19 岁。</p>
<p>这十来年，我逐步成为了一名企业家。</p>
<p>创业年间，有失败也有成功。老实说，失败更多。不过还算幸运，我获得了一些成功。无论成败，我都从中获益良多。</p>
<p>过去 8 年中，我成为了一名创业顾问。渐渐地，我发现了商业上的一个真谛。</p>
<p><strong>无论制造或者贩卖什么，对大部分商业而言，本质上其实是在做同样一件事情。</strong></p>
<p>这就是，帮助人们交换货币。无论是给顾客提供美食还是帮助用户找到好的餐馆。</p>
<p>你做的事情首先必须要有用，但这仅仅是一个前提。</p>
<p><strong>如果你希望事业获得巨大的成功，还必须要做另外两件事情。</strong></p>
<p>这是两条简单的规则。我不光告诉客户这么做，自己也一直遵循。</p>
<ol>
<li><strong>创造大于消费</strong></li>
<li><strong>大规模创造</strong></li>
</ol>
<p>让我来逐一解释这是什么意思以及为什么这两条规则如此重要。</p>
<h3 id="规则一：创造大于消费">规则一：创造大于消费</h3><p>可以消费的资源太多了，我都不知道说哪个。比如内容？</p>
<p>你可以看电视、上 Facebook、看大量的博客文章、在手机上玩游戏、浏览 24 小时的新闻，又或者 Reddit。眼下，你不就在读我的这篇文章吗？</p>
<p>但不幸地是，这样消磨时间，对你的事业没有任何好处。</p>
<p><strong>创造才是关键。</strong></p>
<p>企业家显然明白这点。无论是软件或者食品、iPad、建议、调料、电动汽车、亦或是一篇博文，关键是你必须去创造这些，而不只是消费。这才是企业家所为。</p>
<p>就像大家只会惊讶于伊隆·马斯克的创造力，而绝不是他的消费能力。</p>
<p>我自己也消费着各种资源，这花掉了数百（好吧，也许几千）个小时。这令人惬意、也很分神。</p>
<p>当然，我们都喜欢消费。我不认为谁能停止消费。但这都不是关键。</p>
<p>关键是我们创造的要比消费的多。</p>
<p>很长一段时间，我做不到这点。每天我只进行消费，日子一天天过去，而自己的事业却停滞不前。后来，我慢慢聚焦与创造 ，这才让我逐步逼近事业的目标。</p>
<p>每天坚持写博客也是为了让自己养成一个创造内容的好习惯。迄今为止，感觉不错，你不就正在读我写的文章吗？</p>
<h3 id="规则二：大规模创造">规则二：大规模创造</h3><p>我干顾问工作已经有好几年了，我的客户都不一样。一次我只能服务一位客户。虽然每次都做得不错，但这上不了规模。</p>
<p>不要误会。我热爱我现在的工作，也为我们能帮助到各种企业而自豪，但这不是最佳的商业模式。</p>
<p>八年中，我帮助了数百位客户。我也告诉他们这两条规则。这似乎不错，但其实还不如这篇博文的影响面大。这篇文章最终会被数千人看到，而它只花了我一个小时。</p>
<p>因此，八年才数百，一小时（最终）就有数千，你们觉得哪个靠谱呢？</p>
<p>显然，写博文的影响面更大。</p>
<p>这个道理不仅仅适用于创造内容，无论你创造什么，也应该这样。</p>
<p>亨利·福特的装配线技术让我们进入了规模化时代。现代的在线贸易系统更具规模。如果够幸运的话，你编写一个应用就可能卖出一百万份。甚至知识的传播也是规模化的 —— 写一本书可以卖出上千本。</p>
<p>当然，这并不意味着可批量生产的才是好的。我自己就很喜欢手工艺品和一些艺术品。我只是觉得这种商业模式要成功很难。</p>
<p>总之，无论你做什么，创造要大于消费，并且大规模地创造。我相信这会让你和你帮助的人变得与众不同。</p>
<p>我也会一直这样做下去。</p>
<p>可能的话，也让我知道你的改变。</p>
<p><img src="https://f.cloud.github.com/assets/97227/271312/73d37cbe-8fe1-11e2-992e-532799a8df98.jpg" alt="90f263c7f3343e13087414aafe4bb51d"></p>
<hr>
<p>之所以推荐，是因为这篇文章揭示了一些简单的道理。我前面那篇谈时间管理的文章，有提到最好的阅读是产出，说的也是这个理。无论是个人知识管理、时间管理，还是开创一个公司为客户服务，核心是创造价值，并能形成规模。</p>
<p>WTP 欢迎大家推荐好文章，可以是你觉得非常有价值的好文，也可以是精心写就的原创文字。通过微博或微信回复我地址就好。</p>
<p>WTP 关注技术、产品、自由梦。有任何建议，欢迎反馈。微信扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12138873.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12138873.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Wed, 19 Mar 2014 07:39:10 GMT</pubDate></item><item><title><![CDATA[怎么成为技术大牛]]></title><description><![CDATA[<p>微博和知乎上不时有人问，通常我会忽略掉。这类问题很容易回答，也很难回答。</p>
<p>很容易回答，是因为见过太多牛人，细思他们的成功，无外乎勤奋、坚持。某人比你优秀，往往是因为他比你勤奋。</p>
<p>很难回答，是因为要做到勤奋很难，要坚持更难。这需要自律，需要习惯。知易行难。</p>
<p>以上话题很大，市面上的书籍汗牛充栋，推荐《高效人士的七个习惯》。这类书籍，不能读完了事，关键之处在于，要真正去做。</p>
<p>如何做到？个人比较推崇佛学里的做法。可以先亲近善知识，然后找到合适的导师，在一定环境下去修为。佛学里讲究皈依三宝，法宝是善知识，佛宝是导师，僧宝说的是环境。这道理和我们上学是一样的。为什么不能在家自学？因为自学太难，对绝大部分人都不适合。好的学校三宝俱足，能相对容易培养出好的人才。</p>
<p>有了互联网，对技术人员来说，三宝很容易俱足。带上甄别的眼睛，网络上充满着善知识。比如哈佛等大学的公开课，比如很多优秀的技术书籍，还有各种推荐书单，只要用心，你就能发现。</p>
<p>通过互联网，也将各个公司的技术高手直接变成了我们的导师。比如有很多优秀的开源社区，只要你懂得合理提问，就会有技术大拿很热心地帮助你。</p>
<p>我们都是码农，也可以戏称为码僧，这样僧宝也就俱足了。你遇到的问题、困惑等等，可以访问 GitHub、StackOverflow 等寺庙，拿出来跟码僧们一起交流，一起取经。码僧们联合起来，就可以改变世界。</p>
<p>除了互联网，在现实工作中，也可以尽量创造条件去具备三宝。去一个你认可的团队，去接近你心中的大牛，只要迈出第一步，就不会太难。只要多那么一点点勇气和决断。</p>
<p>就说这么多。我离心中的大牛也还差着好几个山头，得埋头赶路了。</p>
<p><img src="https://f.cloud.github.com/assets/97227/268106/64c4615a-8f07-11e2-93bf-d26f44d89af8.jpeg" alt="407bd840da738d5c68f4415cb2073f55c2924c5a19ecd-aWB2rD_fw580"></p>
<p>（完）</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12108762.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12108762.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Wed, 10 Jun 2015 02:49:47 GMT</pubDate></item><item><title><![CDATA[博客是什么]]></title><description><![CDATA[<p><img src="https://f.cloud.github.com/assets/97227/266602/fac79aa2-8e15-11e2-8691-c38fd0a0724f.png" alt="Screen Shot 2013-03-16 at 4 45 32 PM"></p>
<h2 id="写在前面">写在前面</h2><p>今天周末，在家给老婆整理电脑，客厅里也升级下装备，用上了冯大辉年前赠送的 Apple TV。本不打算发文，无奈 Windows Update 太慢，Apple Store 也龟速。等待的空档，写点文字。</p>
<ol>
<li><p>Apple TV 印证了一句话： <strong>一些事物在你没真实体验前，最好保持沉默</strong>。Apple TV 从安装到播放，很顺畅。这个小小的黑色盒子就是件艺术品。不过，这玩意最终好不好，还得父母说了算，他们是真实用户。目前来看，iTunes 上的东西对父母没啥吸引力，还是得通过 AirPlay 看优酷、搜狐视频等站点的内容。目前瓶颈在 Wi-Fi 传输，Apple TV 不够稳定。在这种使用场景下，那个小巧的遥控器也无法发挥作用。为什么 Apple TV 不直接内置一个浏览器呢？有点期待 Chrome TV。</p>
</li>
<li><p>昨天发的文章，收到了一些有意思的回复。初步尝试，已经知道怎么用 JS 来检测内存泄露。在现代浏览器下，可以通过 window.performance 接口去做，这个我不是很关心。最关心的是 IE，我忘了曾经非常熟悉的 VBScript. IE 可以直接跑 VBS，而 VBS，那可是强大得一塌糊涂的东西，拿个内存是小菜一碟。接下来会去尝试做做。集思广益还是挺靠谱的，感谢大家。</p>
</li>
<li><p>早上起来，发现微博上满屏 8 点 20 分。对于 CCTV，想起营养老师范志红的一句话： <strong>很多不健康的食品，都是吃客自己惯出来的</strong>。中国人讲究色、香、味俱全。但经常，色是调色剂、香是劣质佐料、味是味精，非常不健康。这个，不少人都知道。厨师、饭店老板比我们更清楚。但为何还依旧这么做？因为不这么做，顾客会不喜欢，就赚不到钱。要改变现状，得先改变吃客，让吃客们对色、香、味建立起新观念：色是自然色、香是食材香、味是原汁原味。唯有改变我们自己，才能改变很多事情。CCTV 也一样，当哪一天，大部分人都不看它，不鸟它时，它就会自然死去，再也发不出声音。</p>
</li>
</ol>
<p>闲聊结束，说说今天想写的一个话题：博客是什么。</p>
<h2 id="博客是什么">博客是什么</h2><p>我最初的博客，是在天涯上，后来历经 WordPress、自主建站、Evernote、新浪博客等，直到去年，发现 GitHub 天然是个博客系统，于是安定了下来。</p>
<p>用 GitHub 的 Issues 来当博客，不是为了标新立异，而是因为懒，以及需求不多。</p>
<p>博客是什么？对我来说， <strong>博客的本质是记录，是与自己、他人的内心对话</strong>。其他都是围绕着记录和对话展开。</p>
<p>记录由来已久。传统的纸笔，是记录，是与自己的对话。有了电脑，TextEditor、Office 等软件，WordPress 等 Web 应用，很大一部分功能都是帮助用户记录。GitHub Issues 天然支持程序员最爱的 Markdown 格式，用来记录，很舒服。记录的方式会越来越便捷，比如 Evernote，致力于成为人类第二大脑，除了文本，还能比较方便的记录音频、视频、图片等格式。所有这一切，都围绕着记录在前行。说不定哪一天，会有一款像 Google Glass 一样的 XXX Hat，往头上一戴，想写博客时，冥想下就行。</p>
<p><strong>对话是记录的延伸。</strong>Facebook、微博能火起来，是因为人都有交流的基本需求。人是社群动物，内心都渴求着互动。通过博客，能把个人记录公开给所有人，来访者可以阅读到作者的心。无论是线下、还是 IRC、WordPress、微博、QQ 等等，都是各种对话。GitHub 的评论功能，也是对话。对程序员来说，GitHub Issues 恰巧能很方便地进行代码交流，对于如此懒的我来说，最是喜欢。</p>
<p>有了记录，未必能产生对话。 <strong>产生对话，需要传播</strong>，需要消息机制。传统纸笔，对话很难产生。有了互联网，通过 RSS 技术，让传播变得简单。Google Reader 的背后，有着多少渴望交流的心。但是，当越来越多的用户，通过 Facebook、微博等平台直接传播和被传播时，RSS 就没什么必要了。最近 Google Reader 的下线计划，是必然，只是有点突然，让很多用户在感情上难以接受。</p>
<p>对于传播，个人觉得，目前 Facebook、微博等形态，也很可能迟早像 RSS 一样成为历史或小众。微信的核心是 I/O 系统，把控住的是传播环节。可以搬个小凳子，坐下来静观互联网的风云变幻。对于传播，微信也未必代表未来，可敬的是探索尝试。</p>
<p>回到博客，GitHub 可以 Watch，还可以针对单条 Issue 进行 Watch / Unwatch. 这功能在很多成熟的博客系统里都还没有呢。如果你是 GitHub 重度用户，就会感受到 Watch 的方便和灵活性，至少不比 RSS 差。</p>
<p>对我来说， <strong>博客就三个关键词：记录、传播、对话。</strong>能满足这三个需求的系统，就是博客。GitHub 在这三点上做得很不错，特别是对程序员来说。因此我拿它开博了，你不妨也来试试。</p>
<h2 id="小结">小结</h2><p><strong>一个产品是什么，不取决于产出方的预设，而取决于使用者的用法。</strong> 比如微博可以是背单词软件、Facebook 则可以是游戏中心…… 互联网只是剪刀、石头、布，想出什么，由心定。</p>
<p>（完）</p>
<p>题图：一些石头，随心摆布……</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12092185.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12092185.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Tue, 23 Feb 2016 04:04:28 GMT</pubDate></item><item><title><![CDATA[用 JavaScript 检测 CPU 占比和内存泄露]]></title><description><![CDATA[<p>最近在项目中碰到 IE6-7 下的内存泄露，通过 Drip 能探测出来，问题也解决了。最近小组成员同时有在做前端质量工具，通过性能检测，可以排查出一些耗时较长的代码，但对内存泄露想不到好的自动化探测方式。本着集思广益的初衷，发了条微博：</p>
<blockquote>
<p>通过 setTimeout 等方式，可以检测当前页面所在操作系统 CPU 的大体情况。请教万能的微博：有没有什么办法，通过 JavaScript 检测到当前页面所在操作系统的内存使用情况（比如是否持续上涨、存在内存泄露）？</p>
</blockquote>
<h2 id="cpu-占比探测">CPU 占比探测</h2><p>通过 setTimeout 的方式探测 CPU 已经不是秘密，去年腾讯的朋友在 Velocity 上分享过，北京有朋友还通过这个原理，几年前就实现了网页游戏中动画等耗时操作的自动调节。原理很简单：</p>
<pre><code>var data = []
var t

function pulse() {
  t && data.push(Date.now() - t)
  t = Date.now()
  setTimeout(pulse, 50)
}

pulse()
</code></pre>
<p>就是每隔 50ms 打一下点。理想情况下，data 的值应该是</p>
<pre><code>data = [50, 50, 50, 50, ...]
</code></pre>
<p>但实际情况，data 会是</p>
<pre><code>data = [51, 52, 50, 52, ...]
</code></pre>
<p>当 CPU 比较忙时，data 的数据变成</p>
<pre><code>data = [81, 102, 90, 62, ...]
</code></pre>
<p>即 CPU 越忙，data 数据项会越大。这样，记录一系列 data 值，就可以绘制出 CPU 占比趋势图，和通过任务管理器看到的 CPU 趋势图非常接近。</p>
<p>上面只是原理说明，实际情况没这么简单。但很明显，通过这么一个简单的规律，就能实现用纯 JavaScript 来探测 CPU 占比了。</p>
<h2 id="内存泄露探测">内存泄露探测</h2><p>回到那条微博，是否也存在某种规律，使得可以用 JavaScript 来间接探测到内存泄露情况？</p>
<p>从微博的回复里还没看到有价值的信息。今天回家时，想到一种思路：</p>
<ol>
<li>如果存在内存泄露，意味着浏览器在 GC 时，没有进行某些操作。</li>
<li>没有进行某些操作，意味着会节省一些 CPU 时间。</li>
<li>CPU 耗时的变化，可以通过合理的打点探测出来。</li>
</ol>
<p>似乎有点希望，回到家后，立刻写了点代码验证。但发现干扰因素太多，基线也很难确定。折腾了一个多小时，有些死结，很难突破。</p>
<p>于是停下来写这篇文章，看看大家有没有更好的思路。我们以为不可能的事情多了去，但不可能的事情往往存在可能，思路是无限的。</p>
<p>最后描述下我的具体需求：</p>
<blockquote>
<p>有一个 a.html 页面，里面有 JS 业务代码，以及单元测试代码。
通过前端测试系统，我们可以把 a.html 自动跑在各个浏览器上，比如 IE6/7/8/9。
现在已经可以自动得到 a.html 在各个浏览器下的单元测试结果，以及一些性能指标。
现在想进一步，想通过单元测试代码，也能探测出当前页面是否存在内存泄露。</p>
</blockquote>
<p>页面存在内存泄露时，典型的现象是，不断刷新当前页面，内存占用不会归位，而会一直往上涨。</p>
<p>集思广益下，看看是否有可能实现内存泄露的自动探测？或者有其他自动化探测方案。如果有朋友有类似经验，请不吝赐教。</p>
<p>最后，推荐一条消息，前端的朋友，可以访问下 <a href="http://aliceui.org/">aliceui.org</a>，这是支付宝最近推出的一套样式解决方案，有些类似 Twitter 的 Bootstrap，但定位更基础些。有兴趣的可前往关注，欢迎指点。</p>
<p>（完）</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 关注技术、产品、自由梦，在每个工作日（偶尔休息日）会定期推送一篇原创文字。欢迎订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12065231.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12065231.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Tue, 19 Mar 2013 16:29:55 GMT</pubDate></item><item><title><![CDATA[时间管理之道]]></title><description><![CDATA[<p>今天要去上海出差，晚上估计在路上，提前推送今天的内容。</p>
<p>昨天写完 <a href="https://github.com/lifesinger/lifesinger.github.com/issues/120">互联网时代的时间管理</a> 一文后，老觉得意犹未尽。昨天的文章重点在“术”，讲的是具体实践。晚上读微信，发现和鬼脚七撞文了。鬼脚七从另一个纬度讲述时间管理，重点在“道”。核心内容是</p>
<blockquote>
<p>心在哪，时间就在哪。</p>
</blockquote>
<p>这话看起来像是句废话，就像“做人要诚实”等大道理一样。但往往越是浅显的大道理，越难做到。一旦做到了，则受益终生。</p>
<p>对于时间管理的“道”，平时在 Evernote 上还总结过一些，整理出来，供大家嚼嚼：</p>
<ol>
<li><p><strong>不要去挤时间</strong>。鲁迅说，时间就像海绵，挤一挤总是有的。可是，老去挤时间，很容易短期受益，但长期亏损。君不见，鲁迅英年早逝，很可能就是挤死的。有挤的劲头，不如做长远规划，多活十几年甚至几十年。</p>
</li>
<li><p><strong>舍得舍得，不舍无得</strong>。 时间不是挤出来的，是规划出来的。规划中最重要的，是舍得放弃。这需要不断询问自己的内心：什么才是自己真正在乎的？我们都是一只只猴子，也许想吃的是西瓜，但在玉米地里前行时，看见同伴们都在掰玉米，很可能会忍不住也去掰。时间管理，就是尽量要做那只不掰玉米、继续前行的猴子。</p>
</li>
<li><p><strong>自律和习惯</strong>。要逼近梦想，要不掰玉米，需要猴子的自律。自律来自目标的清晰和强大的内心。自律带来的是好习惯，习惯可以帮助你把困难的事情变简单，从而可以挑战更困难的事情。比如早睡早起，比如控制刷微博的时间等等，一旦你做到了，就会发现类似的事情都是小菜一碟，也就更有时间和心力去做你更梦想着去做的事情。</p>
</li>
<li><p><strong>时间不能管理，只能好好使用</strong>。这是一个残酷但又美好的事实。残酷是因为你无法控制时间的流逝，一天一月一年，太阳升起又落下，人生就这么长。美好是因为公平，无论这世间的谁，大家都一样流逝着青春。天才都是勤奋的产物。你佩服某个人，你欣赏某种生活，是你向往着用那种你所向往的方式来使用时间。勤奋不是苦行僧，你可以勤奋工作，也可以勤奋旅行，关键看心的向往，看你的勇气与决断。</p>
</li>
<li><p><strong>此时此刻，最应该做什么</strong>。对大部分有追求的成年人来说，在任何时刻，停下来问自己：此时此刻，最应该做什么？往往都能给自己最佳答案。问题是，自己正在做的往往不是最佳答案。时间管理，就是懂得停下来，多问问自己这个问题。当答案和正在做的越来越匹配时，就是最开心、最高效的幸福生活。</p>
</li>
</ol>
<p>此时此刻，我应该去赶火车了。今天就发这个短文，感谢阅读。</p>
<p>（完）</p>
<hr>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 在每个工作日（偶尔休息日）会定期推送一篇原创文字。请搜索 WTP 关键字，或扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/12003258.html</link><guid isPermaLink="true">http://acyort.github.io/posts/12003258.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sat, 23 Mar 2013 07:47:49 GMT</pubDate></item><item><title><![CDATA[互联网时代的时间管理]]></title><description><![CDATA[<p>昨天发了一条微博</p>
<blockquote>
<p>对于前端开发来说，除了蓝色理想，还有几个地方更浪费生命：百度、CSDN、 cnbeta、QQ 群、微博。这几个地方耗费的时间越多，工资越低。</p>
</blockquote>
<p>如预期，引来了一堆围观和争论。我发这条微博是有意“偏激”，对不小心伤害到的朋友，特别是在百度、微博等公司上班的朋友表示歉意。这条微博的背后，是想聊聊时间管理。无意推广什么优越感、价值观，仅仅是因为经历过，走过一段迷茫的旅途，心中有痛，才想分享。</p>
<p>下面的文字源自我半年前发的博文：<a href="https://github.com/lifesinger/lifesinger.github.com/issues/102">互联网时代的时间管理实践</a> 。经过半年多，有了不少新的想法和经验，重新梳理如下。如有帮助，请鼓个掌，如无益处，忽略就好。</p>
<hr>
<p>互联网给我们带来了极大的便利性。很多优秀的产品，正如张小龙说的一样，在极力通过人性的贪嗔痴来吸引沉溺用户。用户一不小心就会在这些产品上耗费掉大量时间，但用户从中获取的收益却远不如期望中的大。如何正确妥善使用这些互联网产品，值得每一个网迷深思。</p>
<p>说说我的经历和实践。</p>
<h2 id="im">IM</h2><p>大约两年前，我是 IM 重度用户。天天开着阿里旺旺，加入了好多群，群里一有什么消息，能回复的总是迅速回复。当时用了一个软件统计，发现一天中，最少有 3 个小时是在用旺旺。这个统计着实吓了自己一跳，后来做了以下几项调整：</p>
<ol>
<li><p><strong>退出不必要的群</strong>。从 30 多个群，精简到 10 个左右。觉得对自己没有帮助的群，大胆退就好，不会有任何损失，唯一需要的是勇气和决断。当初退了一个群，还被领导找谈话，不过好在这位领导被我说服了。（现在想起来当初自己太嫩，更好的做法是，将这个群设置为不接受也不提醒就好。）</p>
</li>
<li><p>有些群实在不好退，或偶尔需要去放松下的，阿里旺旺有很贴心的设置： <strong>只接收不提醒</strong>。这样，主动权就掌握在你手上了。偶尔闷了，去聊聊天也不错。必要的感情疏通还是有益的，特别是 mm 多的群。</p>
</li>
<li><p>只有一些 <strong>非常重要的群</strong>，比如与安全、稳定工作相关的，会保留提醒功能。这样，当有重大故障发生时，能及时获知并进行排查。</p>
</li>
<li><p>接下来就是： <strong>永远在线，但始终隐身</strong>。因为工作需要，开着阿里旺旺在很多时候还是有助于工作。采取隐身状态，能将主动权掌握在自己手上。真正紧急的事情，同事会打电话或人肉过来。旺旺上的消息，一般都可异步处理。</p>
</li>
<li><p>另外，使用 Mac 旺旺，所有弹窗之类的提醒和广告等都可以被彻底过滤掉，永不受干扰。</p>
</li>
</ol>
<p>总之， <strong>主动去用 IM，而不要被 IM 用。</strong> QQ 和 Gtalk 等等皆如此，微信也一样。张小龙的愿望很伟大：最好没有人去用微信。我对这句话的理解是：最好没有人在微信上浪费大量时间，在微信上的大部分时间应该用在进行有价值的沟通或消费有价值的信息上。希望这个愿望早日实现。目前从微信公众帐号上已经看到了一些渺小而又伟大的尝试，一切才刚刚起步。</p>
<h2 id="邮件">邮件</h2><p>我钟爱 Web 邮件系统，好几年前就没有用 Outlook 等客户端工具。一直用 Gmail 收发各种邮件，很喜欢 Gmail 默认推荐的使用习惯：</p>
<ol>
<li><p>Inbox 是收件箱。 <strong>处理过的邮件，立刻删除或存档</strong>。这很有成就感，每次打开 Gmail 的任务就是，让 Inbox 变空。</p>
</li>
<li><p>对于<strong>重要的邮件，会加星一下</strong>。现在 Gmail 默认还有优先级功能，可以根据你的使用习惯，自动将部分邮件的优先级提高。当有大量新邮件时，处理起来非常方便。</p>
</li>
<li><p>不用任何 tag 去管理。张小龙说，一个好的产品要 <strong>避免让用户卷入管理</strong>。非常赞同。在 Gmail 里，通过强大的搜索，tag 和 category 都是浮云。</p>
</li>
<li><p>后来由于公司制度，公司邮件采用 Outlook Web App 来管理。虽然远不如 Gmail 方便，但好在一天下来邮件不多， <strong>集中时间处理</strong>就好。还没遇到过必须要及时响应的邮件。</p>
</li>
</ol>
<p>总之， <strong>主动去处理邮件，而不要被邮件处理。</strong> 当然，这与工作性质相关。对我来说，对大部分程序员来说，我相信这能有效提高时间利用率。</p>
<h2 id="微博">微博</h2><p>我曾经发过一条微博，说 GFW 干了件好事，那就是有效减少了很多网民泡 Twitter 的时间。当年发这条微博是一半玩笑一半认真。现在我几乎不上 Twitter，可以说还真是 GFW 帮的忙。万事都有利有弊，没有绝对的好坏。（这段话被人吐槽过，上升到奴性、自由、民主什么的。这些写着代码却操着总理心的看客们，就别关注我了，你们的吐槽与事无补呀，什么时候你们有枪了再来找我。）</p>
<p>我现在基本只上新浪微博，看起来是个活跃份子，其实我在上面花的时间不多。按周算的话，平均一天不到半小时。主要方式如下：</p>
<ol>
<li><p><strong>把微博当媒体看</strong>。微博真心做到了，足不出户，而知天下事。这产品如果给诸葛亮知道，一定羡煞死了。有了微博，再也没上过门户网站（好像没有微博前，也不怎么上门户网站）。我只用 Web 版的微博，一是因为这样能有效把主动权掌握在自己手上，二是因为 Web 版本微博首页的右侧有一个热门话题。每天或每周瞄一眼，就知天下事了，对我来说，足够。</p>
</li>
<li><p><strong>把微博当留言簿玩</strong>。微博的社交化，对我来说，就是一个可由自己加人的留言簿。新浪微博的分组是个好功能，我建了一个“熟人”组，里面只有自己觉得值得阅读的，只有少量订阅。这样，一天的阅读量很小，经常没什么可读的。除了“熟人”组，还有一个更耗时间的是查看评论和转发。现在基本只看评论，不看转发。转发的好多内容和评论的重复，新浪微博怎么不做去重呢？</p>
</li>
<li><p><strong>把微博当搜索用</strong>。最近几乎每周都会用微博搜索下 seajs，看看有没有新讨论、新消息。真心希望微博能像 Google 一样，推出一个 Alerts 服务，有了新内容，给我发邮件就好了。李开复最近推荐的脉博网不错，已经有了关键词订阅功能。</p>
</li>
</ol>
<p>微博其他功能对我来说都是浮云，偶尔去转转，比如微刊，但更多是从产品分析的角度去看。</p>
<p>总之，还是那就话， <strong>主动去用微博，而不要被微博用</strong>。千万别信什么利用零碎时间的鬼话。凡是抢占用户零碎时间的产品都是流氓，用户够可怜的了。微博只是一副手套，用的时候带带就好。千万别把微博当飞机，把自己登陆进去，等坠机时想下来都难。</p>
<h2 id="网站">网站</h2><p>昨天的微博，点名蓝色理想、CSDN 等，不是否认它们曾经的辉煌和过去以及现在对新手们的帮助，而是从这两个网站目前的发展来看，任何有志于提高自己专业技能的，当尽量远离这些国内论坛。里面的喧嚣浮躁、充斥的劣质帖子，我不知道怎么用言语来形容。这段话你可以不认可，但我有我的观点。如果你觉得我是错的，那最好证明你是对的。</p>
<p>作为程序员，我目前经常上的网站不多，有 Google、StackOverflow、Quora 等。目前天天逛的只有 GitHub. GitHub 对我来说是个游戏乐园，充满挑战，也饱含趣味性。</p>
<h2 id="rss">RSS</h2><p>这个，放到现在，好像不用怎么去讨论了。前些年耗费了大量时间在 Google Reader 上，甚至一日不上心都痒痒。现在随着博客的萎靡，RSS 里的精品内容越来越少，没了欲望也就不会投入时间，不用担心。</p>
<p>和 RSS 类似，还有其他一些网站，比如豆瓣、知乎、Pinterest 之类的。对我来说好像都没什么吸引力，豆瓣是买书时会去看下书评，知乎是邮件里有人邀请回答问题时，偶尔去一下。Pinterest 等国外站点，更多是抱着研究产品的心态去的，好像没真正融入过，包括 Facebook，感觉就是一个闲得蛋疼的网站。</p>
<p>忘了说微博的另一个功能，就是“收藏”。感觉这是新时代的 RSS。在微博上，经常会看到一些很有价值的长文或视频等分享。这时我会用收藏功能收藏下，然后等到晚上和周末，集中一段时间来阅读。和当初阅读 Google Reader 一样。</p>
<p>现在也不怎么用微博的收藏，更多在使用 Evernote. 看到值得仔细再看的文章，会通过 Clearly 扩展收藏到 Evernote 服务器，然后在吃饭、睡前等零散时间段，通过手机客户端回顾。</p>
<p>另一个阵地是微信的公众帐号，目前订阅了小道消息、Mac技巧、鬼脚七、ATP、青龙老贼、36氪等公众帐号。质量很不错，有兴趣的可以选择性订阅。</p>
<h2 id="小结">小结</h2><p>貌似我是个保守派，半年前才升级系统到 Mountain Lion，研究了半天 Notifications Center，最后决定彻底将其禁用，右上角的图标也删掉。iPhone 的 Push 功能，也被我关得一干二净。</p>
<p>很喜欢用 Google Calendar，每天上班第一件事，就是规划好当天要干的事。不过也从来不开提醒，有会议什么的，都是一早就默记于心，很少会忘记。</p>
<p>最后，想起 @Macji 说的一句话： <strong>一旦你体味过投入式工作的乐趣，就不会迷恋社交化的快感。</strong>（大意如此，原话忘了）这句话我觉得说得非常好。曾经给自己总结过几点：</p>
<ol>
<li><p><strong>最好的阅读是产出。</strong>比如我现在写下这篇文字得到的乐趣和收获，远比在微博上看 1000000 条微博强。</p>
</li>
<li><p><strong>最好的 IM 是邮件。</strong>一直不喜欢通过微博或 IM 来讨论技术问题，更推荐通过邮件来交流。写邮件，可以让你的思路更清晰更完整，能让问题得到更有效的解决。除了邮件，目前代码类的讨论，非常喜欢 GitHub 的 Issues. Markdown 格式很优雅，GitHub 的 Issue 能自动与邮件打通，非常方便。</p>
</li>
<li><p><strong>群会让你变成群众。</strong>想泯然众人，就去泡群吧。</p>
</li>
<li><p><strong>异步优于同步。</strong>异步可以让你把主动权把控在自己手上，异步可以让你自由安排时间。对于程序员来说，除了少部分事情需要同步处理，绝大部分情况下，异步是高效之魂。</p>
</li>
<li><p><strong>碎片是强盗</strong>。抢占碎片时间的软件，不会帮你利用好碎片时间，只会把你的整片时间也打成碎片。</p>
</li>
<li><p><strong>读好书甚过网络阅读。</strong>一本好书带给人的收获，经常远超大量网络阅读能带来的。</p>
</li>
<li><p><strong>让信息找你。</strong>真正重要的信息，会主动到你这边。信息是会走路的，不用你自己的挖。不要担心错过什么信息。</p>
</li>
<li><p><strong>互联网是工具。</strong>别投入情感，真的。互联网就是石头、剪刀、布。</p>
</li>
<li><p><strong>读是为了写，学是为了用。</strong> 写是广义的写：写博客、写代码等等。只有这样，才能将阅读有效地变成产出。学是为了用，是因为任何学来的知识、感悟，如果不去用，不去实践，那就永远只会是感悟，永远不会真正流入你的内心、成为你的力量。</p>
</li>
</ol>
<p>据说过了三十岁的人，得早睡早起才能工作最棒。晚安，各位朋友们。希望这篇文字能对你有所帮助。</p>
<p>（完）</p>
<hr>
<p>时间管理是个很老的话题，在这方面一直非常感兴趣，因此总结分享出来，希望对你有所帮助。今天没有谈技术，回复里有些技术议题我觉得都不是很合适，大家可以提供一些想聊但不是太专业的技术话题，我可以尝试写写，也欢迎大家投稿。</p>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 在每个工作日（偶尔休息日）会定期推送一篇原创文字。请搜索 WTP 关键字，或扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/11974787.html</link><guid isPermaLink="true">http://acyort.github.io/posts/11974787.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Wed, 24 Aug 2016 10:21:31 GMT</pubDate></item><item><title><![CDATA[我心目中的优秀 API]]></title><description><![CDATA[<p>延续大前天的话题，陈皓在微博中提到</p>
<blockquote>
<p>【如何设计JS API？】我觉得有两点各个前端工程需要认真考虑：1）我们的一些 API 最好支持批量数据处理，而不是让人一次一次地调用。2）我们需要考虑多个 API 间的关联性，如果别人有可能在调用 API2 之前需要 API1 的结果，那么我们应该把 API1 和 API2 包一下。这会降低使用方的工作量。</p>
</blockquote>
<h2 id="支持批量处理">支持批量处理</h2><p>陈皓提到的这两点非常具体。支持批量处理，是 API 在设计时需要考虑多个输入。比如 shell 中的 cp 命令：</p>
<pre><code>$ cp *.js target_dir
</code></pre>
<p>对于 loader 来说也一样：</p>
<pre><code>// 加载一个文件
seajs.use('a', callback)

// 加载多个文件
seajs.use(['a', 'b'], callback)
</code></pre>
<p>API 是否支持批量处理，得具体看是什么功能，比如 Node.js 中的读取文件接口：</p>
<pre><code>fs.readFile('/etc/passwd', function (err, data) {
  // do something
});
</code></pre>
<p>这个 readFile 就没必要支持批量读取。</p>
<p>什么样的 API，以及什么时候需要支持批量处理呢？我觉得有以下几个规律：</p>
<ol>
<li><p><strong>直接面向普通使用者。</strong>比如 shell 中的好多命令，以及 <code>seajs.use</code>、<code>jQuery(selector)</code> 等等。这些 API 一般来说不用再封装，是高级 API。</p>
</li>
<li><p><strong>批量处理本身有含义、是常见需求。</strong>比如 readFile 支持批量价值就不大，一次读取多个文件的需求不常见，出现了也很容易基于 readFile 自己去实现。</p>
</li>
<li><p><strong>批量处理时，顺序无关，不存在依赖性。</strong>比如 cp 多个文件时，先处理哪个文件是没关系的。<code>seajs.use</code> 加载多个文件时，先加载同一层级的哪个文件也不应该影响最终结果。</p>
</li>
</ol>
<p>能满足以上需求的 API，经常就需要支持批量处理。</p>
<h2 id="考虑-api-的关联性">考虑 API 的关联性</h2><p>这个说的其实是依赖，很大程度上属于 user-land 范畴，API 本身经常很难做什么。比如在 shell 上，可以通过管道来解决依赖：</p>
<pre><code>$ cat sea-debug.js | wc -l
</code></pre>
<p>上面通过管道先后执行两个命令，可得到 <code>sea-debug.js</code> 文件的代码行数。</p>
<p>依赖问题最终都是顺序问题，shell 通过管道将依赖转换成单向顺序来解决，很轻巧方便。</p>
<p>但在浏览器端，异步满天飞，问题往往就没那么简单了。</p>
<p>比如</p>
<pre><code>seajs.use(['a', 'b', 'c'], callback)
</code></pre>
<p>如果模块 b 依赖模块 a，模块 c 是独立的。那么我们面临的问题是：</p>
<ol>
<li>seajs 如何知道依赖信息？如何知道模块 b 是依赖模块 a 的？谁来告知？何时告知？</li>
<li>如何实现 a、b、c 三个模块同时并行加载，但执行时是按照依赖顺序来执行的？</li>
</ol>
<p>涉及异步、涉及依赖，都绕不开以上问题。在 YUI3、Dojo、RequireJS、SeaJS、OzJS 等等类库 / 框架中都需要解决以上问题。</p>
<p>对于依赖信息的获取，典型的处理方式有两种：</p>
<ol>
<li><p><strong>提前申明依赖信息</strong>。比如 YUI 里，对于自带模块，会有一个很大的 json 数据来声明各个模块之间的依赖。非自带模块，则需要在使用前先注册一下，注册时申明好依赖。这样，处理起来就简单了。</p>
</li>
<li><p><strong>自我携带依赖信息</strong>。各个模块的依赖，在模块自己的代码中申明，比如</p>
<pre><code>define('b', ['a'], factory)
</code></pre>
<p>上面的第二个数组参数，表示模块 b 的依赖是模块 a.</p>
</li>
</ol>
<p>有了依赖信息后，就可以转换成顺序问题。依赖先加载，加载并执行后，再加载后续模块。这是最简单的处理方式。</p>
<p>还有一种方式是，因为依赖影响的是执行顺序，因此加载依旧可以并行，通通并行下载好后，在真正执行时，才根据依赖信息按顺序执行。这是 SeaJS 等 loader 的处理方式。</p>
<p>比如对于陈皓的那道面试题，如果用 SeaJS 来解决，可以：</p>
<pre><code>var API_URL = 'http://coolshell.cn/t.php?callback=define&n='
var urls = []

for(var i = 1; i < 31; i++) {
  urls.push(API_URL + i)
}

seajs.use(urls, function() {
  for (var i = 1; i < 31; i++) {
    console.log(i, arguments[i - 1])
  }
})
</code></pre>
<p>并发请求和顺序输出都解决了。注意这里的依赖仅仅是最后的顺序输出，与普通的依赖是不同的。普通的模块之间的依赖，可以通过模块之间声明依赖关系来解决。</p>
<p>各种 loader 仅是解决文件加载、文件依赖。如何处理依赖是更宽泛的话题，这里就不多说了。</p>
<h2 id="我心目的优秀-api">我心目的优秀 API</h2><p>以上说的，纯粹是从陈皓的微博引发的一些点上的思考，不具有普适性。对大部分前端 API 设计来说，参考价值也很有限。</p>
<p>下面扯扯更宽层面上，我心目中优秀 API 的标准。</p>
<h3 id="简单">简单</h3><p>我想了很久，依旧想把“简单”摆在第一位。好的 API 必须是简单的。简单不仅仅是看起来简单，简单还意味着背后的实现逻辑是正常人类思路能理解的。比如</p>
<pre><code>document.getElementById('string')
</code></pre>
<p>这个 API 是个前端都能看懂，并且能大概猜出背后是怎么实现的。虽然很可能猜错，但没关系，关键是你不会觉得神秘难懂。类似的，有很多实物 API：</p>
<blockquote>
<p>汽车车窗的控制把手。往上提就是关窗，往下摁就是开窗。很符合直觉，大概也能猜出是怎么实现的（当然实际没那么简单，但能让用户感觉很简单）。</p>
</blockquote>
<p>简单也意味着一致性。比如 JavaScript 里，forEach、map、filter 等所有数组遍历操作，callback 接收的参数都是 item、index、array. 这种一致性可以让你触类旁通，非常舒适。</p>
<h3 id="完备">完备</h3><p>完备是指，某个类库或框架，对所解决的问题领域和业务需求，要有彻底的深入理解。提供的 API 是一整套的，能处理该问题领域的各种可能性，各种实际需求。</p>
<p><strong>要达到完备性，首先要解决的是定位问题。</strong>任何类库框架都不可能解决所有问题，必须要非常清楚要解决的问题范畴。依旧拿我最爱的 jQuery 来举例。</p>
<p>jQuery 的定位非常清晰： <strong>DOM 操作类库</strong>，包括 DOM 操作、事件、动画和 Ajax。其他的比如 Cookie 操作、Loader 等功能，即便用户需求很旺盛，jQuery 也会节制欲望，不去涉足。</p>
<p>在这个定位下，jQuery 的设计也非常清晰： <strong>找到 DOM 元素，并操作它。</strong> 这样，jQuery 的整套 API 变得很优美：</p>
<pre><code>$(selector).attr(...)
$(selector).css(...)
$(selector).animate(...)
...
</code></pre>
<p>优美之处在于，你能想到的常用 DOM 操作等功能，jQuery 都提供了。不怎么常用的，使用 jQuery 的现有 API，也能快速实现。</p>
<p>这就是 API 的完备性，让你不会因为某些功能的实现而抓狂。一切都在那里静静躺着，等着你去发现，等着你去欣赏。</p>
<p>同样，SeaJS 也是抱着这个目的去做。SeaJS 的定位是 Web 端的模块加载器，核心是解决模块定义、依赖管理、模块加载。此外一切问题都不属于 SeaJS 范畴。 <strong>SeaJS 的理想是把自己做“死”</strong>，“死”意味着完备性，意味着站在 loader 的角度，SeaJS 的功能能增无可增，减无可减。</p>
<p>除了简单、完备这两个关键词，我想不到优秀的 API 还需要去做什么。简单能给用户带去欢喜，完备则可以让开发者去挑战新的领域。</p>
<h2 id="最后">最后</h2><p>有人反馈 WTP 的文章太技术，看不太懂。这个不好意思，这就是一个技术型的公众帐号，偶尔会谈谈产品。如果你不是做技术的，可以退订下，没关系的。</p>
<p>还有人反馈 WTP 上好多广告。这个，真没有哦。的确提到了 SeaJS，以后还会进一步说说 Arale 的一些东西。说这些，更多是因为我熟悉，分析熟悉的东西总会更有底气，也会更有料些。</p>
<p>大家可以回复，说说想看哪些内容，也可以问些具体的问题（不要问怎么学好 JavaScript 等大问题）。好的问题，我会仔细回复。</p>
<p>（完）</p>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 在每个工作日（偶尔休息日）会定期推送一篇原创文字。请搜索 WTP 关键字，或扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/11920727.html</link><guid isPermaLink="true">http://acyort.github.io/posts/11920727.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Thu, 21 Mar 2013 12:57:35 GMT</pubDate></item><item><title><![CDATA[聊聊 JSONP 的 P]]></title><description><![CDATA[<p>前天的文章 <a href="https://github.com/lifesinger/lifesinger.github.com/issues/117">放开你的思路</a>，微信和微博上得到了不少回复，陈皓也提到可以进一步探讨 JS API 的设计。API 的设计是一个很大的话题，今天延续前天的文章，仅聊聊 JSONP 的设计。</p>
<p>JSONP 是 JSON With Padding 的缩写。一个典型的 JSONP 请求如下</p>
<pre><code><script src="http://server.example.com/users/abc?callback=parseResponse"></script>
</code></pre>
<p>返回值为</p>
<pre><code>parseResponse({"name": "Foo", "id": 1234, "rank": 7});
</code></pre>
<p>其中 <code>parseResponse</code> 是由 <code>callback</code> 参数指定的，也就是 JSONP 中的 P（adding）。这个 P 可不简单，第一个想到这么用的人，绝对是个大牛。因为有了这个 P，解决了好些难题：</p>
<ol>
<li><p><strong>回调问题</strong>。只要发出 script 请求，自动等待 callback 回调就好，并且精准得能秒杀 <code>onload</code> 等方案。</p>
</li>
<li><p><strong>跨域问题</strong>。因为浏览器的同源策略，跨域一直是前端的难题。跨域与安全息息相关，JSONP 没有破坏安全性，同时却具备了全面跨域能力。巧妙而实用。</p>
</li>
<li><p><strong>协作问题</strong>。后端专注与数据处理与输出，前端专注与数据展现。除了 JSON 数据本身的格式约定，其他约定仅仅需要一个 P 就好。</p>
</li>
</ol>
<p>好了，再说下去，估计很多人会不乐意了。JSONP 的劣势也很明显：</p>
<ol>
<li><p><strong>无中间状态</strong>。不像 XHR（XMLHttpRequest） 那样，有丰富的 status 、readyState 等属性，可以很精准地知道各种状态。</p>
</li>
<li><p><strong>只能 GET</strong>。不像 XHR 那样，可以全方位支持 GET、POST、PUT、DELETE。</p>
</li>
<li><p><strong>只能异步</strong>。XHR 是可以同步的，估计很多人没用过，同步其实是 XHR 的默认行为（省略 open 的第三个参数就代表同步）。</p>
</li>
</ol>
<p>本文不聊其他的，专注聊聊那个 P。</p>
<p>回到开头那个例子：</p>
<pre><code>http://server.example.com/users/abc?callback=parseResponse
</code></pre>
<p><code>parseResponse</code> 是一个全局函数。当页面上很多 JSONP 请求时，就有可能出现很多全局函数。虽然全局变量并不一定是恶魔，但不好好管理的全局变量真的有可能成为恶魔。管理的方案之一是给 P 引入命名空间：</p>
<pre><code>http://server.example.com/users/abc?callback=JSONP.parseResponse
</code></pre>
<p>这样，所有 JSONP 的回调处理函数就都有了根，可以避免与其他函数的潜在冲突。</p>
<p>可是，这还得绞尽脑汁给 <code>JSONP.xxx</code> 命名，经常大家会想到一块，比如 xxx 经常会不谋而合：</p>
<pre><code>callback
handle
parseData
_Callback
jsonp
</code></pre>
<p>这种不谋而合，虽然代表着英雄所见略同式的欣慰，但更多的是：我靠，你怎么也取这个名字？</p>
<p>这可怎么解决呢？</p>
<p>来试试 jQuery 类库。jQuery 的优秀绝对不仅仅是给你一个 $ 符号，jQuery 在很多方面考虑得非常周到：</p>
<pre><code>$.getJSON("http://server.example.com/users/abc?callback=?",
  function(data) {
    console.log(data.name); // => Foo
  });
</code></pre>
<p>很神奇的，只需要指定下 <code>callback=?</code> 就好，再也不用为命名犯愁了。原理是 jQuery 帮你随机命名了一个当前页面唯一的全局 callback 函数，并且与 success 调用串接了起来。这样，就可以像使用 XHR 一样直接在回调中拿到 data 数据。</p>
<p>jQuery 再好，也抵挡不住 winter 等神人的不喜欢。这时，我们可以用各种 loader 来实现，比如：</p>
<pre><code>seajs.use("http://server.example.com/users/abc?callback=define",
  function(data) {
    console.log(data.name); // => Foo
  });
</code></pre>
<p>通过 RequireJS、SeaJS、OzJS 等 XMD loader，我们也不再需要为回调函数名烦恼，只要给 callback 传入 define 就好。</p>
<p>如果你有全站使用 loader 方案，更进一步，可以约定没有传 callback 参数时，默认就是 define. 这意味着对于静态 JSON 数据来说，可以静态化：</p>
<pre><code>seajs.use("http://server.example.com/users/abc.js",
  function(data) {
    console.log(data.name); // => Foo
  });
</code></pre>
<p>这样，服务端的 JSONP 数据直接可以是静态文件：</p>
<pre><code>define({"name": "Foo", "id": 1234, "rank": 7});
</code></pre>
<p>这带来的好处看起来很小，实际上很有用。因为这意味着数据可以提前处理好，可以提前缓存，甚至可以静态化存储到 CDN 上，可以缓存到用户浏览器上。静态化的好处，谁用谁知道。</p>
<p>用 define 固定住 callback 名，配合浏览器端的 loader，我们可以传输各种数据：</p>
<pre><code>define([ ... ]); // 数组格式，比如搜索提示数据
define("...."); // 直接字符串，比如模板
</code></pre>
<p>这个方案，鄙人很无耻，还申请过一个专利，叫 JSONM 协议，M 是 Module（模块）。不过以上用法不在专利保护内容里，大家可以放心大胆用。</p>
<p>P 还可以摇身一变，从 JSONP 变成 XHR，比如</p>
<pre><code>http://server.example.com/users/abc?type=xhr
</code></pre>
<p>通过 type 参数，服务端就会直接返回 JSON 数据，这样就可用在 XHR 调用中。Google 的 API 中有类似的设计，很灵活。</p>
<p>JSONP 的这个 P，到此就谈完了。除了这个 P，更有挑战的是 JSON 数据本身的设计。这里面学问大了去，等有时间再细说。</p>
<p>有任何想法，欢迎回复，欢迎讨论。</p>
<p>（完）</p>
<p>欢迎订阅 WTP（Web 技术与产品交流）微信公众帐号。WTP 在每个工作日（偶尔休息日）会定期推送一篇原创文字。请搜索 WTP 关键字，或扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/11878823.html</link><guid isPermaLink="true">http://acyort.github.io/posts/11878823.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Thu, 09 Apr 2015 15:17:14 GMT</pubDate></item><item><title><![CDATA[放开你的思路]]></title><description><![CDATA[<h1 id="放开你的思路">放开你的思路</h1><p>前些天，陈皓在微博上抛出了异步请求的一个问题：</p>
<blockquote>
<p>coolshell 网站提供了 10 进制转 16 进制的 JSONP 服务，即 
GET 请求 <a href="http://coolshell.cn/t.php?n=10&amp;callback=xxx">http://coolshell.cn/t.php?n=10&amp;callback=xxx</a>
会返回 xxx(&#39;0xa&#39;);</p>
<p>问题：
使用 JavaScript 调用上面的 API 输出 1 - 30 的 16 进制表示（最好按顺序打印）</p>
</blockquote>
<h2 id="我的直觉方案">我的直觉方案</h2><p>首先封装下 JSONP 的调用接口：</p>
<pre><code>function getScript(url) {
  var script = document.createElement('script')
  script.src = url
  document.documentElement.appendChild(script)
}

function decimal2Hex(n, callback) {
  window['callback' + n] = function(result) {
    callback(n, result)
  }
  getScript('http://coolshell.cn/t.php?n='
      + n + '&callback=callback' + n)
}

function print(n, result) {
  console.log(n, result)
}
</code></pre>
<p>然后，对于陈皓提出的问题，一个循环就能解决：</p>
<pre><code>for(var i = 1; i < 31; i++) {
  decimal2Hex(i, print)
}
</code></pre>
<p>好像很简单。</p>
<h2 id="可是，大家在讨论什么">可是，大家在讨论什么</h2><p>这条微博很火，涌现出各种方案。比如</p>
<pre><code>
 // 闭包法
 for (var i = 1; i < 31; i++) {
  (function(n) {
    xss_rpc_call2(n, function(result) {
      print(n, result)
    })
  })(i)
}

// 递归法
function recursive_solution(n) {
  if (i === 31) return
  xss_rpc_call(n, function(result) {
    print(n, result)
    recursive_solution(i + 1)
  })
}
recursive_solution(1)

// 数组法
// ...

// 自制 Async 法
// ...

// 数组优化法
// ...

// 性能加超时法
// ...
</code></pre>
<p>详见陈皓的总结：<a href="http://coolshell.cn/t.html">http://coolshell.cn/t.html</a></p>
<p>性能加超时法另当别论，这是另一个话题。前面的递归法、数组法、Async 法等等，看得直让让我纳闷。这是在玩什么呢？</p>
<p>仔细探究了一番源码后，发现罪魁祸首是那两个命名怪异的方法：<code>xss_rpc_call</code> 和 <code>xss_rpc_call2</code>。看其中一个：</p>
<pre><code>function xss_rpc_call2(n, callback) {
  var t = Math.round(Math.random() * 100000)
  var callbackName = "xss_rpc_callback" + n + t
  var url = "http://coolshell.cn/t.php?n=" + n
      + "&callback=" + callbackName

  xss_ajax(url)

  window[callbackName] = function(result) {
    var timeout = Math.round(Math.random() * 1000)
    setTimeout(function() {
      callback(result)
    }, timeout)
  }
}
</code></pre>
<p>为了排版，上面的代码稍有修改。其中 <code>xss_ajax</code> 类似 <code>getScript</code> 方法。</p>
<p>还记得前面的 decimal2Hex 方法不？来对比看下：</p>
<pre><code>function decimal2Hex(n, callback) {
  window['callback' + n] = function(result) {
    callback(n, result)
  }
  getScript('http://coolshell.cn/t.php?n='
      + n + '&callback=callback' + n)
}
</code></pre>
<p>除了面试官故弄玄虚的 <code>setTimeout</code>，以上两个方法的核心区别是给 <code>window</code> 添加的全局回调函数有差异。<code>decimal2Hex</code> 里，直接 <code>callback(n, result)</code>，这就避免了闭包陷进。</p>
<p>进一步看源码，可以看出大家对题目中的</p>
<blockquote>
<p>最好按顺序打印</p>
</blockquote>
<p>非常在乎。大部分方案是在解决这个问题。</p>
<h2 id="顺序输出">顺序输出</h2><p>顺序输出，最好的解决方式是，打电话给陈皓，让 JSONP 接口更强大，比如：</p>
<pre><code>http://coolshell.cn/t.php?min=1&max=30&callback=xxx
</code></pre>
<p>如果真要解决，修改 <code>print</code> 方法，到最后再统一显示：</p>
<pre><code>var cache = []
var count = 0

function print(n, result) {
  cache[n] = result
  if (++count === 30) {
    cache.forEach(function(result, n) {
      console.log(n, result)
    })
  }
}
</code></pre>
<p>类似问题，在 npm 等命令行工具里，都是忽略掉，谁先到达谁先显示就行。还可以进一步优化成尽快显示，但对于陈皓这个面试题来说，真心没必要。如果在其他场景中有需要，很可能有其他更好的解决方案。</p>
<p>上面是引子，下面是我觉得有意思的。</p>
<h2 id="放开你的思路">放开你的思路</h2><p>在微博上的所有解决方案中，好像没看到修改 <code>xss_rpc_call2</code> 的。陈皓只是限定不能修改服务端接口，并没限定 JS 代码。</p>
<p>无论是面试题，还是工作中遇到的真实问题，我们往往会局限在舒适区。比如对于页面性能优化，后端会从后端的角度去思考，前端会从前端的角度去分析。这种分工细化，可以将页面性能优化得不错，但却很难达到优秀，很难产生出类似 Facebook BigPipe 式的创新类优化。</p>
<p>陈皓说，你无权修改我的 API。</p>
<p>很多人又很听话了，开始乖乖地在这种假设的限制下去想解决方案。可是，为什么无权修改呢？在工作中，类似的话太多了：</p>
<blockquote>
<p>PD 说：这个需求一定要实现，不能去掉。
设计说：这个按钮必须这样，不能修改。
PM 说：周五必须上线，不能延期。
...</p>
</blockquote>
<p>可是 TMD，作为直接为代码负责的你，为什么不能说：</p>
<blockquote>
<p>你无权剥夺我合理拒绝的权力。</p>
</blockquote>
<p>这个话题点到为止。在《程序员的职业素养》里专门有章节阐述此话题，推荐大家购买阅读并真实实践之。如果你学不会说“不”，如果你不懂得拒绝，你永远无法成为专业的程序员。</p>
<p>有任何不同看法，欢迎讨论。</p>
<p>（完）</p>
<p>这是 WTP（Web 技术与产品交流）微信公众帐号的第一篇文章。WTP 在每个工作日（偶尔休息日）会定期给大家推送一篇原创文字。请搜索 WTP 关键字，或扫描二维码订阅：</p>
<p><img src="http://ww4.sinaimg.cn/thumbnail/68361562gw1e2iehwolnpj.jpg" alt=""></p>
]]></description><link>http://acyort.github.io/posts/11839787.html</link><guid isPermaLink="true">http://acyort.github.io/posts/11839787.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Mon, 08 Apr 2013 03:24:27 GMT</pubDate></item><item><title><![CDATA[毕业十年与我的三个梦]]></title><description><![CDATA[<p>2003 年毕业，今年 2013 年。转眼十年，好快。</p>
<p>2008 年前，心中还留存着科学家的梦。在有着寒暑假的北京度过了充满激情又时常没劲的 5 年。感谢我的导师、老师，感谢小关、袁锋、志刚、李引…… 那一个个名字，如此遥远又真切。</p>
<p>2008 年开奥运会。在警察叔叔排查临时人口之前，我悄悄来到了杭州。</p>
<p>2008 年到 2010 年，在淘宝 UED 度过了难忘的三年时光。不会忘记：</p>
<ol>
<li>投递的简历进了承志的垃圾箱，几个月后偶然才捞出来，由此来了淘宝……</li>
<li>小马对我的信任，刚入职就被送入小黑屋，与伏威等人一起做交易 N 期……</li>
<li>小雕诞生的日子，二当家亲自送了一箱价格昂贵的尿不湿……</li>
<li>UED 的新人秀，师兄佩玉的幽默，还有一起被新人秀的沉鱼、在天……</li>
<li>和青云、清羽等一起做 TMS（模板管理系统） 的岁月……</li>
<li>把淘宝首页搞得只剩下搜索框时的汗流浃背，以及小虎的处理……</li>
<li>五彩石项目中，因项目时间不够，和 PD、PM 争执的岁月……</li>
<li>还有很多很多……</li>
</ol>
<p>09 年底，获得了破格晋升。回想起来，最关键的是自己的变化，最喜悦的是自我能力的成长。</p>
<p>09 年因为项目需要，开始做 KISSY Editor，开启了漫长的开源之路。</p>
<p>10 年 KISSY Editor 升级为 KISSY，忘不了与承玉、乔花、沉鱼等人一起为 KISSY 辛苦付出的岁月。</p>
<p>10 年是迷茫的一年。技术越来越不能满足心中的欲求。那一年有赛马。Taobao Labs、tao123、Web 旺旺、前端性能优化……好多好多事情，如花似水。</p>
<p>事情一多一杂，人就会想多。一旦想多了，往往不利于成长。</p>
<p>2010 年，我想了好多好多。最后选择了离开熟悉的淘宝 UED，去了一个很神秘的项目组：湖畔。</p>
<p>大明湖畔的日子，将近 4 个月，不算长也不算短。那 4 个月天天讨论产品，LBS、Facebook、Pinterest…… 那时马云老婆偶尔也会过来兜售概念，印象最深刻的是马云老婆想做云相册，挺有想法的，虽然我们都觉得不靠谱。湖畔的日子里，老大是菲青，儒雅之士，中午经常和我们一块吃饭桌，饭桌上全是特价菜，现在回想起来真难吃啊……</p>
<p>很惭愧的是，我给湖畔的贡献，只有 “湖畔” 这个产品名以及 hupan.com 这个域名……</p>
<p>2011 年 4 月离开湖畔，到了范禹团队，心中继续的是产品梦。</p>
<ol>
<li><p>依旧想做产品。癫总的特色中国构想，我和轻侯、在天等人的折腾…… 很多故事，到如今，都成回忆……</p>
</li>
<li><p>忘不了因阿里味的神贴，行癫给我的嘱咐。更忘不了马总的电话。</p>
</li>
<li><p>RMS（文件发布系统） 和 POC（性能优化系统） 的岁月，感谢小虎、文河、小凡、君山等兄弟的陪伴，还有远道而来的决尘。</p>
</li>
</ol>
<p>遥远又不遥远的回忆里，满是寂寞与孤独的沟壑。在沟壑深处，盛着难忘的泪水、感恩与欢乐。</p>
<p>2012 年，在情人节之后，转岗到了支付宝。</p>
<p>上半年有一种重回代码的喜悦。老婆说我代码一写多了，就会连话都说不拎清。12 年上半年好像还真是这样，经常想跟人说话时，满脑子还是代码呢，结果就是消失许久的结巴又回到了我身上。</p>
<p>下半年开始带团队，把 SeaJS、Arale、spm 等逐步做起来。这些大家大抵都知道，不多说。</p>
<p>我有三个梦：技术梦、产品梦、自由梦。</p>
<p>之前我一直把前两个梦割裂开来，2012 年最大的成长是意识到前两个梦可以合起来，技术即产品，产品即技术。12 年下半年很清楚明确基础技术最重要的是产品化。只有用做产品的心态去做技术，才有可能把技术做好做长久。</p>
<p>产品梦不仅仅是技术梦，但技术梦可以融合进产品。做产品不一定要出去创业，在公司依旧可以做到。公司本身也是一个产品，对业务的了解、深入、改进等等，都很有挑战，非常值得去做。产品梦重要的不是所做的事情，而是做事的产品心态。</p>
<p>至于自由梦，于我而言，一是财富自由，二是精神自由。愚公（周爱民）说过挺有意思的一句话：财富自由不要只看收入，最主要取决于支出。目前愚公就已实现了财富自由，因为愚公老家那地方，日常开销真是小，呵呵。真正难得是精神自由，12 年机缘巧合，接触了一些佛缘，对自己的影响很大。</p>
<p>夜深了，早点睡。让明天的自己比今天好。</p>
]]></description><link>http://acyort.github.io/posts/11459832.html</link><guid isPermaLink="true">http://acyort.github.io/posts/11459832.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Mon, 25 Apr 2016 12:13:22 GMT</pubDate></item><item><title><![CDATA[jQuery 为什么优秀兼谈库与框架的设计]]></title><description><![CDATA[<p>从 @wintercn 的这篇文章说起：<a href="http://www.cnblogs.com/winter-cn/archive/2013/02/20/2919855.html">从 jQuery 谈库与框架的设计之优劣</a></p>
<p>先去读一读哦，不长的，winter 写得很幽默。</p>
<p>好了，看下文。</p>
<h2 id="解决什么问题">解决什么问题</h2><p>拿 winter 的代码入手：</p>
<pre><code>function traversal(node, f) {
    f(node);
    if(node.children.length) {
        for(var i = 0; i<node.children.length;i++)
            traversal(node.children[i],f);
    }
}

traversal(document.body,function(element){
    if(element.tagName=="button" && element.className.match(/continue/)) {
        element.innerHTML = "Next Step...";
    }
})
</code></pre>
<p>这段代码很酷，看见了递归没？还有传说中的函数式编程！也不长，只有 166 个字符。考虑 jQuery 那庞大的 97K 代码，完全可以自己写啊，真心用不着什么类库。</p>
<p>可是，各位看官，在中国，有两种东西需要小心：一是 CCAV 的新闻，二是程序员的代码。你信前者就幸福了，后者嘛，请看：</p>
<blockquote>
<p>尼玛，winter 坑我，复制过来的 traversal 方法工作有点不正常呀</p>
</blockquote>
<p>为了节约笔墨（精彩在后面），先不说 <code>children</code> 的坑（不说是因为 winter 刚好绕过去了），来说说下面这个：</p>
<pre><code><button class="continued">
</code></pre>
<p>这可不是故意挑刺，我们在讨论类库哦。上面的 <code>button</code> 也会被 <code>traversal</code> 命中。好吧，我帮 winter 修改下：</p>
<pre><code>traversal(document.body,function(element){
    if(element.tagName=="button" && element.className.match(/(?:^|\s)continue(?:\s|$)/)) {
        element.innerHTML = "Next Step...";
    }
})
</code></pre>
<p>修改后，正则看起来很酷。师兄下次 review 代码时，应该会觉得我技术有进步，加薪、晋升有望了……</p>
<p>继续节约笔墨（精彩在后面），不说代码的优化空间。只想问呀，这么一个简单的功能，值得如此折腾吗？为何不用一行搞定：</p>
<pre><code>$( "button.continue" ).html( "Next Step..." )
</code></pre>
<p>好了，各位看官，你还同意 winter 说的 jQuery 是 <strong>“没有问题创造问题也要解决问题”</strong> 吗？</p>
<p>调侃结束，言归正传。jQuery 解决什么问题，jQuery 能做什么，来看官网：</p>
<blockquote>
<p>jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the way that millions of people write JavaScript.</p>
</blockquote>
<p>云译一下：</p>
<blockquote>
<p>jQuery …… 让 DOM 操作简单 …… 跨浏览器 ……</p>
</blockquote>
<p>翻译有直译、意译、神译，但在云时代，得用云译。诠释如下：</p>
<ul>
<li><p><strong>jQuery 是 DOM 操作类库，非常专注。</strong> 这很重要很重要。正是这种 <strong>专注做小</strong> 的心态，让 jQuery 在 DOM 操作领域所向披靡。这比野心勃勃想着做大的 Prototype、YUI、Dojo 等不知强多少呢。jQuery 的流行证明了专注的力量。找老公也可以用 jQuery 去衡量。</p>
</li>
<li><p><strong>jQuery 真的很专注。</strong> 常见的 <code>each</code>，尼玛的 <code>Deferred</code> 等看起来和 DOM 无关的东东，实际上跟 DOM 方法的实现很有关系，暴露出来挺有用，因此才暴露。此外，与 DOM 操作实现无关的 <code>cookie</code>、<code>localStorage</code> 等等，jQuery 一律不提供。（注：个人觉得如果这些内部方法不暴露，只暴露与 DOM 操作相关的方法，jQuery 会更完美。注2：别跟我较真说动画和 Ajax 不是 DOM 操作。）</p>
</li>
<li><p><strong>jQuery 非常关注用户</strong>。专注于 DOM 操作及其兼容性，让普通用户包括设计师都可以快速写出代码，这是 jQuery 的巨大价值。</p>
</li>
</ul>
<p>预测：苏宁电器会改名叫苏宁云商，但 jQuery 不会改名为 jLibrary。和 jQuery 同样专注的还有 Evernote、Amazon、Dropbox 等等牛逼的东东。</p>
<p>（精彩已讲完，下面可以不看。 <strong>在类库界，解决了 What，解决了定位问题后，基本上已经决定了生死存亡。</strong> 至于 How，也重要但往往不是关键。最近看 Grunt 类库，也有同感。）</p>
<h2 id="也谈命名">也谈命名</h2><p>命名非常重要。比如决定 winter 牛逼的，不是 1024，而是 winter 这个名字。</p>
<p>不过没看懂 winter 说什么，因为 winter 说的和 jQuery 没什么关系。可能跟 jQuery 的早期版本有关系，但任何事物都会有历史局限性，就如我就一直期待传送门，但不能嘲讽当代的汽车。</p>
<p>至于 <code>$</code> 的选择，这就如 <code>码农</code>、<code>屌丝</code> 等词汇一样，winter 好像也经常用，并不反感。<code>$</code> 的选择也像 <code>QWERT</code> 键盘，或者系统中用 <code>~</code> 表示 Home 目录一样。为什么很少见 *nix 用户不爽 <code>~</code> 呢？</p>
<p>不评论了。要谈命名，不如谈 jQuery 的方法名，简洁明了。YUI3 等类库抄得不亦乐乎，这是一种认可与致敬。</p>
<h2 id="接口设计">接口设计</h2><p>泛义上讲，完全同意 winter 的说法。我也非常讨厌一个方法职责不清、身兼数职。比如 RequireJS 里，最让我不能忍受的重要原因之一就是，天杀的 <code>require</code> 方法一会是全局方法，一会是函数变量，一会是云，一会是风……  </p>
<p>不过， <strong>谈任何设计，都离不开场景。</strong></p>
<p>jQuery 是 DOM 操作类库。jQuery 首要要解决的是： <strong>如何高效方便地操作 DOM？</strong> 在这个真实需求下，jQuery 选择了一句话：</p>
<blockquote>
<p>找到 DOM 元素，然后再操作、继续操作。</p>
</blockquote>
<p>上面这句话，不是 jQuery 凭空设计出来的，而是千万前端工程师们在写代码时实际上会干的事情：</p>
<pre><code>var foo = document.getElementById("foo");

foo.setAttribute("data-bar", "bar");
foo.innerHTML = "...";
</code></pre>
<p>上面的代码挺不错的，但有坑。jQuery 将上面这种常见代码，通过链式操作简化成了：</p>
<pre><code>$("#foo").attr("data-bar", "bar").html("...");
</code></pre>
<p>这就如我们一般不会说：</p>
<pre><code>我是 winter
我喜欢编码
我喜欢妹子
</code></pre>
<p>而会说：</p>
<pre><code>我是 winter，喜欢编码，也喜欢妹子。
</code></pre>
<p>至于 getter 和 setter 的统一，可以类比：</p>
<pre><code>var host = { a: "a" };

// 获取值
alert(host.a);

// 设置值
host.a = "aa";
</code></pre>
<p>别跟我说一定要：</p>
<pre><code>var host = {
  a: "a",
  getA: function() { return this.a; },
  setA: function(val) { this.a = val; }
}
</code></pre>
<p>不直接通过属性，而通过方法来搞定 getter 和 setter，个中缘由 winter 比我更清楚，有兴趣的可以看：<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty">defineProperty</a></p>
<p>其实上面说的跟 winter 反驳的没什么关系，winter 主要反对职责不单一。不过，职责不单一的方法，在 jQuery 里有，但并不多。至于 <code>$</code> 的功能，这是入口方法，为了用户的便利性， <strong>适当放下程序员的完美情节</strong>，个人觉得是一种 <strong>面向用户的权衡</strong>。很多产品也如此，在屌丝用户看来很糟糕，但普通用户还真喜欢，因为方便。</p>
<h2 id="耦合">耦合</h2><p>举例子来说说：</p>
<ol>
<li><p>YUI3 最初的理念中，有一个很重要的是 <strong>颗粒化</strong>。颗粒化使得 winter 可以单独调用 ajax 模块。然而，YUI3 发展至今，虽然颗粒化极细，但你若去看使用 YUI3 的页面，稍稍 <code>YUI().use(&quot;node&quot;)</code> 一下，加载过来的文件大小就超过 jQuery 了。</p>
</li>
<li><p><strong>颗粒化必须考虑颗粒的大小、范畴。</strong> 在 DOM 操作领域，能够保持功能与 jQuery 近似，大小又比 jQuery 小的，目前我好像还从来没有看到过。除非把定位缩小，比如只支持 webkit，砍功能后，才有可能比 jQuery 更小。同等功能下，能做到 jQuery 这么优秀的 DOM 操作类库，如果你发现了一定要告诉我。</p>
</li>
<li><p><strong>一个文件。</strong> 能用一个文件解决的，不用两个文件来做。超过一个文件就意味着依赖关系的管理。这里拿老赵的 Wind.js 来说，够屌丝了，但普通用户真不愿意去搞清楚那几个文件怎么引，还要分谁先谁后，天哪。所以后来 Wind.js 也有了 aio 版本（All in One）。方便用户，而不是满足自己。</p>
</li>
<li><p><strong>历史与未来。</strong> 当然，上面说了这么多，但场景在飞速变化。比如 IE6 的市场份额在国外已经到了可以忽略的地步。场景的变化，使得 jQuery 开始朝向 2.0 发展。Animation 和 Ajax 等模块在设想中也都可以独立出来，还有很多很多变化。但最大的变化，个人觉得不是理念更先进了（模块化老掉牙了），而是 <strong>顺势而为</strong>。这个“势”是场景的变化。设计架构的演变，离不开场景。场景的变化经常推动着设计的进化。很多公司的架构之所以牛，并非牛人使然，而是公司业务场景的需要。快跑题了，这个另一个蛮有意思的话题……</p>
</li>
</ol>
<h2 id="写在最后">写在最后</h2><p>jQuery 的专注，不三心二意， <strong>非常有利于生态圈的形成</strong>。君不见，jQuery 社区目前就是前端界的阿里巴巴呀，winter 你来一淘了，应该认可阿里的大方向哦。反观 YUI3 等框架，不是京东又是什么呢？</p>
<p>最后，来点煽情的。jQuery 在我心中，是一尊女神。她温柔、细腻，她火辣、傲娇，一定会有人骂她，但真了解她的，会爱上她。</p>
<p><img src="https://f.cloud.github.com/assets/97227/178726/dd398e6e-7bc8-11e2-8c39-cb2977c21f90.jpg" alt="zhanghua"></p>
<p>（全文完）</p>
]]></description><link>http://acyort.github.io/posts/11221460.html</link><guid isPermaLink="true">http://acyort.github.io/posts/11221460.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Wed, 06 Apr 2016 11:28:49 GMT</pubDate></item><item><title><![CDATA[从 JavaScript 数组去重谈性能优化]]></title><description><![CDATA[<h2 id="缘由">缘由</h2><p>JavaScript 数组去重经常出现在前端招聘的笔试题里，比如：</p>
<blockquote>
<p>有数组 <code>var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;1&#39;, 0, &#39;c&#39;, 1, &#39;&#39;, 1, 0]</code>，请用 JavaScript 实现去重函数 <code>unqiue</code>，使得 <code>unique(arr)</code> 返回 <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;1&#39;, 0, 1, &#39;&#39;]</code></p>
</blockquote>
<p>作为笔试题，考点有二：</p>
<ol>
<li><p><strong>正确</strong>。别小看这个考点，考虑到 JavaScript 经常要在浏览器上运行，在千姿百态的各种浏览器环境下要保障一个函数的正确性可不是一件简单的事，不信你继续读完这篇博客。</p>
</li>
<li><p><strong>性能</strong>。虽然大部分情况下 JavaScript 语言本身（狭义范畴，不包含 DOM 等延拓）不会导致性能问题，但很不幸这是一道考题，因此面试官们还是会把性能作为一个考点。</p>
</li>
</ol>
<p>在继续往下阅读之前，建议先实现一个自己认为最好的版本。</p>
<h2 id="直觉方案">直觉方案</h2><p>对于数组去重，只要写过程序的，立刻就能得到第一个解法：</p>
<pre><code>function unique(arr) {
  var ret = []

  for (var i = 0; i < arr.length; i++) {
    var item = arr[i]
    if (ret.indexOf(item) === -1) {
      ret.push(item)
    }
  }

  return ret
}
</code></pre>
<p>直觉往往很靠谱，在现代浏览器下，上面这个函数很正确，性能也不错。但前端最大的悲哀也是挑战之处在于，要支持各种运行环境。在 IE6-8 下，数组的 <code>indexOf</code> 方法还不存在。直觉方案要稍微改造一下：</p>
<pre><code>var indexOf = [].indexOf ?
    function(arr, item) {
      return arr.indexOf(item)
    } :
    function indexOf(arr, item) {
      for (var i = 0; i < arr.length; i++) {
        if (arr[i] === item) {
          return i
        }
      }
      return -1
    }

function unique(arr) {
  var ret = []

  for (var i = 0; i < arr.length; i++) {
    var item = arr[i]
    if (indexOf(ret, item) === -1) {
      ret.push(item)
    }
  }

  return ret
}
</code></pre>
<p>写到这一步，正确性已没问题，但性能上，两重循环会让面试官们看了不爽。</p>
<h2 id="优化方案">优化方案</h2><p>一谈到优化，往往就是八仙过海、百花齐放。但八仙往往不接地气，百花则很容易招来臭虫。数组去重的各种优化方案在此不一一讨论，下面只说最常用效果也很不错的一种。</p>
<pre><code>function unique(arr) {
  var ret = []
  var hash = {}

  for (var i = 0; i < arr.length; i++) {
    var item = arr[i]
    var key = typeof(item) + item
    if (hash[key] !== 1) {
      ret.push(item)
      hash[key] = 1
    }
  }

  return ret
}
</code></pre>
<p>核心是构建了一个 <code>hash</code> 对象来替代 <code>indexOf</code>. 注意在 JavaScript 里，对象的键值只能是字符串，因此需要 <code>var key = typeof(item) + item</code> 来区分数值 <code>1</code> 和字符串 <code>&#39;1&#39;</code> 等情况。</p>
<p>但优化真的很容易带来坑，比如上面的实现，对下面这种输入就无法判断：</p>
<pre><code>unique([ new String(1), new Number(1) ])
</code></pre>
<p>可以继续修改代码，做到性能和正确性都很好。但往往，这带来的结果并不好。</p>
<h2 id="真实需求">真实需求</h2><p>写到这里，这篇博客才算进入正题。程序员心中都会有一些梦想，比如写出又通用性能又好的普适函数。这种梦想是让程序员变得卓越的重要内驱力，但倘若不加以控制，也很容易走入迷途。</p>
<p>回到性能优化。这年头有各种各样优化，核心系统、数据库、网络、前端等等，所有这些优化，都必须回答下面这个问题：</p>
<ol>
<li><p><strong>当前有什么</strong>。在什么场景下进行优化，场景下有哪些具体限制。理清限制很重要，限制往往带来自由。</p>
</li>
<li><p><strong>究竟要什么</strong>。优化的目的是什么。是提高稳定性，还是增大吞吐量，抑或减少用户等待时间。在回答这个问题之前，优化都是徒劳。对这个问题的准确回答，能为优化带来具体可测量的参数，这样优化才有目标。</p>
</li>
<li><p><strong>可以放弃什么</strong>。鱼与熊掌不可兼得。优化的本质是在具体场景下的取舍、权衡。什么都不愿意放弃的话，优化往往会举步维艰。</p>
</li>
</ol>
<p>写这篇博客，不是为了解答一到笔试题，这道笔试题有点无聊。写这篇博客的原始驱动力是因为最近在做 SeaJS 的性能调优，其中有一个需求是：</p>
<pre><code>define(function(require, exports) {
  var a = require('./a')
  var b = require('./b')
  ...
  require('./a').fn(...)
})
</code></pre>
<p>上面是一个模块，通过解析函数字符串，可以拿到模块的依赖数组：<code>[&#39;./a&#39;, &#39;./b&#39;, &#39;./a&#39;]</code>，这个依赖信息有可能会出现重复字段，因此要做去重。</p>
<p>针对这个具体场景，来回答上面三个问题：</p>
<ol>
<li><p><strong>当前有什么</strong>。有的是输入限制，只需要考虑字符串。</p>
</li>
<li><p><strong>究竟要什么</strong>。这个问题比较简单，希望 unique 方法尽可能快，指标是用 Chrome 调试工具中的 Profiles 面板查看指定测试页面中 unique 方法的耗时，目标是 5ms 以内。</p>
</li>
<li><p><strong>可以放弃什么</strong>。只需处理字符串，其他类型的都可以不支持。谈到放弃往往很有意思，这个问题不那么简单，接下来再说。</p>
</li>
</ol>
<h2 id="seajs-下的解决方案">SeaJS 下的解决方案</h2><p>一旦分析清楚了具体场景，解决方案就相对简单：</p>
<pre><code>function unique(arr) {
  var obj = {}

  forEach(arr, function(item) {
    obj[item] = 1
  })

  return keys(obj)
}
</code></pre>
<p>上面的代码依赖 <code>forEach</code> 和 <code>keys</code>，离不开上下文环境（环境很重要很重要），完整代码：<a href="https://github.com/seajs/seajs/blob/master/src/util-lang.js">util-lang.js</a></p>
<p>上面这个方案，无论从代码体积、正确性、还是各种浏览器下的综合性能来考量，都很不错。</p>
<p>直到有一天出现这样一个测试用例：</p>
<pre><code>define(function(require, exports) {
  var a = require('toString')
  var b = require('hasOwnProperty')
  ...
})
</code></pre>
<h2 id="“完美”解决方案">“完美”解决方案</h2><p>上面的测试用例，会调用</p>
<pre><code>unique([ 'toString', 'hasOwnProperty' ]) // 期待返回 [ 'toString', 'hasOwnProperty' ]
</code></pre>
<p>IE 有各种各样的 bug，下面是不怎么著名但真实存在的一个：</p>
<pre><code>var obj = { toString: 1, hasOwnProperty: 1 }
for (var p in obj) {
  console.log(p)
}
</code></pre>
<p>在现代浏览器下，上面会正确输出两个值，但在 Old IE 下不会输出。这是 IE 的枚举 bug：<a href="http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation">A safer Object.keys compatibility implementation</a> “完美”的解决方案如下：</p>
<pre><code>var keys = Object.keys || (function () {
    var hasOwnProperty = Object.prototype.hasOwnProperty,
        hasDontEnumBug = !{toString:null}.propertyIsEnumerable("toString"),
        DontEnums = [
            'toString',
            'toLocaleString',
            'valueOf',
            'hasOwnProperty',
            'isPrototypeOf',
            'propertyIsEnumerable',
            'constructor'
        ],
        DontEnumsLength = DontEnums.length;

    return function (o) {
        if (typeof o != "object" && typeof o != "function" || o === null)
            throw new TypeError("Object.keys called on a non-object");

        var result = [];
        for (var name in o) {
            if (hasOwnProperty.call(o, name))
                result.push(name);
        }

        if (hasDontEnumBug) {
            for (var i = 0; i < DontEnumsLength; i++) {
                if (hasOwnProperty.call(o, DontEnums[i]))
                    result.push(DontEnums[i]);
            }   
        }

        return result;
    };
})();
</code></pre>
<p>除了 <code>DontEnums</code> 数组，还可以特别注意 <code>hasOwnProperty</code> 的处理方式。<strong>对于前端来说，要保障“正确”是一件多么不容易的事。</strong></p>
<p>注意：行文至此，已经不是在讨论 <code>unique</code> 的实现问题，比如上面实际上在讨论的是 <code>Object.keys</code> 的实现问题。</p>
<h2 id="我可以放弃什么">我可以放弃什么</h2><p>我有什么、我要什么、我可以放弃什么，这其实是马云在回答内网一个神贴时的回复，那个神贴是我发的，因此马云这几句话让我印象非常深刻。</p>
<p><strong>优化的本质是做减法，做减法最困难的是选择放弃。</strong></p>
<p>对于 SeaJS 来说，真的需要上面那个“完美”的解决方案吗？</p>
<p>程序员心中的完美主义、理想主义情结曾一度让我非常不能容忍代码中有 “bug” 存在。</p>
<p>可是，大家都懂的：</p>
<p><img src="http://www.ce.cn/ceph/home/pjxw/200511/15/W020051115640119779360.jpg" alt=""></p>
<p>还有红楼梦……</p>
<p>知道道理容易，比如很怀念小时候的《思想品德》课，要扶老奶奶过马路、要诚实等等，绝大部分人都懂得这些道理，可做到的，发现没几个。</p>
<h2 id="让场景说话">让场景说话</h2><p>如果你听了我上面一通知易行难的扯淡就决定赶紧“放弃”，那也有悖程序员的职业素养。</p>
<p>依旧得回到具体场景。在 SeaJS 里，适当调整代码逻辑：</p>
<pre><code>  // Remove duplicated dependencies
  mod.dependencies = unique(resolve(meta.dependencies))
</code></pre>
<p>上面的代码，能保证传给 unique 方法的输入是：</p>
<pre><code>[
  'http://path/to/a.js',
  'http://path/to/toString.js',
  'http://path/to/hasOwnProperty.js'
]
</code></pre>
<p>因此 DontEnums bug 在 SeaJS 里通过这么一调整就不存在了。</p>
<p><strong>仔细分析，控制好输入，会让代码更简单同时可靠。</strong></p>
<p>其实不控制 unique 的输入参数，DontEnums 在 SeaJS 里也可以忽略。只要心理上迈过那道完美主义设置的槛就好。</p>
<h2 id="小结">小结</h2><p>2010 年时，总结过性能优化的 ROBI 法则：</p>
<ol>
<li><strong>Reduce（减少）</strong>。减少可减少的。</li>
<li><strong>Organize（组织）</strong>。妥善组织剩下的。</li>
<li><strong>Balance（权衡）</strong>。权衡所失与所得。</li>
<li><strong>Invent（创新）</strong>。这是更高的要求，比如 SPDY、Chrome 等。</li>
</ol>
<p>当时忽略了一个重要因素是： <strong>所有这些点，都必须脚踏实地在具体应用场景下去分析、去选择，要让场景说话。</strong></p>
<p>因为浏览器的多样性，前端的应用场景经常很复杂，性能优化充满挑战，也充满机遇。</p>
]]></description><link>http://acyort.github.io/posts/10595204.html</link><guid isPermaLink="true">http://acyort.github.io/posts/10595204.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Wed, 16 Mar 2016 14:30:11 GMT</pubDate></item><item><title><![CDATA[GitHub活跃用户数据]]></title><description><![CDATA[<p>GitHub最近在个人信息页上增加了贡献值数据：<a href="https://github.com/blog/1360-introducing-contributions">Introducing Contributions</a>. 这个数据包含Pull Requests, issues opened and commits, 一定程度上可以反映该用户在GitHub公开库中的活跃度。</p>
<p>立刻有人写了脚本得到了全球GitHub活跃用户排行榜：<a href="https://gist.github.com/2657075">https://gist.github.com/2657075</a></p>
<p>昨天晚上基于上面这个排行榜数据，我筛选得到了中国用户的数据。但比较悲剧的是，上面这份数据中符合筛选条件的中国用户不到50人（共1000人）。</p>
<p>于是今天重新写了一份脚本，筛选条件如下：</p>
<ol>
<li>从GitHub高级搜索页面中，搜索<code>followers:&gt;0</code>的用户，下载所有用户数据（GitHub只提供99页，约1000人）。</li>
<li>根据用户名，从用户个人信息页抓取contributions值。</li>
<li>根据contributions值重新排序。</li>
</ol>
<p>这样就得到了两份统计数据：</p>
<ol>
<li><a href="https://github.com/lifesinger/lifesinger.github.com/blob/master/lab/2013/github-users/github-users.md">Most active GitHub users</a></li>
<li><a href="https://github.com/lifesinger/lifesinger.github.com/blob/master/lab/2013/github-users/github-users-china.md">Most active GitHub users in China</a></li>
</ol>
<p>数据挖掘非常有意思。根据上面的数据，还可以得到用户地区分布、开源类库活跃度、活跃用户占比、编程语言的用户活跃度、可招聘的前端工程师邮箱分布等等。</p>
<h2 id="注意">注意</h2><ol>
<li>纯娱乐，不要当真。</li>
<li>有不少中国人因为在GitHub的个人信息页没有填写Location导致没统计到。</li>
<li>筛选的前提是followers数排在前1000名，因此你懂的。</li>
</ol>
]]></description><link>http://acyort.github.io/posts/9850642.html</link><guid isPermaLink="true">http://acyort.github.io/posts/9850642.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sat, 12 Mar 2016 12:14:37 GMT</pubDate></item><item><title><![CDATA[从英语到计算机基础知识]]></title><description><![CDATA[<h2 id="缘由">缘由</h2><p>来自微博：</p>
<blockquote>
<p>@Sivan 终于知道为什么都建议看英文的技术书籍了。最近在看淘宝前端团队翻译的第六版犀牛书，用构造函数定义类的范例怎么不对劲捏？于是下了英文的电子版核实一下……我就纳闷翻译书怎么会把代码的部分都改掉了呢？前面 200 页我是不是学错了很多地方啊！莫非这是一本鼓励我学英文的书……</p>
</blockquote>
<p>我回了一条：</p>
<blockquote>
<p>玉伯也叫射雕：还是一句话，学技术的不懂或不愿去看英文的话，还是早点改行去切糕。前端领域的翻译，十本有九本有问题。</p>
</blockquote>
<p>上面是我一直以来的观点。有接触过前端领域的技术翻译，除了李松峰等少数硬派翻译，在前端圈子里，很多技术书籍的译者，都是抱着学习的态度或提升团队影响力的目的去翻译的。结果就是：译文不像正宗的中文，甚至经常有理解错误。</p>
<p>是否回复上面那条微博，我其实很犹豫。因为技术翻译领域本来就缺少人才，像阮一峰、李松峰包括翻译新秀拔赤等，人数很少，屈指可点。这种情况下，本应该鼓励更多的人去尝试翻译。错误总是难免的，特别是翻译大部头书籍时。《犀牛书》的译者里其实也有我，拔赤当初组织翻译，以及后续校稿的辛苦，我都看在眼里，真心钦佩。我很不想回复这么一条“激进”的言论。</p>
<p>但是，我忍不住。因为现实生活中，我见了太多对英文有恐惧的人。这里面有我的同事，也有在社区里认识的不少前端朋友。我还有一个堂弟，是专门做技术培训的（类似蓝翔技校这种）。这批被培训出来的人，经常被局限在中文资料里。然而前端发展很快，书籍里的内容，很容易被过期。于是我又发了一条微博：</p>
<blockquote>
<p>玉伯也叫射雕：前端发展很快，目前能写成书沉淀下来的东西不多。这也是我强烈推荐大家去把英文好好学一学的原因。与其折腾 H5，不如好好补补英文，这样等 H6 出来时，你看看资料直接就会了。</p>
</blockquote>
<p>当时在地铁上，无聊。无聊总是比较容易惹祸：</p>
<blockquote>
<p>玉伯也叫射雕：要成为一个优秀的前端，英文的重要性个人觉得比计算机基础知识还重要。后者经常被强调，但在前端实际工作中其实很少被用到，不承认的要么已经不是前端，要么就是在装。</p>
</blockquote>
<p>上面这条微博引来的很大的争议，甚至引来了一篇博文：</p>
<p><a href="http://niko-blog.com/2012/12/%E4%BB%A5%E4%B8%BA%E6%B5%85%E6%98%BE%E7%9A%84%E7%9C%BC%E5%85%89%E6%9D%A5%E7%9C%8B%E5%9B%BD%E5%86%85%E5%89%8D%E7%AB%AF%E6%80%81%E5%8A%BF/">以为浅显的眼光来看国内前端态势</a></p>
<p>这件事情被微博放大后，突然就偏移了我最初的初衷。（微博这种放大效应值得研究，挺有意思的。）</p>
<h2 id="计算机基础知识">计算机基础知识</h2><p>这是一个很泛的词，我指的是操作系统、网络协议、编译原理、数据结构等很多计算机科班在大学学的内容。这些知识很重要很重要，我丝毫也不否认。我自己也恶补过，受益匪浅。</p>
<p>但是，如果你连英文都不会，如果你工作多年，还习惯用百度而不是 Google 英文搜索，那么扫除语言障碍是首要的。学会英语阅读，去除对英文资料的恐惧，再去补计算机基础知识不迟。</p>
<p>这是我想表达的。其他所有回复，老赵的、hax 的、niko 的，谈的是另一些事情，绝大部分和我想表达的不冲突，我都相当认可。</p>
<h2 id="前端的未来">前端的未来</h2><p>niko 的博文特让我感慨，前端有这么一批接班人，希望无限。但其中有几点我觉得有误解。</p>
<ol>
<li><p>我没看明白强调英文和追随者有什么关系。学好英文，就是为了创新啊。知己知彼，才能更好的去创造。英语的确只是工具，但在工具都没掌握前，去谈创新，就如一个小学生想立刻实现传送门一样，是妄想。</p>
</li>
<li><p>计算机基础知识在前端的实际工作中用到很少，这是现状，一个很无奈的现状。就如 hax 说的一样，现状不代表合理，我们还得有自己的理想。我强调的是现状，不反对理想。</p>
</li>
<li><p>我还是想谈一点，前端的基础知识，很大一块可能真不在计算机基础知识里，而在用户体验、交互设计这一块。对目前已经在做前端的绝大部分前端而言，去看看《About Face》、《The Elements of User Experience》、《简单法则》等书籍，会比很纠结很迷茫很困难的去补《操作系统原理》、《编译原理》之类的书籍受益更多。学习计算机基础知识，可以让前端更好的往后走，学习体验、交互、产品类书籍，可以让前端更好的往前走。作为前端，我现在越来越觉得，往前走有更大的优势。</p>
</li>
<li><p>往后走的前端，或者原来就是后端的前端，比如 winter 等人，这毕竟是少数。不能拿少数人的路，来鼓舞大部分人去走，这基本会坑爹的。这也是我一直不鼓励前端去阅读 ECMAScript 规范的原因，除非真的对语言很感兴趣，像周爱民、winter 等人一样，对语言的设计与实现充满激情，否则阅读 ECMAScript 规范大部分情况下只会是安慰剂，对实际工作不会有太大帮助。</p>
</li>
</ol>
<h2 id="小结">小结</h2><p>依旧和当初在微博上引发分号之争、编辑器之争一样，我坦白，有些挑逗是我故意的。但故意的背后是想引发一些思考，比如分号与语言的往前发展、编辑器与尝试新事物的心态。这些微博，无论多么富有争议，如果能让你有那么一刻停下来思考，我觉得就值了。</p>
<p>思考让人进步，而不是微博上的表层含义。我的很多微博，只是思考的引子。</p>
]]></description><link>http://acyort.github.io/posts/9107375.html</link><guid isPermaLink="true">http://acyort.github.io/posts/9107375.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Tue, 08 Mar 2016 13:08:50 GMT</pubDate></item><item><title><![CDATA[A 君和 B 君的故事]]></title><description><![CDATA[<p>A君和B君同时进入一家大公司。A君勤勤恳恳，交给他的活都办得稳稳妥妥、风平浪静。B君叱诧风云，参与的项目往往会遇到各种问题，常常风起云涌、惊心动魄。</p>
<p>转眼三载有余。</p>
<p>A君和B君面临一次很重要的晋升。请问，谁更有机会？</p>
<p>大家都猜到了结果：B君顺利晋升了，很开心。A君没有，也不怎么在乎。</p>
<p>一晃又是近两载。</p>
<p>A君被一家创业公司看重，挖去做了资深开发。A君去了后，依旧保持着稳稳妥妥、风平浪静的风格，很受赏识，被提为CTO。</p>
<p>B君还在老公司，依旧风起云涌、惊心动魄地做着各种项目，依旧继续期待着下一次晋升。</p>
<p>故事讲完了，这是我看到过的一个真实故事。</p>
]]></description><link>http://acyort.github.io/posts/8076480.html</link><guid isPermaLink="true">http://acyort.github.io/posts/8076480.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sun, 04 Sep 2016 12:58:55 GMT</pubDate></item><item><title><![CDATA[Arale 背后的一些设计理念]]></title><description><![CDATA[<p>阅读此文前，建议先看下这个 PPT：<a href="http://vdisk.weibo.com/s/gGx-d/1351342674">支付宝前端技术之路</a></p>
<h2 id="缘由">缘由</h2><p>看完上面的 PDF 后，好友 <a href="http://weibo.com/jayli">@拔赤</a>  在微博上发了些感触：</p>
<blockquote>
<p>ppt有点小失望哦，特别看到34页，真真就是kissy啊，不管是jquery式的包装器风格控件，还是kissy/yui系的工厂风格组件，真正的挑战是站在业务和开发者角度设计组件api，扩展性和灵活性是自然的结果而不是最初的技术目标，就像switchable那么细的分层，有人为他写过扩展吗？</p>
<p>到底谁才会开发出真正高质量的组件？1，商业控件开发团队，2，库和框架的作者。所谓社区贡献高质量控件，我不指望。找几个p7、8的人基于jquery提炼业务控件，就够了，呵呵，总有一种不详的预感，arale最后成为另外一个kissy，进而成为另一个yui，都是重量级的底层基础加贫瘠的上层建筑</p>
<p>yui现在明显走下坡路了，看最近狂发小版本，渐渐少了主心骨，在一个，yui的工具化已经很落后了，里面的组件也面临重构的压力，人才流尽的yui team啊，只剩回忆了//@adamlu: 直接用YUI得了，YUI多好啊~~</p>
<p>从普通开发者的角度，我只想了解一个控件有哪些方法，事件，参数，demo和文档是否详细，更不关心这个控件是怎么生产出来的，也不想知道某个功能算是plugin还是feature，所以jquery的思路反而更经受的住考验，外表简洁，内核肮脏，结构粗犷但健壮，内核的分层和所谓简洁无非将复杂度暴露给了开发者。</p>
<p>回复@adamlu:我了解你对yui的感情，其实yui的大部分api都固定了以至于现在想改进都难，比如yui的自定义事件冒泡，设计的确牛逼，我至今没见人用过，mix的那么多派生用法，就用过混合和扩充，所以，用yui就像一把青龙偃月刀，是很华丽，问题是，到底有多少＂关公＂呢，全中国有几个人能耍的动他呢？</p>
<p>所以，我挺想听听玉伯介绍下控件的api设计精粹的</p>
</blockquote>
<p>拔赤提到的一些问题，不少是在做 Arale 的过程中，反复纠结过的。在 QCon 的分享上，因为考虑听众更多的是想了解 Arale 和 spm，因此有些地方省略或简单带过了。这篇博文尝试讲讲 Arale 背后的一些故事和设计理念。</p>
<h2 id="开放">开放</h2><p>就如拔赤所说，看到 Arale 的 Widget 继承图时，咋一看，和 KISSY 没什么本质区别。为什么有了 KISSY，还要开发 Arale 呢？两者的区别究竟在哪？</p>
<p>首先，Arale、KISSY，包括著名的 YUI 等类库，都是前端组件库，通过一定的方式，对外提供了一套组件集。在 UI 组件（Widgets）层面，这些类库要解决的问题，以及解决问题的方式都是类似，表面上看没什么区别。</p>
<p>但在工具组件（Utilities）层面，Arale 与 KISSY、YUI 有着很大的不一样。Arale 里的工具组件，比如 jQuery、Handlebars、Moment 等，都直接来自业界，并且一定程度上是可替换的，比如在移动端，jQuery 可以被替换成 Zepto 库。</p>
<p>除了工具组件，部分 UI 组件，比如编辑器、日历等，Arale 里也可以直接来自业界，甚至可以直接移植部分成熟的 jQuery 插件过来。这在 YUI 和 KISSY 里，是不怎么被考虑的。</p>
<p><strong>Arale 是真心开放的一个组件解决方案，这种开放性，我相信会是 Arale 的最大活力。</strong></p>
<h2 id="简单、易用">简单、易用</h2><p>这个的确如拔赤所说，几乎所有类库都会这么标榜自己，但是有些只是标榜，并未真正做到。比如 KISSY 最开始很推崇 KISS 原则。但随着后续的发展，个人觉得目前其实已经背离 KISS 原则，没有做到保持简单。就如拔赤说的 switchable 组件，里面超细的分层和功能点是否真的有必要？前不久在群里还讨论过延迟加载组件的一个 bug，在某种特殊场景下，该组件存在一个 bug，作为程序员，好像会毫不犹豫的把 bug 就修复掉了，觉得天经地义，但我直觉里却觉得是否值得？即便也许只需要增加几行代码。</p>
<p>在简单面前，还有一个比 KISSY 更明显的反例是 YUI3。拔赤已经说了自定义事件搞那么复杂，理论上看起来很完美，但实际上却什么人去用。YUI3 是个典型的学院派风格类库，不光自定义事件，很多其他组件的设计上，都存在学院派式的完美主义情节。这个不多说，喜欢 YUI3 的可以继续用，但我的感觉和拔赤一样，类 YUI3 的类库路子只会越来越窄，最后自己把自己干掉。（当然，所有预言都是不靠谱的。）</p>
<p>回到 KISS 原则上来，回到经常提起的简单之美上来。对于 KISS，自从概念提出来就一直存在理解上的分歧，下面是一篇我读到过多次每次读都感慨的一篇文章：</p>
<p>文字比较多，还是不贴过来，请移步阅读：<a href="http://forum.pusuo.net/posts/list/2312.page">简单之美——系统设计黄金法则</a></p>
<p>中间有个故事很有意思：</p>
<blockquote>
<p>一位 MIT 的教授一直困恼于 Syscall 处理时间过长出现中断时如何保护用户进程某些状态，从而让用户进程能继续执行。他问新泽西人，Unix 是怎么处理这个问题。新泽西人说，Unix 只支持大多数 Syscall 处理时间较短的情况，如果时间太长出现中断 Syscall 不能完成，那就会返回一个错误码，让用户重新调用 Syscall。但 MIT 人不喜欢这个解决方案，因为这不是“正确的做法”。</p>
</blockquote>
<p>这两个流派非常典型，我还是忍不住再摘抄过来：</p>
<pre><code>1）MIT Approach

　　简单性：设计必须简单，这既是对实现的要求，也是对接口的要求。接口的简单要比实现的简单更加重要。
　　正确性：设计在任何值得注意的方面都要保证正确。不正确是绝对不允许的。
　　一致性：设计必须保持一致兼容。设计可以允许轻微少量的不简单和不完整，来避免不一致。一致性和正确性同等重要。
　　完整性：设计必须覆盖到实际应用的各种重要场景。所有可预料到的情况都必须覆盖到。简单性不能过度的损害完整性。
</code></pre>
<p>我相信 MIT 的这套理念，是绝大部分程序员的默认意识。这这套哲学里，简单性不能破坏正确性、一致性和完整性。很多程序员见 bug 就改的习惯，潜意识里感觉是受完整性的影响。</p>
<p>来看另一种理解：</p>
<pre><code>2）New Jersey Approach

　　简单性：设计必须简单，这既是对实现的要求，也是对接口的要求。实现的简单要比接口的简单更加重要。简单是设计中需要第一重视的因素。
　　正确性：设计在任何值得注意的方面都要求正确。为了简单性，正确性可以做轻微的让步。
　　一致性：设计不能过度不兼容一致。为了简单，一致性可以在某些方面做些牺牲，但与其允许设计中的这些处理不常见情况的部分去增加实现的复杂性和不一致性，不如丢掉它们。
　　完整性：设计必须覆盖到实际应用的各种重要场景。所有可预料到的情况都应该覆盖到。为了保证其它几种特征的品质，完整性可以作出牺牲。事实上，一旦简单性受到危害，完整性必须做出牺牲。一致性可以为实现的完整性作出牺牲；最不重要的是接口上的一致性。
</code></pre>
<p>上面这套理念，刚接触时，简直有点邪教的感觉。比如实现的简单比接口简单重要，以及正确性居然可以让步于简单性，还有最不重要的是接口的一致性。</p>
<p>New Jersey Approach 初看有点 naive，但我个人的感觉，通过 KISSY 的开发、SeaJS 的开发，越来越觉得 New Jersey Approach 可贵性。</p>
<p>可以说，YUI3、KISSY 等类库，遵循的都是 MIT 哲学，但 SeaJS、Arale 尝试的是 New Jersey 哲学。</p>
<p>这会带来很多不同。举一个例子简单说下，比如 Overlay 组件，在 Old IE 下需要增加 iframe 垫片，在传统的组件设计里，会允许在 config 里关闭或打开 shim 配置。但在 Arale 里，直接没这个配置，发现是 Old IE 时，默认就打开，否则则关闭。不给用户这层选择，用户也就不用去操心还有这么回事。这个设计，在内部讨论时，曾经被挑战过，比如用户有可能为了性能优化，希望在 IE6 下也不创建这个 iframe，因为用户很明确知道没垫片也不会出问题。Arale Overlay 的设计看起来是无法满足这个需求的，对完整性是种破坏，但是我们最后还是决定不添加这个配置，因为这样更简单。完整性可以为简单性做出牺牲。</p>
<p>这只是其中一个小例子，Arale 的组件配置与 YUI3 等相比，都会偏少，很多都是出于简单性考虑。但在 KISSY 和 YUI3 里，很多时候是恨不得把所有配置都暴露出来。</p>
<p>在简单性上，我们甚至会优先考虑实现上的简单性，比如 Mask 组件，就全局单例，因为这样实现最简单。</p>
<p>开放、简单，我个人觉得这在 Arale 里，是非常非常实在的东西。</p>
<p>支付宝的业务特征是，需要稳定、高效、灵活。我们的理解是，因为开放，所以稳定，比如 jQuery 的稳定性比自己折腾一个 DOM 操作类库会更靠谱，高效来自简单、易用，用起来爽，效率自然就高了。</p>
<p>至于灵活，更多时候也是通过开放来解决的，因此开放，同一类型的组件可以有多个不同定制版本，这一点，和 KISSY 通过 component 实现的灵活有很大不同。在 Arale 里更追求组件的独立性，下面细说下。</p>
<h2 id="适度">适度</h2><p>这个在 PPT 里没说，在 Arale 组件开发里，是时时被强调的：</p>
<ol>
<li><strong>适度灵活</strong></li>
<li><strong>适量重复</strong></li>
</ol>
<p>适度灵活不多解释，Arale 里不会去构建万能组件，只会让组件适当的具备一定的可扩展性。比如 Arale 的 Switchable 组件，肯定不会去增加新建 Tab 的功能。需要复杂功能时，去使用另一个 TabView 组件就好。</p>
<p>第二个适度法则是适量重复。这个是我的切身体会，有悖于传统的软件开发思想，但我觉得在前端界，适量重复比 DRY 更实用。</p>
<p>是个程序员可能都听过 DRY （Don&#39;t Repeat Yourself），这条法则非常好，在大部分情况下都是对的。</p>
<p>然后在构建前端类库时，我觉得遵守 DRY 会很危险。</p>
<p>如果你追求代码的不重复，那么你在写 a 和 b 组件时，会把公用部分抽取为 c，不断重复这个追求，最后就会得到一个非常庞大的依赖结构图，比如 YUI3 就是这样。YUI3 追求颗粒化，表面上看颗粒化可以让自定义打包更灵活更优秀，但实际上，颗粒化的粒度非常关键，像目前 YUI3 的粒度太小，导致的问题是，实际上你若真去把 dom / event / node 等模块打包出来，其实会比 jQuery 大出不少，不光达不到实际的期望效果，还牵三挂四，开发起来并不方便。（虽然 combo 服务可以缓解一点）</p>
<p>对于 DRY 法则，我的理解是，必须要非常小心的把握好两点：</p>
<ol>
<li><strong>究竟不应该重复的是什么？</strong></li>
<li><strong>粒度如何？</strong></li>
</ol>
<p><strong>在 Arale 里的答案是，不应该重复的是组件的职责，而不是组件的代码。</strong> 比如：</p>
<ul>
<li>jQuery 的职责是 DOM 操作类库，那么在 Arale 里就不会再有第二个 DOM 操作类库。</li>
<li>Underscore 的职责是语言增强，那么在 Arale 里就不会有第二个语言增强组件。</li>
<li>jQuery 和 Underscore 是不重复的，他们的职责不同，主体功能不同。</li>
<li>但 jQuery 和 Underscore 两个组件，可以存在部分相同的辅助功能，比如 each 等方法。</li>
</ul>
<p>在这种对 DRY 的理解下，Arale 里的组件宁可 copy 一些代码，也会保持组件的独立性，而不会特意去追求代码级别的不重复。</p>
<p>这一点我们纠结过不少时间，但目前来看，适量重复带来的简单性是很不错的。</p>
<p><strong>粒度的问题，在 Arale 里，实践的是粗粒度法则。</strong> 如果要复用某些代码，那么会以独立工具组件的形式提供，比如 position 工具组件，就提供一个静态定位方法，其他 UI 组件想用时，直接采用引用的方式调用静态方法就好，而不会像 YUI3 或 KISSY 一样，采用 mixin 的方式去做。Arale 的工具组件，推崇：</p>
<p><strong>组合 &gt; 混入 &gt; 继承</strong></p>
<p>这篇博客有点长了，回到拔赤的几个问题。大部分问题已经回答了，再来回答这个问题：到底谁才会开发出真正高质量的组件？这引出了本篇博客想谈论的最后一个议题。</p>
<h2 id="生态圈">生态圈</h2><p>在《支付宝前端技术之路》里，无论 Arale 部分，还是 spm 工具部分，都非常强调生态圈的概念。对于组件的开发、贡献、筛选，在 CMD 模块生态圈里，就如 NodeJS 社区一样，是开放自由的，同时又是非常残忍自然的。</p>
<p>残忍自然是因为我们想打造的是生态圈， <strong>生态圈是自然的，同时也是物竞天择、适者生存。</strong> 一个组件是否优秀，完全取决于它能否被生态圈认可。这和 GitHub 也是一样的，GitHub 上这么多项目，但通过一些简单的维度，我们还是可以比较容易的筛选出一套精品组件。</p>
<p>Arale 只是 CMD 生态圈里的一套模块精选集，并且这个精选集，目前是基于支付宝的需求去选择的。其他公司完全可以从 CMD 生态圈里，选取另一套模块精选集，比如叫做 CoolLib 什么的。</p>
<p>CMD 生态圈目前还没正式对外运作起来，目前只在支付宝和 B2B 初步尝试，等时机成熟后，会彻底开放出来。</p>
<p>我相信生态圈是解决组件质量的不错选择。</p>
<h2 id="小结">小结</h2><p>在 Arale 里， <strong>开放、简单、易用、适度灵活、适量重复、生态圈</strong> ，这些概念是实实在在的，也正是这些理念，使得 Arale 与 YUI3、KISSY 等类库不同，我相信这份尝试会成功，并期待你的加入，一起为梦远航。</p>
]]></description><link>http://acyort.github.io/posts/7971795.html</link><guid isPermaLink="true">http://acyort.github.io/posts/7971795.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sun, 28 Feb 2016 13:00:48 GMT</pubDate></item><item><title><![CDATA[最牛逼的 HTML 和 CSS 代码的背后]]></title><description><![CDATA[<p>前些天，<a href="http://weibo.com/kejunz">kejunz</a> 在微博上发了两条微博：</p>
<blockquote>
<p>现在国内都一堆只会写JS的前端工程师真是奇葩啊 </p>
<p>我认为史上写的最牛逼的html是<code>&lt;div class=&quot;mod&quot;&gt;&lt;div class=&quot;hd&quot;&gt;&lt;/div&gt;&lt;div class=&quot;bd&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code>可以想想它好在哪</p>
</blockquote>
<p>这两个话题都挺有意思的。</p>
<p>第一个是吐槽目前很多前端太重JS，而忽视了HTML和CSS的重要性。这个话题，今年我在WebReBuild上海站时也提到过，甚至比较极端的说，<strong>在前端开发领域，最难的其实是HTML，其次是CSS，最后才是JS。</strong>当然这句话是不正确的，然而我们真需要老说那么正确的话吗？正确的话很多时候还不如不正确的话那么对人有用。比对错更重要的是对场景、环境的理解、把控。克军在感慨“奇葩”时，离不开的是当下的前端环境。对错是二元论，二元论就和红色电影里的好人坏人一样，与真实世界有较大的偏差。好的文学作品当如《红楼梦》一样，或者莫言的《蛙》，里面的人物，即便夸张，也无对错的评价。貌似跑题了，最近写什么都很容易跑题，奇怪……</p>
<p>克军的第二条微博，在我看到时真有一种触动。“最牛逼”只是修饰语，表示强调，就如我说“最难”的是HTML一样。看到这种微博时，别急着去反驳有更牛逼的HTML，或去思考JS比HTML难呀。若抱着这种反驳、挑刺的心态去读微博，或者倾听他人谈话，大部分情况下你不会有什么收获。</p>
<p>为什么克军会说最牛逼的HTML是<code>&lt;div class=&quot;mod&quot;&gt;&lt;div class=&quot;hd&quot;&gt;&lt;/div&gt;&lt;div class=&quot;bd&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code>？克军究竟想表达什么？照着这条路子去想，就挺有意思了。</p>
<p>凡是真心当过切图仔的（非贬义，我认为切图仔对前端来说是个褒义词，很形象，就和美国的西部牛仔一样），或多或少都写过：</p>
<pre><code><div class="box">
 ...
</div>
</code></pre>
<p>上面的代码是典型的一个页面区域，或者说页面的模块。纵观当前互联网上的页面，几乎充满着各种页面模块。一个典型的页面模块，包括头部和主体，比如：</p>
<pre><code><div class="box">
  <div class="hd"></div>
  <div class="bd"></div>
</div>
</code></pre>
<p>至于里面的 class 名，最外层有叫 box 的，也有叫 mod 的，不用太纠结，都差不多。里面的 hd 和 bd，则千差万别，比如 header、content、container、main 等等都有。克军是受了 YUI 的影响，用 hd 和 bd 也蛮清晰的，这些都不纠结。对一个团队来说，关键是要统一，要达成一致理解。</p>
<p>上面还无法说明为何这就牛逼了，我的理解是，要知道上面的代码为什么牛逼，你得亲历并想清楚过以下事情：</p>
<ol>
<li>为何只有 hd 和 bd？ft 呢？</li>
<li>为何用 div 而不是 section / header 等？</li>
<li>为何 hd 里的标签没做约定？</li>
<li>这段代码，是为了满足什么需求？</li>
<li>对于复杂需求，这个代码如何变化？</li>
<li>简单和复杂之间如何权衡？（很多程序员倾向于把事情搞复杂）</li>
<li>为何不是 mod / mod-hd / mod-bd ？</li>
<li>在什么场景下这段代码不适用？（比如组合命名和长命名之争）</li>
<li>这东西跟性能没关系。</li>
<li>这东西跟可维护性关系很大。</li>
<li>究竟什么是结构与样式的分离？</li>
<li>衡量一个好的HTML代码的标准是什么？</li>
<li>结构化设计是什么？</li>
<li>部分如何构建出整体？砖瓦是怎么变成大厦的？</li>
<li>关注度分离是个啥东西？</li>
<li>什么是抽象？抽象的价值究竟是啥？</li>
<li>什么是创新？什么是超越？</li>
</ol>
<p>一定会有人说我扯远了。不过我想，如果你遇到过并认真思考过以上问题，你在见到克军这条微博时就不会惊讶了。这段代码的确是最牛逼的HTML代码。如果你不同意，请参考我前面关于对错的观点。</p>
<p>看到克军这条微博后的一天，我就在思索最牛逼的HTML代码有了，那么最牛逼的CSS代码是什么呢？仔细搜寻了一番记忆，于是有了这条微博：</p>
<blockquote>
<p>贴一个我见过的写得最好的 CSS 代码：.content { width: 980px; margin-left: auto; margin-right: auto; } 可以想想好在哪。</p>
</blockquote>
<p>算是抖个包袱，早上发完之后，就秋游去了。玩了一天，看看回复，还是挺有意思的，有少数几个回复已经说出了我想说的。其实大部分在上面说最牛逼的HTML时已经说了，但还得说明下：</p>
<ol>
<li>这跟性能没关。怎么老有人喜欢“性能思维”呢？在前端代码里，大部分性能问题都是扯淡。</li>
<li>这跟 980px 没关。栅格年代已经远去了，960 不是 magic number.</li>
</ol>
<p>这段代码的作用，是个前端都能看懂：让块元素水平居中。一般大家都会写成：</p>
<pre><code>.content {
  width: 980px;
  margin: 0 auto;
}
</code></pre>
<p>上面的代码能正常工作，大部分情况下也不会有问题，但上面的代码存在<strong>思维的懒惰</strong>。写成:</p>
<pre><code>.content {
  width: 980px;
  margin-left: auto;
  margin-right auto;
}
</code></pre>
<p>看起来代码变多了，变啰嗦了。但如果你真经过思考，就会明白：</p>
<ol>
<li><code>margin: 0 auto</code> 中的 0 绝大部分情况下是冗余的，页面上早就有 reset.css 或 normalize.css 重置过</li>
<li><code>margin: 0 auto</code> 不纯粹，你要的是“水平居中”，却顺便把 top / bottom 给重置了</li>
<li>不纯粹会导致顺序和优先级的依赖，比如有另一处要给 margin-top/bottom 赋值时，就必须要提高优先级</li>
</ol>
<p>进一步的东西是，我一直觉得CSS里，有一个重要的原则：</p>
<p><strong>最小影响原则</strong></p>
<p>你在写某段CSS代码时，首先要非常清楚地知道这段CSS代码的功能，其次要尽量严格保障这段CSS代码只实现了你想要实现的功能。</p>
<p>这就如医生动手术，好好做好本分就行，千万别留下一个小镊子在病人身体里。</p>
<p>与HTML代码一样，对CSS代码来说，很重要的两个衡量标准也是稳定和灵活。这里不多说了。</p>
<p>熟悉设计模式的，应该会感知到，最小影响原则和单一职责原则（SRP）本质上是一样的。SRP 作为设计模式的重要原则之一，其重要性不用我在此啰嗦了。</p>
<p>最后想说下下面这段代码：</p>
<pre><code><div class="mod"><div class="tr"><div class="tl><div class="tc"></div></div></div><div class="mr"><div class="ml"><div class="mc"></div></div></div> <div class="br"><div class="bl><div class="bc"></div></div></div>
</code></pre>
<p>好像还有人做过九宫格布局……</p>
<p>以及最近在 KISSY 开发群里的一段文字：</p>
<pre><code>我发现DataLazyload有两个问题：
1.判断节点是否已经在视图之中的时间简单的判断Dom.offset,没有考虑到节点或者上级节点被隐藏的现象
2.如果页面上脚本自动显示、隐藏或更改一些层的大小，引起某些层从视图外移动到视图类，DataLazyload既没有自己判断这种情况，也没有提供接口来重新执行loadItems
</code></pre>
<p>很多DPL了做着做着，很多类库组件开发着开发着，都很容易被诱惑着去“满足所有需求”，去“解决所有bug”…… </p>
<p><strong>如何权衡简单与复杂？如何在复杂中依旧能保持简单？没bug的组件是好组件吗？究竟什么是好组件？</strong></p>
<p>然后，没有然后了……</p>
]]></description><link>http://acyort.github.io/posts/7738650.html</link><guid isPermaLink="true">http://acyort.github.io/posts/7738650.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Thu, 14 Apr 2016 08:17:05 GMT</pubDate></item><item><title><![CDATA[从 Vim 与 IDE 的讨论说起]]></title><description><![CDATA[<h1 id="从-vim-与-ide-的讨论说起">从 Vim 与 IDE 的讨论说起</h1><h2 id="缘由">缘由</h2><p>十一假期，在家 review 一位朋友的代码，发现不少低级错误。这位朋友是位熟手，用 Vim 四五年了，看她写代码，如行云流水，是种享受。但最后产出的代码，却常常很容易让我发现问题。这种糟糕的经历，在不同的人群里，我碰到过很多很多次。有一个共同点是，容易发现低级问题的代码，经常是用 Vim、EditPlus 等编辑器写出来的。这里面一定有些东西值得思考。</p>
<p>我自己用 Vim 也有八九年了。大概四年前，偶然的一次机会尝试了 IntelliJ IDEA，后来正式的项目代码就首选 IDEA 了。当然也还一直用着 Vim，比如临时编辑一个文件，或者快速修改一个非常明确的 bug，这些场景下，在 console 里直接 vim 编辑，简单快捷，很舒服。然而正式的代码编辑，或比较复杂的重构，我现在会毫不犹豫的切换到 IDE 下操作。IntelliJ IDEA 的 slogan 是 Develop with pleasure，这句话一点也不广告，我真心感受到了这种愉悦、乐趣，不仅仅是编码（coding）阶段，而是整个开发（developing）过程。</p>
<p>为什么会有这么多人坚守在 Vim 阵营呢？我尝试过给身边的人推荐 IDEA，成功率大概在 30% 左右。这是件很有意思的事情，为了写这篇文章，为了收集更多想法，于是我在微博上“不淡定”了：</p>
<blockquote>
<p>再次抨击使用 Vim 编写代码的兄弟们，投身 IDE 吧，IntelliJ IDEA、Eclipse、Visual Studio 等等都可以，请别再用上古的神器了。Vim 是冷兵器时代的强者，但现在早就是热兵器时代，甚至是玄幻兵器时代了……</p>
</blockquote>
<p>发这条微博时，还挺担心会立刻被人问候祖宗的，不过后来的评论和转发比我预料了好很多很多（程序员们的素质普遍比其他行业的高呀）。为了让讨论更有针对性，我后来又发了几条：</p>
<blockquote>
<p>Vim 等文本编辑器粉丝们，经常拿出的论据是：Linux 是用 IDE 写出来的吗？问题是你确认自己是 Linus？还有一个前端界的论据是：写 JavaScript 又不用编译，Vim 足够了。足够个屁呀，正因为 JS 不用编译，才更容易出错，更需要 IDE。前端界里，能把 Vim 用得比 IDE 还好的，我至今还没发现，谁自爆下？</p>
<p>首先抱歉，因为微博字数限制，未能把语境说全。这段话，是针对前端工程师说的，写 C/C++/Lisp 等等的，爱用啥用啥啊，我不懂不评论。但如果写 JavaScript，如果没尝试过 IntelliJ IDEA，我强烈推荐下，学学不会死人的，觉得好就继续用，不好就继续用 Vim 吧，但得用好呀，别搞出 var a = b = 1 来。</p>
</blockquote>
<p>好了，微博上的讨论，缘由已经交待清楚，我们进入正题。</p>
<h2 id="前端工程师请留步">前端工程师请留步</h2><p>这篇讨论是针对前端工程师写的，非前端工程师们，请嘴含微笑，抱着散散步看看风景的心情到此一游就好。</p>
<p>缘由里我有一个很大的疑惑：</p>
<p><strong>前端工程师的代码里，容易发现低级问题的，经常是用 Vim、EditPlus 等编辑器写出来的。这里面一定有些东西值得思考。</strong></p>
<p>因为平时要做不少 code review，上面这个问题对我而言是个不得不去思考的问题。我所在的团队，编辑器一直是百花齐放、各用所爱的。大体上可以分为两个阵营：Vim 和 IDEA（含 WebStorm 等），还有用 ST2 的，不在这里讨论。我的疑惑可以分解为两个问题：</p>
<ol>
<li>为什么前端工程师的代码，比较容易出低级问题？</li>
<li>为什么 Vim 阵营的前端代码，比 IDEA 阵营的更容易出问题？</li>
</ol>
<h2 id="前端工程师的挑战">前端工程师的挑战</h2><p>进一步聚焦，前端工程师的代码，我们这里就只谈 JavaScript，对于 HTML 和 CSS，道理相同，就不混着说了。</p>
<p>与传统静态语言比如 C、C++ 相比，JavaScript 是门动态语言。在静态语言里，运行之前必须通过 compile，有啥低级错误，一般编译阶段就发现了，所以 Vim、Emacs 等等编辑器，在这些场合没什么弊端，并且能与 CLI 很好的结合在一起，用好了非常强大。这是大部分编辑器论战的结论，我完全同意。</p>
<p>静态语言里，还有一类是 Java、C# 等，这类语言的最佳编辑器是 IDE，有意见的去找 @老赵 讨论，这里就不多说了，呵呵。</p>
<p>动态语言里，Python、Ruby、Lisp、PHP 等等，这里争论就多了。就我了解，Python 和 Lisp 开发者偏好 Vim 或 Emacs，Ruby 的有 TextMate、RubyMine 等等。这类动态语言，在我看来，都还是挺幸福的，因为虽然是动态的，但无论怎么动态，最后还是得编译。这类动态语言的 compiler 都挺严肃的，在开启了错误提示时，有错就会抛错，一丝不苟。因此用什么编辑器，对这些语言来说，更多是个人爱好，不好比较。</p>
<p>JavaScript 也是动态语言，但与 Python 等动态语言有着很大的不一样。Python 的编译器是开发者自己控制的，但 JavaScript 的编译器却是由用户控制的。为了强调，加粗重复一遍：</p>
<p><strong>JavaScript 的编译器不由开发者掌控，而是由用户控制。而且很悲催的是，JavaScript 的编译器很宽容。</strong></p>
<p>编译器由用户控制，意味着我们写代码时要特别小心，要默认兼容。比如，天知道用户是在吃蕃茄还是吃苹果呢，一个典型问题，在苹果（Mac）下没问题但在蕃茄（XP）下有问题的代码：</p>
<pre><code>var STATUS = {
  'fetching': 1,
  'fetched': 2,
  'compiling': 3,
  'compiled': 4,
}
</code></pre>
<p>这个问题，在 Vim 写的 JavaScript 代码里，我发现过不下 20 次（实际次数肯定比这个多），有些甚至是上线后才发现的，因为前端们喜欢在 Chrome / Firefox 等自己选择的 compiler 中写代码。这个问题，稍后再详谈。</p>
<p>再来看后半句：JavaScript 的编译器很宽容。编译器其实都很严谨的，这句话的意思，是说 JavaScript 语言本身的宽容性。比如：</p>
<pre><code>var a = b = 1
</code></pre>
<p>上面这段代码，在所有浏览器下都不会报错，一般情况下也不会触发 bug。但这就是个地雷，一旦出了问题，就很诡异，要排查许久才能定位出来。不是我危言耸听，这是一个个真实案例。在淘宝，因为这种低级错误导致的线上 bug，据我所知就出现过 4 次！上面的代码，等价：</p>
<pre><code>var a = 1
window.b = 1
</code></pre>
<p>变量 b 是全局共享的，这会导致踩雷的地方，闭包的状态进入非预期，从而有可能产生诡异的问题。 </p>
<h2 id="vim-与-idea">Vim 与 IDEA</h2><p>前端代码的 compiler 不是由开发者控制的，这个事实，给前端工程师带来了很大挑战。回到刚才的第一个例子：</p>
<pre><code>var STATUS = {
  'fetching': 1,
  'fetched': 2,
  'compiling': 3,
  'compiled': 4,
}
</code></pre>
<p>Vim 使用者的解决方案有：</p>
<p>1）、 使用 jslint 。这个问题，jslint 在默认配置下检查不出来。即便能检查出来，我发现实际操作中，Vim 用户也会经常偷懒而不检查。偷懒是人的天性，我鼓励偷懒，但我们还是得想办法避免低级错误。怎么办呢？每次保存时自动运行 jslint？Git 提交代码时自动运行？到集成测试环境时定期检查？有很多很多种方案，但为何我们不能在写代码时就避免掉呢？</p>
<p>2）、 修改编码习惯。比如：</p>
<pre><code>var STATUS = {
  'fetching': 1
  ,'fetched': 2
  ,'compiling': 3
  ,'compiled': 4
}
</code></pre>
<p>这的确能解决“手误”了，不过这始终是一个不得已而为之的解决方案，背离了天然本性的写法，迟早会被淘汰（我经常预言失误，但这一条绝不会）。</p>
<p>3）、自己编写 Vim 插件。据我所知，Vim 用户里，会主动给 Vim 编写插件的寥寥无几。如果你通过这个方案来解决，记得将你的插件共享并传播出来，让更多人受益。</p>
<p>好了，再来看 IntelliJ IDEA 的解决方案：</p>
<p><img src="http://ww4.sinaimg.cn/large/68361562gw1dxmhdnb1a1j.jpg" alt="inspection"></p>
<p>一图甚千言，不多说什么。估计有 Vim 的超级粉丝会说，通过 Vim 插件也可以做到即时提示。可是，为什么在我接触到的所有 Vim 用户里，从骨灰到小白，都没这么用的？可能还会有 Vimer 争辩：Vim 的哲学不是这样的，Vim 的哲学是让你编码时关注于编码…… 问题是，明显错误的编码也到等到事后不靠谱的插件执行来检查吗？</p>
<p><code>var a = b = 1</code> 的问题也类似，不赘述。</p>
<p>类似的，还有 HTML 。典型的标签不闭合问题，在 IDE 下你想不闭合都难，但在 Vim 下，我经常看到粗心大意。粗心大意没有错，可为何在 Vim 下会经常忘记检查呢？</p>
<p>别跟我提程序员的素养，<strong>偷懒是优良品质，粗心大意是人之常情。</strong>在直面人性特征的情况下，至少我们可以通过 IDE 去避免，为何不呢？</p>
<h2 id="保持自己的思考">保持自己的思考</h2><p>回到那条倍受争议的微博，<strong>我其实是一个无工具论者</strong>，从 EmEditor、Visual Studio、FrontPage、Dreamweaver 到 Vim、ST2、IntelliJ IDEA、TextMate 等等，都装过用过。就连写这篇文章的 Markdown 编辑器，我都同时装了 Mou 和 Byword，并且这两款软件我都喜欢。Mou 可以让我在编辑带大量格式的文本时一目了然，Byword 则可以让我在写博客时非常专注、安静。</p>
<p>下面针对一些典型回复，择一二说说我的想法：</p>
<blockquote>
<p>这个话题没啥好争论的，顺手的武器才是好武器，好的工具肯定会因人而异。</p>
</blockquote>
<p>这代表着一类人的想法，不过武器顺不顺手，你得尝试了才知道。如果你真正尝试过各种工具，然后依旧选择 Vim，我没任何反对意见，这是你的选择。但我见到的实际情况，是很多程序员们，会有很强的先入为主思维，或者尝试也仅仅是浅尝辄止。<strong>保持开放的心态，勇于尝试新事物</strong>，这是我想表达的。</p>
<blockquote>
<p>这有什么好争的？决定一个程序员是不是牛人，不是看他用什么工具，而是看他写出来了什么程序。</p>
</blockquote>
<p>同意。不过选刀不误砍柴功。对于前端工程师，由于编译器是由用户决定的，以及 JavaScript 的宽容性，选用什么样的工具还是蛮重要的。<strong>一个优秀的程序员，绝不会忽视自己所用的工具。</strong></p>
<blockquote>
<p>IDE 很像“记住密码”这个功能，用起来很爽，用多了密码就忘了。</p>
</blockquote>
<p>这个回复是非常有意思的。不过从产品的角度讲，我们真需要密码么？或许在不久的将来，密码就会像软驱一样成为回忆。</p>
<blockquote>
<p>IDE的确提高了编程效率，但同时也抹杀了Coder对底层原理的理解。如果一开始就依赖于IDE那么他对于Coding的理解是停留在逻辑层而难以深入对内存、操作指令、编译链接。用valgrind gdb这些debugger同样提高作为一个coder的素养。总而言之，coder必须熟知这些神器但真正搞开发依然更倾向于IDE了。</p>
</blockquote>
<p>对于 C、C++ 等程序员而言，上面这段话也许有道理。但对前端来说，不是这样。反而 IDE 可以让前端工程师了解到一些自己忽视的东西，比如认真去关注 JavaScript Inspections，很多细节受益匪浅。用 IDE 的过程，也是一个学习的过程。各种提示一开始会很烦，但当你认真去对待去定制提示时，提升和成长就在里面。</p>
<blockquote>
<p>你切西瓜用火枪么？</p>
</blockquote>
<p>这个回答挺好，切西瓜用刀就好，但你想切一辈子西瓜吗？</p>
<blockquote>
<p>我知道这些编辑器的优点，很强大，精通后无敌。关键是我不想一天换4个编辑器来完成工作。我需要的是一款跨平台，能在DOS/Windows NT/Linix/BSD/Android/iOS，CLI或GUI上都能用，而且不仅仅可以编辑程序，也能编辑文本、LaTeX或者二进制文件的跨平台编辑器。</p>
</blockquote>
<p>为什么要找通杀的神器呢？</p>
<blockquote>
<p>好像很多程序员喜欢把自己的个人喜好强加给别人，像一个喜欢吃榴莲的人滔滔不绝跟人说榴莲的营养价值，要世上所有人都喜欢才罢休。虽然看这些争论可以得到一些知识，但还是感觉很蛋疼。</p>
</blockquote>
<p>我从来不把个人喜好强加于别人，但对个人反感的东西，不说不舒服。用 Vim 的，太多装 B 的了（当然也有不装 B 的，用得非常帅气的，可惜好少好少），而且很多甚至不知道自己在装逼，看不惯这种现象。</p>
<blockquote>
<p>vim用的熟练的话，效率的确比ide要高，毕竟ide要鼠标移来移去</p>
</blockquote>
<p>又是一个误解，谁说用 IDE 就要用鼠标？IntelliJ IDEA 的一大亮点就是全键盘操作，非常爽。在我接触到的人里，用 IDE 的大都会用 Vim，但会用 Vim 的经常对 IDE 充满着各种臆测和误解。</p>
<blockquote>
<p>长期依赖IDE，提高水平不太容易哦</p>
</blockquote>
<p>这个是我极力反对的，长期依赖 Vim，提高水平才难。因为老忙于修改那些低级或晦涩的 bug 去了。用 IDE 的话，可以把你从低级问题中释放出来，有更多的时间去思考代码本身。</p>
<blockquote>
<p>没错，一定要keep open mind，我现在也在用sublime text。</p>
</blockquote>
<p>嗯，<strong>Open your mind 是我一直提倡并奉行的</strong>，无论是前端类库还是编辑器。我抨击的是那些还没了解 IDE 就拒绝尝试的人，拿着 Vim 就以为看到了所有天空的人，殊不知很多 Vim fans 看到的很可能只是一口井。 </p>
<blockquote>
<p>我挺想看看 @玉伯也叫射雕 用IntelliJ IDEA到底有多帅，能截个视频么？</p>
</blockquote>
<p>很抱歉呀，我用 IDEA 就像老年痴呆一样，经常需要停下来在用笔在纸上画画。<strong>流不流畅，在脑而不在于手。</strong>另外，编辑器这种工具从来就不会影响程序员的效率，只会影响码农的。<strong>对程序员来说，效率不在写代码上，而在写代码之外。</strong></p>
<h2 id="思考过程就是结论">思考过程就是结论</h2><p>编辑器论战，永远不会有定论，关键是思考。就如生活在中国，千万不要不小心习惯了这种闰土一般的生活。<strong>保持开放，不受各种权威的羁绊，随时准备好去接受、去怀疑，并对所有的可能性敞开。</strong>我喜欢并欣赏这种心态，这是我们的初心、本性。</p>
<p>就如之前激烈讨论过的分号一样。你可以不 care，但如果你 care，你就有可能创造出 LESS、Stylus、CoffeeScript 等新事物出来。<strong>创新往往来自细节，然后走很远很远。</strong>如果你第一步都不愿意尝试，你就等待别人做好，然后推广给你用吧。</p>
<p><strong>开放、自由、好奇心、勇于尝试</strong>，只要在这些点上让你能有所思考有所行动，而不是仅仅说一句无所谓或脑残之类的评论，那么我写这么多就值当了，甚至你可以继续用 Vim，而丝毫不去看看 IntelliJ IDEA 是什么。</p>
]]></description><link>http://acyort.github.io/posts/7402771.html</link><guid isPermaLink="true">http://acyort.github.io/posts/7402771.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 16 Sep 2016 04:33:06 GMT</pubDate></item><item><title><![CDATA[WebReBuild 上的扯淡]]></title><description><![CDATA[<p>9月15日参加了 WebReBuild 上海站，下面这些话题挺有意思的，记录一二。</p>
<hr>
<h3 id="会-html-和-css-的是程序员吗？">会 HTML 和 CSS 的是程序员吗？</h3><p>最后讨论环节时，一位资深开发同学提到了这个问题。很认同他的回答：从严格意思上说，HTML 和 CSS 仅是一门描述语言，不能算是程序语言，因此会 HTML 和 CSS 的不是程序员。这就和会写 INI 或 XML 配置文件一样，光会写这些，不能算是程序员。</p>
<p>问题的核心是：什么是程序？</p>
<p>程序其实无处不在。比如去银行取钱，我们要遵守一定的“程序”：取号、等待叫号、掏身份证、数钱……。将这过程写下来，贴在墙上，就是取钱程序。</p>
<blockquote>
<p>程序是完成某件事情的过程和顺序。</p>
</blockquote>
<p>在计算机领域，通俗的定义是：</p>
<blockquote>
<p>程序是为了让计算机执行某些操作或者解决某个问题而编写的一系列有序指令的集合。</p>
</blockquote>
<p>一段 JavaScript 代码是<strong>有序指令</strong>，编译后可执行。一段 HTML 或 CSS 代码更类似于一段配置信息，提供给浏览器读取，之后解析成 DOM 树、渲染树之类的数据，并不会转换成可执行的指令，因此算不得是程序。</p>
<p>如果只会 HTML 或 CSS，其实不用沮丧，因为你们是设计师，比程序员好听多了。</p>
<h3 id="前端工程师究竟是什么？">前端工程师究竟是什么？</h3><p>在我看来，前端工程师就是解决前端需求的软件工程师。</p>
<p>前端需求是指：与用户界面相关的代码需求，主要是指视觉设计和交互设计的代码实现。包括 HTML / CSS / JS 代码实现，也包括 iOS /  Android 等 Mobile 端的 App 开发。CS 端的 C 和 BS 端的 B 都是前端需求，所用的技术在随着时间而变迁，但不变的是前端解决的永远是与用户界面相关的代码需求。</p>
<p>软件工程师是指：好难定义。在我的概念里，软件工程师是能够用软件的方式系统解决问题的人。用软件的方式意味着要有编码能力，能把设计转换成代码。能系统解决问题意味着有规划、有设计、有流程、可复制、可维护等等。这和传统工程师的概念没什么区别，只是所用的工具不同。</p>
<p>前端工程师经常是对界面设计有爱的人。一堆前端工程师在一起，经常会对某个网站的视觉和交互设计品舌论足。前端工程师经常天生或经过后天培养具备了一种对“界面美”的感觉，这种细致的感觉，一般后端工程师体会不到。当然，后端工程师能体会到其他美。</p>
<p>前端是对界面之美有特殊感觉的工程师。（注：这里的界面不仅是视觉，还包括交互，是 Interface. 优秀的后端对 Interface 也会有特殊感觉，但那是接口之美。）</p>
<h3 id="性能">性能</h3><p>性能在没有成为问题之前，不是一个问题。无论后端还是前端，在性能上过早优化都是万恶之源。</p>
<p>对于传统编译型语言来说，compiler 一般可以主动控制为只有一种。性能更多的取决于 compiler 的优化，而不取决于代码写得怎么样。除非代码设计得太糟糕了。</p>
<p>在前端，如果只有一种 compiler，比如 V8，那我们前端也不用太在乎性能。我们辛辛苦苦优化一年代码，或许还不如升级一个 V8 版本来得实在。但是在前端，compiler 不是我们控制的，这一点和后端有很大的不一样，这导致我们在写前端代码时，还是得小心的把已知的性能问题给绕过去，比如在 IE6 的低效写法等等。这更多是 DOM 操作上的性能陷阱，JS 语言本身的性能问题并不多。</p>
<p>对于性能来说，更重要的是建立起一套有效的监测体系。在检测到性能出问题时，能快速定位到问题所在。这样，往往修改一小段代码，就能带来大幅度的性能提升。这种经验最值得沉淀和推广。</p>
<h3 id="可维护性">可维护性</h3><p>可维护性非常非常重要。对于前端代码来说，在 99% 的情况下，可维护性的重要程度，远远高于性能。</p>
<p>怎么提高可维护性？多向后端取经。后端沉淀非常多的宝藏，比如《设计模式》、《重构 - 改善既有代码的设计》等等。</p>
<p>注意前端和后端的区别，注意 JavaScript 与 Java 的区别。借鉴后端的现有经验，同时做到独立思考，不盲从，选择性吸收。目前前端业界这方面的沉淀还比较有限。路漫漫其修远兮，不过路走对了就不怕远兮。</p>
<h3 id="前端该不该学-nodejs">前端该不该学 NodeJS</h3><p>从后端工程师的角度来看，NodeJS 的亮点是异步 IO. 如果不是这一点，也就没什么可玩的，还不如继续用 Java 等。</p>
<p>但从前端工程师的角度来看，NodeJS 的异步 IO 反而是其次的，可运行在服务端才是亮点。这样，前端可以把 JavaScript 当 Shell 脚本用，也可以把 JavaScript 当 Python 用，想怎么用就怎么用，反而就是一门已经会了的语言。比如 UglifyJS 等玩法，跟异步 IO 没半毛钱关系，但前端玩得热火朝天，而且很有意义。</p>
<p>有时间就多学点，Try to learn something about everything and everything about something.  对于前端来说，JavaScript 是后面这个 something.</p>
<h3 id="兴趣是什么">兴趣是什么</h3><p>兴趣是什么？有多少人真的知道自己的兴趣？或许很多人走完一生都没弄清楚。但是我们能确定的是，当你完成某一件事情之后会莫名其妙地高兴或者两眼放光，那就说明这其中必定有一种东西是你的兴趣，虽然不一定是这件事情本身。</p>
<p>真正的兴趣往往需要往上抽象一层。比如星巴克的创造人之一XX（我永远记不住名字和时间），之前是卖家俱的，卖得很开心，很成功，但后来他发现自己的兴趣压根儿不在卖家俱这件事上，而在于通过卖家俱服务他人，满足他人，看到他人脸上幸福的笑。于是XX舍弃了卖家俱，加盟了星巴克，开始卖咖啡。由于他的兴趣是让客户满意，因此一个卖家俱的开始卖咖啡后，依旧能做得风生水起，做得非常成功。</p>
<p>永运不要小觑兴趣的魔力，同时永远不要停止对兴趣的探寻，除非你已经每天两眼放光了。</p>
<h3 id="英语口语">英语口语</h3><p>和老外交流的诀窍是，不要担心自己的口语不好，而要相信对方的听力很棒。然后大胆说就好了。</p>
<hr>
<p>好像还落了好多话题，比如佛学、瓶颈的突破、什么是总结等等，以后有机会再分享下这些水货。</p>
]]></description><link>http://acyort.github.io/posts/6607179.html</link><guid isPermaLink="true">http://acyort.github.io/posts/6607179.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Tue, 26 Jan 2016 06:11:15 GMT</pubDate></item><item><title><![CDATA[前端的归宿与价值]]></title><description><![CDATA[<p>强烈推荐拔赤的这篇博客： <a href="http://hi.baidu.com/lijing00333/item/1c28309d8b46c7d41e427118">十日谈</a></p>
<p>不光推荐这文，还推荐写这文的人。极其认可大部分文字，但部分细节，还值得商榷。下面就“归宿”说说我的观点。</p>
<p>拔赤原文：</p>
<blockquote>
<p>最后，还有一个不得不说的问题，即归属问题，前端开发应当归属于UED还是技术部门？应当说，当前Web前端技术的价值体现在“用户体验“上。是用户体验这块阵地最后一道坎。也就是说，前端工程师应当重点考虑我所作的页面的感官体验。这是需要一些灵感和感性的，应当看到帅气优雅的界面会心有所动、或者实现一款精巧的小组件时萌生一阵快意。这种所见即所得的美妙编程体验正是其他后端工程师无法体验到的。因此，这种精确到像素级的精工雕琢虽然不直接决定产品生死，但却是提升产品品味和时尚感的要素。物质越来越丰富的今天，大众的更高诉求不就是品味和时尚吗？</p>
<p>如果将前端归到技术部门，一方面和“设计“离的更远，代码写的规规矩矩但渐缺少了灵性，另一方面作为工程师又缺少计算机专业课的功底，才真正丧失了优势所在，如果有一天，前端工程师的平均水平足够高，清一色的计算机科班出身，似乎更合适归入到技术部门。所以，Web前端工程师是“工程师“，需要科学严谨的编程能力，但身处UED所应当具备的美感和灵性是万不可被剥夺去的。</p>
<p>还有一点，Web前端工程师作为UED之中最具实践精神和逻辑思维的工种，是能够将技术对设计的影响发挥到最大，可以催生出大量的创造和革新的，这一点也是传统后端工程师所不具备的。</p>
</blockquote>
<p>很同意前端工程师要保留一份对设计的感觉以及灵性，但这不成为前端要留在设计部门的理由。原因有以下几点：</p>
<ol>
<li><p><strong>在技术部，这份美感和灵感依旧可以留存。</strong>一个文字好的人，不会因为学了理科，就会丧失对文字的感觉。这有如学车，不会因为学会了开车，就会丧失骑自行车的技能。支付宝的前端是一个典型的案例，脱离设计部有好些日子了，但无论是老人还是新人，对设计有感觉的，依旧充满了感觉，没有感觉的，则依旧没有感觉。一定程度上这跟环境没什么关系，甚至是先天的，后天想培养这份灵性都挺难挺难的，要丧失掉也挺难。</p>
</li>
<li><p>拔赤也承认如果前端工程师水平足够高，很多科班出身的，则更适合归入技术部。这就挺有意思了。实际情况，随着前端的越来越普及，从 2010 年以来的社招生情况来看，已经有很多科班出身的前端程序员，他们的计算机基础技能挺好，势头很猛，潜力十足。他们选择了做前端，而不是 Java 等后端程序员，很大一个原因正是因为他们对界面交互层有一份美感，有一份灵性。很多前端工程师，争辩起字体的优劣来，比视觉还激动得多。在界面设计上也拥有自己的“口味”。这种科班出身的程序员，正是做前端的极好的料。程序员的美感和灵性，跟 UED 真的没啥关系。无论从未来看，还是从现状看，放到技术部不会伤害这份美感灵性。技术部下的各个团队风格本身就是多样的，比如选择做测试的，往往都具备一些共性。选择做 Java 开发的，和选择做运维的，也会有不同的特质。<strong>前端，在技术部下，就是一个对界面具有美感和灵性的技术团队。</strong></p>
</li>
<li><p>我觉得前端应该归属技术部，是因为<strong>前端程序员归根结底是程序员，而不是设计师。</strong> 作为程序员，作为工程师，我们的专业性，我们的工程化，更贴近传统的理性的程序员，而不是感性的设计师。技术部可以让我们更专业。</p>
</li>
<li><p>放在 UED 有助于培养我们的美感与灵性吗？表面看好像会的，但实际上我没遇到过类似的案例。有没有哪位前端，是到了设计部，才培养出了美感和灵性？创新也类似，不会因为你在 UED，才催生了创新。而是我们自身的美感和灵性，与我们技术的结合有可能会催生创新。这跟 UED 没什么关系。</p>
</li>
<li><p>还有一个很核心的问题，前端技术的价值是什么？是用户体验吗？我表示相当怀疑。用户体验是个用烂了词，含义太混淆。如果是指交互好，那主要是交互和 PD 的功劳。如果是指界面优雅，那是视觉的功劳。如果是指产品功能好用，那是好多人的功劳。前端的价值在我看来有两点：</p>
<ol>
<li><strong>对界面设计的系分以及精准实现。</strong>这里的系分是广义的，包括可行性分析、设计反馈、界面相关的业务分析等等。</li>
<li><strong>代码本身的稳定可靠、性能优异。</strong></li>
</ol>
<p>这两点，其实跟后端开发没什么区别。后端开发的价值也是这两点，只是第一点中的“界面设计”要换成“业务需求”。并且把这两点做好了，无论前端还是后端，对“用户体验”的贡献都蛮大。</p>
</li>
</ol>
<p>一不小心写了这么多，好晚了，睡觉先。欢迎各位参与讨论。</p>
]]></description><link>http://acyort.github.io/posts/6082264.html</link><guid isPermaLink="true">http://acyort.github.io/posts/6082264.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 17 Jun 2016 02:49:17 GMT</pubDate></item><item><title><![CDATA[微博中的人生一态]]></title><description><![CDATA[<p>俗话说人生百态，如今的微博，却让我觉得微博中的人生在趋向于一态：那就是骂骂政府，调戏调戏官员。这似乎成了一条铁律，但凡有人冒犯，立刻会有人暴跳如雷，呼朋引友，必要将冒犯者批成五毛，骂成白痴，否则难平心中怨气。</p>
<p>今天上午我一不小心，就践踏了铁律，在微博上连发了三条“大逆不道”的文字：</p>
<blockquote>
<p>每次发生灾难，总会有一堆人对政府指手划脚。这帮人的理念如此之好，欲望如此之强，为何不去考公务员呢，为何不去执政呢？要改变得去做，而不是说。</p>
<p>说也是一种做，但远远不够。要去改变得真枪实刀的去做。光说的人，你们以为微薄真能改变世界吗？一帮SB</p>
<p>在说与做上，非常佩服马云。马云想反腐，于是大刀阔斧的去做。斩卫哲，清聚划算，干净利落。中国从来不缺能说会道的文将，缺的是勇于去做的武将。</p>
</blockquote>
<p>发完后我赶火车去了，也就没关注了。归途中有朋友电话告知，才知道我貌似冒犯到了一批六毛党（你他妈的才是五毛党），这批六毛党最擅长将别人批成白痴和五毛党，比如：</p>
<blockquote>
<p>Doitim徐哲：无语，此言论实在是SB</p>
</blockquote>
<p>对这条回复非常无语，与徐哲算是有过一面之交，当时挺佩服他关于流程和规范的论点，但这种“无语”同时又骂人SB的回复，我非常怀疑徐哲的账号是不是被盗了。徐哲转发这条微博后，引来了大量六毛，对于之后的这些六毛，就更不说什么了，因为你们连我的微博都没看完，你们的心情充满浮躁怨气，我只想劝你们去去寺庙，学学佛吧。</p>
<blockquote>
<p>说也是一种促进，做需要更大努力。再说，我不认为一个人在这个官场能做出多大改变。如果说都不能说，那不是更可怕。 </p>
</blockquote>
<p>这是另外一批回复，我表示完全赞同。我的三条微博，并没有反对大家去说，而是反对大家只说不做。如果我的微博没有表达清楚，我表示歉意。对于北京暴雨这事，我很佩服郑渊洁：</p>
<blockquote>
<p>@郑渊洁  ： 去年8月26日大雨，北京王四营桥下严重积水：<a href="http://weibo.com/1195031270/xlfqkAfPs">http://weibo.com/1195031270/xlfqkAfPs</a> 我给朝阳区长发了微博公开信：<a href="http://weibo.com/1195031270/xlzIH50dJ">http://weibo.com/1195031270/xlzIH50dJ</a> 区长回复承诺改进排水系统力争遇雨不再积水：<a href="http://t.cn/a3Aidq">http://t.cn/a3Aidq</a> 现在北京又降暴雨，我冒雨专程到王四营桥，看到路面没有积水。如图。</p>
</blockquote>
<p>郑渊洁让我钦佩之处是，不光有说，还有行，并且让事情办成了。</p>
<p>在微博上发言，应当仅仅是事情的第一步。敢于说出来，这需要勇气，但仅仅有这份勇气还远远不够。我们还得应该要有让话语成真的推动力。否则很多事情只会止行于言，很难往前真正迈步。（写程序也是这个道理，真正去写才能往前。创业应该也如此⋯⋯）</p>
<blockquote>
<p>请先自己做起</p>
</blockquote>
<p>有少数几个回复提及了“做”，很泪奔终于有人不纠结于说，而开始谈“做”了。这个我不想辩解，熟悉我的人都知道我是一个敢说敢做的人，甚至很多人担心我去做，怕我的直率火爆得罪人。提及马云的那条微博，是写给自己的。马总是一个挺能说的人，但马总更让人佩服的是他的做，他的行动。如果马云只会在微博上发发电子商务的牢骚，那肯定不会有阿里巴巴。</p>
<p>好像还有很多想说的，不过太晚了。为了不把时间浪费在说上，我得赶快睡了，以便明天有更多的时间精力去“做”事情。</p>
]]></description><link>http://acyort.github.io/posts/5783155.html</link><guid isPermaLink="true">http://acyort.github.io/posts/5783155.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Sun, 04 Sep 2016 09:39:35 GMT</pubDate></item><item><title><![CDATA[当我谈分号时，我谈些什么？]]></title><description><![CDATA[<p>前不久，hax 挑起了分号之争：<a href="http://www.zhihu.com/question/20298345">JavaScript 语句后应该加分号么？</a></p>
<p>hax 的论点不赘述，请仔细阅读知乎上的文字。微博上后来也有讨论，有兴趣的可搜索。</p>
<p>这场不大不小的讨论，现在回想起来，挺有意思。几点感想：</p>
<ol>
<li><p><strong>浮躁影响深入</strong>。经常有人问我如何成长、如何成为前端牛人？牛人的定义各有各的不同。在我心目中，牛人是黑客的代名词。我自己离“牛”的境界还远着，至于如何牛，也在摸索中。最近几年最大的感受是：<strong>心静自然牛</strong>。“静”字很有意思，拆开，是 “争” + “青”，即赢得青春。心静首先就得不浮躁，能沉下心来，踏踏实实去做好每一件事。回到分号之争，不浮躁首先就要求能安安静静下来认真去读一遍 hax 的总结，读完之后再悄然离开或发表自己的观点。这样才有可能真正参与到讨论中来，而不是当局者清，旁观者迷。</p>
</li>
<li><p><strong>习惯是件可怕的东西</strong>。很多人反对不加分号的理由是：习惯了加分号。这让我想起见过的很多代码：死套设计模式的、陈旧性能优化的、老式惯有写法的等等。比如，目前 node 风生云起，但很多玩 node 的代码里，充斥着 <code>for each</code> 等代码，而从来没有去尝试过 <code>forEach / map / filter / reduce</code> 等方法，更别说去试试老赵的 Jscex 异步流程的自然写法了。每每看到这些，我脑海里就浮现出大大的两个字：码农。从这个层面上讲，码农还真不是自嘲，而是国内很多程序员的真实写照。码农是悲催的，每天搬运着砖块，倘若跟对了人，还能为大厦添些砖加些瓦，倘若没跟对人，能造出来的也只能是豆腐渣工程。挑战习惯需要勇气，勇气是创新的第一步。前面举的例子只是非常小的一个点，写 <code>for each</code> 是没错的，但只会写 <code>for each</code> 的程序员，不客气的说，就别写程序了。挑战习惯，是种生活方式。如果老保持旧有习惯，那么我们应该继续沿袭包办婚姻才对。习惯是件可怕的东西，当你拿习惯来抵抗新事物时，一定要小心。</p>
</li>
<li><p><strong>入乡随俗最可贵</strong>。对于分号，其实对我来说无所谓。加分号也习惯，不加分号也习惯，取决于在哪个社区。比如要给 zepto 提交 pull request，遵守 zepto 的无分号风格很重要。去 backbone 社区提交代码，则遵循 backbone 的注释规范很重要，同理，jquery 社区，node 社区等等，都会有自己的风格，如果想参与到这些社区中，遵循社区的统一风格是基本要求。除了分号，还有用四空格还是两空格，以及括号前后是否加空格等等细节问题。遵循并理解这些不同的风格，这对个人来说是种提升，对社区也是一种尊重。倘若想改变，首先得先融入。生活中的很多事情也如此。比如旅游，如果去了西藏，依旧每天吃水煮鱼，或玩手机，那就别去了。那种旅游，只是肉体的转移和金钱的浪费，没啥裨益。</p>
</li>
</ol>
<p>好久没写博客了，这次用 GitHub 的 Issue 来写，也算是挑战一下旧有习惯，和代码里不写分号其实是一样一样的。</p>
]]></description><link>http://acyort.github.io/posts/5654910.html</link><guid isPermaLink="true">http://acyort.github.io/posts/5654910.html</guid><dc:creator><![CDATA[lifesinger]]></dc:creator><pubDate>Fri, 27 May 2016 05:53:01 GMT</pubDate></item></channel></rss>